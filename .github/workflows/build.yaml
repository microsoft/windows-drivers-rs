on:
  push:
  pull_request:
  merge_group:
  schedule: # Trigger a job on default branch at 4AM PST everyday
    - cron: "0 11 * * *"

name: Build

env:
  RUSTFLAGS: >-
    -D warnings
    -C target-feature=+crt-static

jobs:
  build:
    name: Build
    runs-on: windows-latest
    strategy:
      matrix:
        wdk:
          # - Microsoft.WindowsWDK.10.0.22621 # NI WDK
          - Microsoft.Windows.WDK # Latest WDK

        llvm:
          - 17.0.6

        rust_toolchain:
          - stable
          # - beta
          # - nightly

        cargo_profile:
          - dev
          # - release

        target_triple:
          - x86_64-pc-windows-msvc
          - aarch64-pc-windows-msvc

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Install Winget
        uses: ./.github/actions/winget-install
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install LLVM ${{ matrix.llvm }}
        run: |
          if ((Get-WinGetPackage -Id LLVM -Source winget -MatchOption Equals).InstalledVersion -eq '${{ matrix.llvm }}') {
            Write-Host "LLVM ${{ matrix.llvm }} is already installed."
          } else {
            Write-Host "Installing LLVM ${{ matrix.llvm }}..."
            Install-WinGetPackage -Id LLVM.LLVM -Version ${{ matrix.llvm }} -Source winget -MatchOption Equals -Mode Silent -Force
          }
          clang --version

      - name: Install WDK (${{ matrix.wdk }})
        if: matrix.wdk == 'Microsoft.WindowsWDK.10.0.22621'
        run: |
          if ((Get-WinGetPackage -Id ${{ matrix.wdk }} -Source winget -MatchOption Equals).Id -eq '${{ matrix.wdk }}') {
            Write-Host "${{ matrix.wdk }} is already installed. Attempting to update..."
            Update-WinGetPackage -Id ${{ matrix.wdk }} -Source winget -MatchOption Equals -Mode Silent -Force
          } else {
            Write-Host "Installing ${{ matrix.wdk }}..."
            Install-WinGetPackage -Id ${{ matrix.wdk }} -Source winget -MatchOption Equals -Mode Silent -Force
          }
      
      - name: Install WDK ${{ matrix.wdk }} (NuGet)
        if: matrix.wdk == 'Microsoft.Windows.WDK'
        run: |
          nuget restore .\packages.config -PackagesDirectory C:\WDK
          Write-Host "WDK installed at C:\WDK"
          $folders = @(
            "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591",
            "C:\WDK\Microsoft.Windows.SDK.CPP.x64.10.0.26100.1591",
            "C:\WDK\Microsoft.Windows.SDK.CPP.10.0.26100.1591"
          )
          foreach ($folder in $folders) {
            if (-Not (Test-Path $folder)) {
              Write-Error "Required folder $folder is missing."
              exit 1
            }
          }
          $signtoolx64 = "C:\WDK\Microsoft.Windows.SDK.CPP.10.0.26100.1591\c\bin\10.0.26100.0\x64\signtool.exe"
          $signtoolX86 = "C:\WDK\Microsoft.Windows.SDK.CPP.10.0.26100.1591\c\bin\10.0.26100.0\x86\signtool.exe"
          $destinationx64 = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c\bin\10.0.26100.0\x64"
          $destinationX86 = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c\bin\10.0.26100.0\x86"
          if (Test-Path $signtoolx64) {
            Copy-Item -Path $signtoolx64 -Destination $destinationx64 -Force
            Write-Host "Copied signtool.exe to $destinationx64"
          } else {
            Write-Error "signtool.exe not found at $signtoolx64"
          }
          if (Test-Path $signtoolX86) {
            Copy-Item -Path $signtoolX86 -Destination $destinationX86 -Force
            Write-Host "Copied signtool.exe to $destinationX86"
          } else {
            Write-Error "signtool.exe not found at $signtoolX86"
          }

          $sourceFolder = "C:\WDK\Microsoft.Windows.WDK.ARM64.10.0.26100.1591\c\Lib\10.0.26100.0\km\arm64"
          $destinationFolder = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c\Lib\10.0.26100.0\km"
          if (Test-Path $sourceFolder) {
            Copy-Item -Path $sourceFolder -Destination $destinationFolder -Recurse -Force
            Write-Host "Copied $sourceFolder to $destinationFolder"
          } else {
            Write-Error "Source folder $sourceFolder not found"
          }

          $sourceFolder = "C:\WDK\Microsoft.Windows.WDK.ARM64.10.0.26100.1591\c\Lib\10.0.26100.0\um\arm64"
          $destinationFolder = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c\Lib\10.0.26100.0\um"
          if (Test-Path $sourceFolder) {
            Copy-Item -Path $sourceFolder -Destination $destinationFolder -Recurse -Force
            Write-Host "Copied $sourceFolder to $destinationFolder"
          } else {
            Write-Error "Source folder $sourceFolder not found"
          }

          $sourceFolder = "C:\WDK\Microsoft.Windows.WDK.ARM64.10.0.26100.1591\c\Lib\wdf\kmdf\ARM64"
          $destinationFolder = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c\Lib\wdf\kmdf"
          if (Test-Path $sourceFolder) {
            Copy-Item -Path $sourceFolder -Destination $destinationFolder -Recurse -Force
            Write-Host "Copied $sourceFolder to $destinationFolder"
          } else {
            Write-Error "Source folder $sourceFolder not found"
          }

          $sourceFolder = "C:\WDK\Microsoft.Windows.WDK.ARM64.10.0.26100.1591\c\Lib\wdf\umdf\ARM64"
          $destinationFolder = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c\Lib\wdf\umdf"
          if (Test-Path $sourceFolder) {
            Copy-Item -Path $sourceFolder -Destination $destinationFolder -Recurse -Force
            Write-Host "Copied $sourceFolder to $destinationFolder"
          } else {
            Write-Error "Source folder $sourceFolder not found"
          }

          $NugetWdkContentRoot = "C:\WDK\Microsoft.Windows.WDK.x64.10.0.26100.1591\c"
          echo "NugetWdkContentRoot=$NugetWdkContentRoot" >> $env:GITHUB_ENV          

      - name: Install Rust Toolchain (${{ matrix.rust_toolchain }})
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust_toolchain }}
          targets: ${{ matrix.target_triple }}

      - name: Run Cargo Build
        run: cargo +${{ matrix.rust_toolchain }} build --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple }} --workspace

      - name: Install Cargo Make
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make

      - name: Run Cargo Make (package-driver-flow) in Workspace
        run: cargo make package-driver-flow +${{ matrix.rust_toolchain }} --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple }} --workspace

      - name: Build Examples (via Cargo Make)
        run: cargo make --cwd ./examples build +${{ matrix.rust_toolchain }} --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple }}

      - name: Package Examples (via Cargo Make)
        run: cargo make --cwd ./examples package-driver-flow +${{ matrix.rust_toolchain }} --locked --profile ${{ matrix.cargo_profile }} --target ${{ matrix.target_triple }}
