name: Local Development Makefile

on:
  push:
    branches-ignore:
      - 'gh-readonly-queue/**'
  pull_request:
  merge_group:
  schedule: # Trigger a job on default branch at 4AM PST everyday
    - cron: 0 11 * * *

concurrency:
  group: ${{ github.workflow }}-${{ github.event.compare || github.head_ref || github.ref }}
  cancel-in-progress: ${{ github.ref != 'refs/heads/main' }}

env:
  RUSTFLAGS: -D warnings

jobs:
  build:
    name: Test WDR's local cargo-make Makefile
    strategy:
      fail-fast: false # Allow all matrix variants to complete even if some fail
      matrix:
        runner:
          - name: windows-2025
            arch: amd64
          - name: windows-11-arm
            arch: arm64

        wdk:
          - version: 10.0.22621 # NI WDK
            source: winget
          - version: 10.0.26100 # GE WDK
            source: nuget

        llvm:
          - 17.0.6

    runs-on: ${{ matrix.runner.name }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v5

      - name: Install Winget
        if: matrix.runner.name == 'windows-11-arm'
        uses: ./.github/actions/install-winget
        with:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Winget PowerShell Module
        shell: pwsh
        run: Install-Module -Name Microsoft.WinGet.Client -Repository PSGallery -Force

      - name: Install LLVM ${{ matrix.llvm }}
        uses: ./.github/actions/install-llvm
        with:
          version: ${{ matrix.llvm }}

      - name: Install WDK (${{ matrix.wdk.version }})
        id: install_wdk
        uses: ./.github/actions/install-wdk
        with:
          version: ${{ matrix.wdk.version }}
          source: ${{ matrix.wdk.source }}
          architectures: ${{ matrix.wdk.source == 'nuget' && matrix.runner.arch || '' }}

      - name: Configure WDK environment (NuGet)
        if: matrix.wdk.source == 'nuget'
        shell: pwsh
        run: |
          Set-StrictMode -Version Latest
          $ErrorActionPreference = 'Stop'

          $packageRoot = '${{ steps.install_wdk.outputs.package-root }}'
          $sdkVersionNumber = '${{ steps.install_wdk.outputs.sdk-version-number }}'

          if ([string]::IsNullOrWhiteSpace($packageRoot)) {
              throw 'install-wdk action did not return a package-root output.'
          }

          if ([string]::IsNullOrWhiteSpace($sdkVersionNumber)) {
              throw 'install-wdk action did not return an sdk-version-number output.'
          }

          $runnerArch = '${{ matrix.runner.arch }}'
          $nugetArch = switch ($runnerArch) {
              'amd64' { 'x64' }
              'arm64' { 'ARM64' }
              default { throw "Unsupported runner architecture: $runnerArch" }
          }

          $sdkVersionBase = $sdkVersionNumber -replace "\.0$",""
          $wdkPackagePattern = "Microsoft.Windows.WDK.$nugetArch.$sdkVersionBase*"

          $wdkPackageDir = Get-ChildItem -Path $packageRoot -Directory -Filter $wdkPackagePattern |
            Sort-Object Name |
            Select-Object -Last 1

          if ($null -eq $wdkPackageDir) {
              throw "Unable to locate WDK package directory using pattern '$wdkPackagePattern' under '$packageRoot'."
          }

          $sdkPackageRegex = "^Microsoft\.Windows\.SDK\.CPP\.$sdkVersionBase(\.\d+)?$"
          $sdkPackageDir = Get-ChildItem -Path $packageRoot -Directory |
            Where-Object { $_.Name -match $sdkPackageRegex } |
            Sort-Object Name |
            Select-Object -Last 1

          if ($null -eq $sdkPackageDir) {
              throw "Unable to locate Windows SDK package matching '$sdkPackageRegex' under '$packageRoot'."
          }

          $wdkContentRoot = Join-Path $wdkPackageDir.FullName 'c'
          $wdkBinRoot = Join-Path $wdkContentRoot 'bin'
          $wdkToolRoot = Join-Path $wdkContentRoot 'tools'
          $windowsSdkContentRoot = Join-Path $sdkPackageDir.FullName 'c'
          $windowsSdkBinPath = Join-Path $windowsSdkContentRoot 'bin'

          foreach ($path in @($wdkContentRoot, $wdkBinRoot, $wdkToolRoot, $windowsSdkBinPath)) {
              if (-not (Test-Path $path)) {
                  throw "Required path not found: $path"
              }
          }

          "WDKContentRoot=$wdkContentRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "WDKBinRoot=$wdkBinRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "WDKToolRoot=$wdkToolRoot" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "WindowsSdkBinPath=$windowsSdkBinPath" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append
          "Version_Number=$sdkVersionNumber" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

      - name: Install Nightly Rust Toolchain
        uses: dtolnay/rust-toolchain@nightly
        with:
          components: clippy, rustfmt
          targets: |
            x86_64-pc-windows-msvc
            aarch64-pc-windows-msvc

      - name: Install Beta Rust Toolchain
        uses: dtolnay/rust-toolchain@beta
        with:
          components: clippy
          targets: |
            x86_64-pc-windows-msvc
            aarch64-pc-windows-msvc

      - name: Install Stable Rust Toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: clippy
          targets: |
            x86_64-pc-windows-msvc
            aarch64-pc-windows-msvc

      - name: Install Cargo Make
        uses: taiki-e/install-action@v2
        with:
          tool: cargo-make

      - name: Test wdk-pre-commit-flow cargo-make task
        run: cargo make wdk-pre-commit-flow
