name: Install WDK
description: "Install Windows Driver Kit via NuGet or WinGet with robust error handling and verification"

inputs:
    version:
        description: "WDK version to install. Format: 10.0.XXXXX or 10.0.XXXXX.YYYY. If QFE (4th component) is omitted, the latest available QFE is selected."
        required: true
    source:
        description: "Source to install WDK from (nuget or winget)."
        required: false
        default: "nuget"
    architectures:
        description: "Comma or whitespace separated list of architectures (x64, ARM64). Required when using the NuGet source."
        required: false
        default: "x64"

outputs:
  nuget-package-root:
    description: "Root directory containing downloaded NuGet packages."
    value: ${{ steps.finalize.outputs.nuget-package-root }}
  sdk-version-number:
    description: "Full SDK version number (base version with trailing .0)."
    value: ${{ steps.finalize.outputs.sdk-version-number }}

runs:
    using: "composite"
    steps:
        - name: Validate inputs
          id: validate
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'

            $source = '${{ inputs.source }}'
            $version = '${{ inputs.version }}'
            $architecturesRaw = '${{ inputs.architectures }}'

            Write-Host "Validating WDK installation inputs..."
            Write-Host "Source: $source"
            Write-Host "Version: $version"
            Write-Host "Architectures: $architecturesRaw"

            # Validate source
            if ($source -notin @('nuget', 'winget')) {
                throw "Invalid source: $source. Must be 'nuget' or 'winget'."
            }

            # Validate version format
            if ($version -notmatch '^10\.0\.\d{5}(\.\d{1,4})?$') {
                throw "Invalid version format: $version. Expected format: 10.0.XXXXX or 10.0.XXXXX.YYYY"
            }

            # Validate architecture inputs for NuGet
            if ($source -eq 'nuget') {
                if ([string]::IsNullOrWhiteSpace($architecturesRaw)) {
                    throw 'At least one architecture must be provided when using the NuGet source.'
                }

                $validArchitectures = @('x64', 'ARM64')
                $architectures = @()

                foreach ($entry in ($architecturesRaw -split '[,\s]+' | Where-Object { -not [string]::IsNullOrWhiteSpace($_) })) {
                    if ($validArchitectures -notcontains $entry) {
                        $validList = $validArchitectures -join ', '
                        throw "Unsupported architecture '$entry'. Supported values: $validList"
                    }

                    if ($architectures -notcontains $entry) {
                        $architectures += $entry
                    }
                }

                if ($architectures.Count -eq 0) {
                    throw 'No valid architectures were provided for NuGet installation.'
                }

                $architectures = $architectures | Sort-Object -Unique
                $architecturesJson = $architectures | ConvertTo-Json -Compress
                "architectures-json=$architecturesJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }

            if ($source -eq 'winget') {
                if (-not [string]::IsNullOrWhiteSpace($architecturesRaw)) {
                    throw 'Architectures should not be specified when using the WinGet source.'
                }
            }

            Write-Host "âœ… Input validation passed"

        - name: Install WDK via NuGet
          if: inputs.source == 'nuget'
          id: nuget-install
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'
            $ProgressPreference = 'SilentlyContinue'

            $architecturesInfo = ConvertFrom-Json -InputObject '${{ steps.validate.outputs.architectures-json }}'
            if ($null -eq $architecturesInfo) {
                throw 'No architectures available for NuGet installation.'
            }
            if ($architecturesInfo -isnot [System.Array]) {
                $architecturesInfo = @($architecturesInfo)
            }

            $inputVersion = '${{ inputs.version }}'

            if ($inputVersion.Split('.').Length -eq 3) {
                Write-Host "No QFE specified, searching for latest QFE for version $inputVersion..."
                try {
                    Write-Host "Querying NuGet API for available versions..."
                    $nugetApiUrl = "https://api.nuget.org/v3-flatcontainer/microsoft.windows.wdk.x64/index.json"
                    $response = Invoke-RestMethod -Uri $nugetApiUrl -TimeoutSec 30
                    $availableVersions = @($response.versions | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' })
                    $matchingVersions = @($availableVersions | Where-Object { $_.StartsWith("$inputVersion.") })
                    if ($matchingVersions.Count -gt 0) {
                        $version = $matchingVersions | Sort-Object { [System.Version]$_ } | Select-Object -Last 1
                        Write-Host "Found latest QFE version: $version"
                    } else {
                        Write-Warning "No QFE versions found for base version $inputVersion; using base version."
                        $version = $inputVersion
                    }
                } catch {
                    Write-Warning "Failed to query NuGet for latest QFE version: $_"
                    Write-Host "Using input version $inputVersion without QFE lookup"
                    $version = $inputVersion
                }
            } else {
                $version = $inputVersion
                Write-Host "Using specified version: $version"
            }

            $packages = 'C:\packages'

            $resolvedVersionParts = $version.Split('.')
            if ($resolvedVersionParts.Length -lt 3) {
                throw "Resolved WDK version '$version' does not contain at least three components."
            }

            $baseSdkVersion = ($resolvedVersionParts[0..2] -join '.')
            $sdkVersionNumber = "$baseSdkVersion.0"

            $packagesToInstall = @()
            foreach ($architecture in $architecturesInfo) {
                $packageName = "Microsoft.Windows.WDK.$architecture"
                if (-not ($packagesToInstall | Where-Object { $_.PackageId -eq $packageName })) {
                    $packagesToInstall += [PSCustomObject]@{
                        PackageId   = $packageName
                        Version     = $version
                        DisplayName = $packageName
                    }
                }
            }

            $sdkPackageDisplayName = "Microsoft.Windows.SDK.CPP.$version"
            if (-not ($packagesToInstall | Where-Object { $_.PackageId -eq 'Microsoft.Windows.SDK.CPP' })) {
                $packagesToInstall += [PSCustomObject]@{
                    PackageId   = 'Microsoft.Windows.SDK.CPP'
                    Version     = $version
                    DisplayName = $sdkPackageDisplayName
                }
            }

            Write-Host "Installing WDK and SDK NuGet packages..."
            foreach ($package in $packagesToInstall) {
                Write-Host "Installing $($package.DisplayName) (package id: $($package.PackageId)) version $($package.Version)..."
                nuget install $package.PackageId -Version $package.Version -OutputDirectory $packages
                if ($LASTEXITCODE -ne 0) {
                    throw "Failed to install $($package.DisplayName) version $($package.Version)"
                }
            }

            Write-Host "Successfully installed required WDK and SDK packages."

            @"
            nuget-package-root=$packages
            sdk-version-number=$sdkVersionNumber
            "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

        - name: Remove existing Windows SDK packages
          if: inputs.source == 'winget'
          uses: ./.github/actions/uninstall-winget-package
          with:
            queries: |
                Microsoft.WindowsSDK
                Windows Software Development Kit

        - name: Remove existing Windows Driver Kit packages
          if: inputs.source == 'winget'
          uses: ./.github/actions/uninstall-winget-package
          with:
            queries: |
                Microsoft.WindowsWDK
                Windows Driver Kit

        - name: Calculate SDK version
          if: inputs.source == 'winget'
          id: winget-metadata
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'

            $inputVersion = '${{ inputs.version }}'
            Write-Host "Processing WDK version: $inputVersion"
            $baseSdkVersion = $inputVersion.Split('.')[0..2] -join '.'
            $sdkVersionNumber = "$baseSdkVersion.0"
            @"
            base-sdk-version=$baseSdkVersion
            sdk-version-number=$sdkVersionNumber
            "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

        - name: Install Windows SDK
          if: inputs.source == 'winget'
          uses: ./.github/actions/install-winget-package
          with:
            package-id: Microsoft.WindowsSDK.${{ steps.winget-metadata.outputs.base-sdk-version }}
            # Workaround for 10.0.22621 SDK installer bug:
            # The installer concatenates long strings to the log path provided by winget, creating paths exceeding 256 chars
            # when winget appends `/log`. Specifying override args explicitly prevents winget from appending `/log`.
            override-args: ${{ (inputs.version == '10.0.22621' || startsWith(inputs.version, '10.0.22621.')) && '/q' || '' }}
            skip-if-installed: "true"
            timeout-minutes: "10"

        - name: Install Windows Driver Kit
          if: inputs.source == 'winget'
          uses: ./.github/actions/install-winget-package
          with:
            package-id: Microsoft.WindowsWDK.${{ inputs.version }}
            skip-if-installed: "true"
            timeout-minutes: "10"

        - name: Finalize action outputs
          id: finalize
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'

            $nugetPackageRoot = "${{ steps.nuget-install.outputs.nuget-package-root }}"
            $sdkVersionNumber = "${{ steps.nuget-install.outputs.sdk-version-number }}"

            if ('${{ inputs.source }}' -eq 'nuget') {
                $nugetPackageRoot = 'C:\packages'
            } else {
                $nugetPackageRoot = ''
            }

            if ([string]::IsNullOrWhiteSpace($sdkVersionNumber)) {
                $sdkVersionNumber = "${{ steps.winget-metadata.outputs.sdk-version-number }}"
            }

            @"
            nuget-package-root=$nugetPackageRoot
            sdk-version-number=$sdkVersionNumber
            "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
