name: Install WDK
description: "Install Windows Driver Kit via NuGet or WinGet with robust error handling and verification"

inputs:
    version:
        description: "WDK version to install. Format: 10.0.XXXXX or 10.0.XXXXX.YYYY. If QFE (4th component) is omitted, the latest available QFE is selected."
        required: true
    source:
        description: "Source to install WDK from (nuget or winget)."
        required: false
        default: "nuget"
    architectures:
        description: "Comma or whitespace separated list of architectures (amd64, arm64). Required when using NuGet source."
        required: false

outputs:
    package-root:
        description: "Root directory containing downloaded NuGet packages."
        value: ${{ steps.finalize.outputs.package-root }}
    sdk-version-number:
        description: "Full SDK version number (base version with trailing .0)."
        value: ${{ steps.finalize.outputs.sdk-version-number }}

runs:
    using: "composite"
    steps:
        - name: Validate inputs
          id: validate
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'

            $source = '${{ inputs.source }}'
            $version = '${{ inputs.version }}'
            $architecturesRaw = '${{ inputs.architectures }}'

            Write-Host "Validating WDK installation inputs..."
            Write-Host "Source: $source"
            Write-Host "Version: $version"
            Write-Host "Architectures: $architecturesRaw"

            # Validate source
            if ($source -notin @('nuget', 'winget')) {
                throw "Invalid source: $source. Must be 'nuget' or 'winget'."
            }

            # Validate version format
            if ($version -notmatch '^10\.0\.\d{5}(\.\d{1,4})?$') {
                throw "Invalid version format: $version. Expected format: 10.0.XXXXX or 10.0.XXXXX.YYYY"
            }

            # Validate architecture inputs for NuGet
            if ($source -eq 'nuget') {
                if ([string]::IsNullOrWhiteSpace($architecturesRaw)) {
                    throw 'At least one architecture must be provided when using the NuGet source.'
                }

                $architectures = @{}
                foreach ($entry in ($architecturesRaw -split '[,\s]+' | Where-Object { -not [string]::IsNullOrWhiteSpace($_) })) {
                    $normalized = $entry.ToLowerInvariant()
                    switch ($normalized) {
                        'amd64' { $architectures['amd64'] = 'x64' }
                        'arm64' { $architectures['arm64'] = 'ARM64' }
                        default { throw "Unsupported architecture '$entry'. Must be 'amd64' or 'arm64'." }
                    }
                }

                if ($architectures.Count -eq 0) {
                    throw 'No valid architectures were provided for NuGet installation.'
                }

                $archInfo = @()
                foreach ($kvp in $architectures.GetEnumerator()) {
                    $archInfo += [PSCustomObject]@{
                        canonical = $kvp.Key
                        nuget     = $kvp.Value
                    }
                }

                $archInfoJson = $archInfo | ConvertTo-Json -Compress
                "architectures-json=$archInfoJson" | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
            }

            if ($source -eq 'winget') {
                if (-not [string]::IsNullOrWhiteSpace($architecturesRaw)) {
                    throw 'Architectures should not be specified when using the WinGet source.'
                }
            }

            Write-Host "âœ… Input validation passed"

        - name: Install WDK via NuGet
          if: inputs.source == 'nuget'
          id: install-nuget
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'
            $ProgressPreference = 'SilentlyContinue'

            function Select-SinglePackage {
                param(
                    [Parameter(Mandatory)]
                    [object[]]$Packages,
                    [Parameter(Mandatory)]
                    [string]$PackageType
                )

                if ($Packages.Count -eq 1) {
                    return $Packages[0]
                } elseif ($Packages.Count -gt 1) {
                    throw "Multiple $PackageType packages found: $($Packages.Name -join ', '). Expected exactly one."
                } else {
                    throw "No $PackageType package found."
                }
            }

            $architecturesInfo = ConvertFrom-Json -InputObject '${{ steps.validate.outputs.architectures-json }}'
            if ($null -eq $architecturesInfo) {
                throw 'No architectures available for NuGet installation.'
            }
            if ($architecturesInfo -isnot [System.Array]) {
                $architecturesInfo = @($architecturesInfo)
            }

            $inputVersion = '${{ inputs.version }}'
            $versionParts = $inputVersion.Split('.')
            $sdkVersion = $versionParts[0..2] -join '.'

            if ($versionParts.Length -eq 3) {
                Write-Host "No QFE specified, searching for latest QFE for version $inputVersion..."
                try {
                    Write-Host "Querying NuGet API for available versions..."
                    $nugetApiUrl = "https://api.nuget.org/v3-flatcontainer/microsoft.windows.wdk.x64/index.json"
                    $response = Invoke-RestMethod -Uri $nugetApiUrl -TimeoutSec 30
                    $availableVersions = @($response.versions | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' })
                    $matchingVersions = @($availableVersions | Where-Object { $_.StartsWith("$inputVersion.") })
                    if ($matchingVersions.Count -gt 0) {
                        $version = $matchingVersions | Sort-Object { [System.Version]$_ } | Select-Object -Last 1
                        Write-Host "Found latest QFE version: $version"
                    } else {
                        Write-Warning "No QFE versions found for base version $inputVersion; using base version."
                        $version = $inputVersion
                    }
                } catch {
                    Write-Warning "Failed to query NuGet for latest QFE version: $_"
                    Write-Host "Using input version $inputVersion without QFE lookup"
                    $version = $inputVersion
                }
            } else {
                $version = $inputVersion
                Write-Host "Using specified version: $version"
            }

            $packages = 'C:\packages'

            $packagesToInstall = @()
            foreach ($archInfo in $architecturesInfo) {
                $packageName = "Microsoft.Windows.WDK.$($archInfo.nuget)"
                if ($packagesToInstall -notcontains $packageName) {
                    $packagesToInstall += $packageName
                }
            }

            Write-Host "Installing WDK NuGet packages for version $version..."
            Write-Host "Required packages: $($packagesToInstall -join ', ')"

            foreach ($packageName in $packagesToInstall) {
                Write-Host "Installing $packageName version $version..."
                nuget install $packageName -Version $version -OutputDirectory $packages
                if ($LASTEXITCODE -ne 0) {
                    throw "Failed to install $packageName version $version"
                }
            }

            Write-Host "Successfully installed all WDK packages and dependencies for version $version"

            Write-Host "Discovering installed package paths..."
            $packageDirs = Get-ChildItem -Path $packages -Directory | Where-Object { $_.Name -like "Microsoft.Windows.*.$sdkVersion.*" }
            Write-Host "Found $($packageDirs.Count) package directories."

            $sdkPackageDirs = @($packageDirs | Where-Object { $_.Name -like 'Microsoft.Windows.SDK.CPP*' })
            if ($sdkPackageDirs.Count -eq 0) {
                throw 'No SDK packages found in packages folder.'
            }

            $baseSDKPackages = @($sdkPackageDirs | Where-Object { $_.Name -match "^Microsoft\\.Windows\\.SDK\\.CPP\.$sdkVersion(\\.\d+)?$" })
            $sdkPackageDir = Select-SinglePackage -Packages $baseSDKPackages -PackageType 'architecture-neutral SDK'

            $sdkRoot = $sdkPackageDir.FullName
            $sdkBinPath = Join-Path $sdkRoot 'c\bin'
            if (-not (Test-Path $sdkBinPath)) {
                throw "Critical path not found: Windows SDK bin path = $sdkBinPath"
            }

            $sdkVersionNumber = "$sdkVersion.0"

            @"
            package-root=$packages
            sdk-version-number=$sdkVersionNumber
            "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

        - name: Remove existing Windows SDK packages
          if: inputs.source == 'winget'
          uses: ./.github/actions/uninstall-winget-package
          with:
            queries: |
                Microsoft.WindowsSDK
                Windows Software Development Kit

        - name: Remove existing Windows Driver Kit packages
          if: inputs.source == 'winget'
          uses: ./.github/actions/uninstall-winget-package
          with:
            queries: |
                Microsoft.WindowsWDK
                Windows Driver Kit

        - name: Calculate SDK version
          if: inputs.source == 'winget'
          id: winget-metadata
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'

            $inputVersion = '${{ inputs.version }}'
            Write-Host "Processing WDK version: $inputVersion"

                    $versionParts = $inputVersion.Split('.')
                    $sdkVersion = $versionParts[0..2] -join '.'
                    $sdkVersionNumber = "$sdkVersion.0"

            @"
            sdk-version=$sdkVersion
            sdk-version-number=$sdkVersionNumber
            "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append

        - name: Install Windows SDK
          if: inputs.source == 'winget'
          uses: ./.github/actions/install-winget-package
          with:
            package-id: Microsoft.WindowsSDK.${{ steps.winget-metadata.outputs.sdk-version }}
            # Workaround for 10.0.22621 SDK installer bug:
            # The installer concatenates long strings to the log path provided by winget, creating paths exceeding 256 chars
            # when winget appends `/log`. Specifying override args explicitly prevents winget from appending `/log`.
            override-args: ${{ (inputs.version == '10.0.22621' || startsWith(inputs.version, '10.0.22621.')) && '/q' || '' }}
            skip-if-installed: "true"
            timeout-minutes: "10"

        - name: Install Windows Driver Kit
          if: inputs.source == 'winget'
          uses: ./.github/actions/install-winget-package
          with:
            package-id: Microsoft.WindowsWDK.${{ inputs.version }}
            skip-if-installed: "true"
            timeout-minutes: "10"

        - name: Finalize action outputs
          id: finalize
          shell: pwsh
          run: |
            Set-StrictMode -Version Latest
            $ErrorActionPreference = 'Stop'

            $packageRoot = "${{ steps.install-nuget.outputs.package-root }}"
            $sdkVersionNumber = "${{ steps.install-nuget.outputs.sdk-version-number }}"

            if ([string]::IsNullOrWhiteSpace($sdkVersionNumber)) {
                $sdkVersionNumber = "${{ steps.winget-metadata.outputs.sdk-version-number }}"
            }

            @"
            package-root=$packageRoot
            sdk-version-number=$sdkVersionNumber
            "@ | Out-File -FilePath $env:GITHUB_OUTPUT -Encoding utf8 -Append
