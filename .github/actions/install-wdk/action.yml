name: Install WDK

inputs:
  version:
    description: "WDK version to install. Format: 10.0.XXXXX or 10.0.XXXXX.YYYY. If QFE (4th component) is omitted, the latest available QFE is selected."
    required: true
  source:
    description: "Source to install WDK from (nuget or winget)."
    required: true
  # required to set WDKBinRoot and WDKToolRoot based on the host architecture when using nuget
  host:
    description: "Host architecture (x64 or ARM64)."
    required: true
  # required to set WDKContentRoot based on the target architecture when using nuget
  target:
    description: "Target architecture (x64 or ARM64)."
    required: true

runs:
  using: "composite"
  steps:
    - name: Install WDK
      shell: pwsh
      run: |
        $hostArch = '${{ inputs.host }}'
        $targetArch = '${{ inputs.target }}'
        switch ($targetArch) {
            'amd64' { $targetArch = 'x64' }
            'arm64' { $targetArch = 'ARM64' }
            default {
                Write-Error "Invalid target architecture: $targetArch. Supported architectures are 'x64' and 'arm64'."
                exit 1
            }
        }
        
        $inputVersion = '${{ inputs.version }}'
        if ($inputVersion -notmatch '^10\.0\.\d{5}(\.\d{1,4})?$') {
            Write-Error "Invalid version format: $inputVersion"
            exit 1
        }
        $versionParts = $inputVersion.Split('.')
        $sdkVersion = $versionParts[0..2] -join '.'
        
        $source = '${{ inputs.source }}'
        if ($source -ne 'nuget' -and $source -ne 'winget') {
            Write-Error "Invalid source: $source. Supported sources are 'nuget' and 'winget'."
            exit 1
        }

        if ($source -eq 'nuget') {

          if ($versionParts.Length -eq 3) {
              # No QFE specified, find the latest QFE for this base version
              Write-Host "No QFE specified, searching for latest QFE for version $inputVersion..."
              $baseVersion = $inputVersion
              try {
                  $availableVersions = @()
                  Write-Host "Trying NuGet API..."
                  try {
                      # Check available `x64` versions. `arm64` and `x64` kits are released together almost always
                      $nugetApiUrl = "https://api.nuget.org/v3-flatcontainer/microsoft.windows.wdk.x64/index.json"
                      $response = Invoke-RestMethod -Uri $nugetApiUrl -ErrorAction SilentlyContinue
                      if ($response -and $response.versions) {
                          $availableVersions = $response.versions | Where-Object { $_ -match '^\d+\.\d+\.\d+\.\d+$' }
                          Write-Host "Found $($availableVersions.Count) versions using NuGet API"
                      }
                  } catch {
                      Write-Host "NuGet API query failed: ${_}"
                      exit 1
                  }
                  
                  # Filter versions that match the base version and find the latest QFE
                  $matchingVersions = $availableVersions | Where-Object { $_.StartsWith("$baseVersion.") }
                  if ($matchingVersions.Count -eq 0) {
                      Write-Warning "No QFE versions found for base version $baseVersion, trying without QFE..."
                      $version = $inputVersion
                  } else {
                      # Sort versions and get the latest
                      $version = $matchingVersions | Sort-Object { [System.Version]$_ } | Select-Object -Last 1
                      Write-Host "Found latest QFE version: $version"
                  }
              } catch {
                  Write-Warning "Failed to query NuGet for latest QFE version: ${_}"
                  exit 1
              }
          } else {
              $version = $inputVersion
              Write-Host "Using specified version: $version"
          }
          
          $packages = "C:\packages"
        
          Write-Host "Trying nuget install for version $version..."    
          try {
              Write-Host "Installing Microsoft.Windows.SDK.CPP version $version..."
              nuget install Microsoft.Windows.SDK.CPP -Version $version -OutputDirectory $packages
              if ($LASTEXITCODE -ne 0) { throw "Microsoft.Windows.SDK.CPP" }
              
              Write-Host "Installing Microsoft.Windows.WDK.x64 version $version..."
              nuget install Microsoft.Windows.WDK.x64 -Version $version -OutputDirectory $packages
              if ($LASTEXITCODE -ne 0) { throw "Microsoft.Windows.WDK.x64" }

              Write-Host "Installing Microsoft.Windows.WDK.arm64 version $version..."
              nuget install Microsoft.Windows.WDK.arm64 -Version $version -OutputDirectory $packages
              if ($LASTEXITCODE -ne 0) { throw "Microsoft.Windows.WDK.arm64" }

              Write-Host "Successfully installed all WDK packages for version $version"
          } catch {
              Write-Error "Failed to install $_ version $version"
              exit 1
          }
          if (-not (Test-Path $packages)) {
            Write-Error "$packages path could not be found. Please check the WDK version and source."
            exit 1
          }

          Write-Host "Setting WDKContentRoot environment variable..."
          Write-Output "WDKContentRoot=$packages\Microsoft.Windows.WDK.$targetArch.$version\c\" >> $env:GITHUB_ENV

          Write-Host "Setting Version_Number environment variable..."
          Write-Output "Version_Number=$sdkVersion.0" >> $env:GITHUB_ENV

          Write-Host "Setting WDKBinRoot environment variable..."
          Write-Output "WDKBinRoot=$packages\Microsoft.Windows.WDK.$hostArch.$version\c\bin" >> $env:GITHUB_ENV

          Write-Host "Setting WDKToolRoot environment variable..."
          Write-Output "WDKToolRoot=$packages\Microsoft.Windows.WDK.$hostArch.$version\c\tools" >> $env:GITHUB_ENV

          Write-Host "Setting WindowsSdkBinPath environment variable..."
          Write-Output "WindowsSdkBinPath=$packages\Microsoft.Windows.SDK.CPP.$version\c\bin" >> $env:GITHUB_ENV
        } else {

        Write-Host "Using Winget to install WDK version $inputVersion..."
        
        # Import the WinGet PowerShell module
        Write-Host "Importing WinGet PowerShell module..."
        Import-Module Microsoft.WinGet.Client -Force
        
        # Detect and uninstall any existing Windows SDK packages to avoid conflicts
        Write-Host "Detecting and removing existing Windows SDK packages..."
        try {
          $existingSDKs = Get-WinGetPackage | Where-Object { $_.Name -like "*Windows Software Development Kit*" -or $_.Name -like "*Windows SDK*" -or $_.Id -like "Microsoft.WindowsSDK*" }
          if ($existingSDKs.Count -gt 0) {
            Write-Host "Detected $($existingSDKs.Count) existing Windows SDK packages:"
            foreach ($sdk in $existingSDKs) {
              Write-Host "  - Name: $($sdk.Name), ID: $($sdk.Id), Version: $($sdk.InstalledVersion)"
            }
          } else {
            Write-Host "No existing Windows SDK packages found."
          }
        } catch {
          Write-Error "Failed to query for existing Windows SDK packages: ${_}"
          Write-Host "Try manually running: Get-WinGetPackage | Where-Object { `$_.Name -like '*Windows SDK*' -or `$_.Id -like 'Microsoft.WindowsSDK*' }"
          exit 1
        }
        foreach ($sdk in $existingSDKs) {
          Write-Host "Uninstalling existing Windows SDK: Name=$($sdk.Name), ID=$($sdk.Id), Version=$($sdk.InstalledVersion)"
          try {
            $uninstallResult = Uninstall-WinGetPackage $sdk.Id -Mode Silent -Force
            Write-Host "Uninstall output: $uninstallResult"
            Write-Host "Successfully uninstalled Windows SDK: $($sdk.Id)"
          } catch {
            Write-Error "Failed to uninstall Windows SDK $($sdk.Id): ${_}"
            Write-Host "Try manually running: winget uninstall --id '$($sdk.Id)' --silent --force"
            exit 1
          }
        }
        
        # Sanity check: Verify no Windows SDK packages remain installed
        Write-Host "Verifying all Windows SDK packages have been removed..."
        try {
          $remainingSDKs = Get-WinGetPackage | Where-Object { $_.Name -like "*Windows Software Development Kit*" -or $_.Name -like "*Windows SDK*" -or $_.Id -like "Microsoft.WindowsSDK*" }
          if ($remainingSDKs.Count -gt 0) {
            Write-Error "Found $($remainingSDKs.Count) remaining Windows SDK packages after uninstall:"
            foreach ($sdk in $remainingSDKs) {
              Write-Host "  - Name: $($sdk.Name), ID: $($sdk.Id), Version: $($sdk.InstalledVersion)"
            }
            exit 1
          } else {
            Write-Host "Confirmed: No Windows SDK packages remain installed."
          }
        } catch {
          Write-Error "Failed to verify Windows SDK removal: ${_}"
          exit 1
        }
        
        # Detect and uninstall any existing WDK packages to avoid header conflicts
        Write-Host "Detecting and removing existing Windows Driver Kit packages..."
        try {
          $existingWDKs = Get-WinGetPackage | Where-Object { $_.Name -like "*Windows Driver Kit*" -or $_.Id -like "Microsoft.WindowsWDK*" }
          if ($existingWDKs.Count -gt 0) {
            Write-Host "Detected $($existingWDKs.Count) existing Windows Driver Kit packages:"
            foreach ($wdk in $existingWDKs) {
              Write-Host "  - Name: $($wdk.Name), ID: $($wdk.Id), Version: $($wdk.InstalledVersion)"
            }
          } else {
            Write-Host "No existing Windows Driver Kit packages found."
          }
        } catch {
          Write-Error "Failed to query for existing Windows Driver Kit packages: ${_}"
          Write-Host "Try manually running: Get-WinGetPackage | Where-Object { `$_.Name -like '*Windows Driver Kit*' -or `$_.Id -like 'Microsoft.WindowsWDK*' }"
          exit 1
        }
        foreach ($wdk in $existingWDKs) {
          Write-Host "Uninstalling existing Windows Driver Kit: Name=$($wdk.Name), ID=$($wdk.Id), Version=$($wdk.InstalledVersion)"
          try {
            $uninstallResult = Uninstall-WinGetPackage $wdk.Id -Mode Silent -Force
            Write-Host "Uninstall output: $uninstallResult"
            Write-Host "Successfully uninstalled Windows Driver Kit: $($wdk.Id)"
          } catch {
            Write-Error "Failed to uninstall Windows Driver Kit $($wdk.Id): ${_}"
            Write-Host "Try manually running: winget uninstall --id '$($wdk.Id)' --silent --force"
            exit 1
          }
        }
        
        # Sanity check: Verify no Windows Driver Kit packages remain installed
        Write-Host "Verifying all Windows Driver Kit packages have been removed..."
        try {
          $remainingWDKs = Get-WinGetPackage | Where-Object { $_.Name -like "*Windows Driver Kit*" -or $_.Id -like "Microsoft.WindowsWDK*" }
          if ($remainingWDKs.Count -gt 0) {
            Write-Error "Found $($remainingWDKs.Count) remaining Windows Driver Kit packages after uninstall:"
            foreach ($wdk in $remainingWDKs) {
              Write-Host "  - Name: $($wdk.Name), ID: $($wdk.Id), Version: $($wdk.InstalledVersion)"
            }
            exit 1
          } else {
            Write-Host "Confirmed: No Windows Driver Kit packages remain installed."
          }
        } catch {
          Write-Error "Failed to verify Windows Driver Kit removal: ${_}"
          exit 1
        }
        
        # Install the matching Windows SDK first
        $sdkPackageId = "Microsoft.WindowsSDK.$sdkVersion"
        Write-Host "Installing matching Windows SDK: $sdkPackageId..."
        try {
          # Add special override for SDK version 22621 due to known bug
          if ($sdkVersion -eq "10.0.22621") {
            Write-Host "Using special override parameters for Windows SDK version 22621 due to known bug..."
            $installResult = Install-WinGetPackage -Id $sdkPackageId -Source winget -MatchOption Equals -Mode Silent -Force -Override '/q /features +'
          } else {
            $installResult = Install-WinGetPackage -Id $sdkPackageId -Source winget -MatchOption Equals -Mode Silent -Force
          }
          Write-Host "Install output: $installResult"
          
          # Verify installation was successful
          $installedSDK = Get-WinGetPackage | Where-Object { $_.Id -eq $sdkPackageId }
          if ($installedSDK) {
            Write-Host "Successfully installed Windows SDK: $sdkPackageId (Version: $($installedSDK.InstalledVersion))"
          } else {
            throw "Windows SDK installation verification failed - package not found after installation"
          }
        } catch {
          Write-Error "Failed to install Windows SDK $sdkPackageId`: ${_}"
          Write-Host "Try manually running: winget install --id '$sdkPackageId' --source winget --silent --force"
          Write-Warning "Continuing without explicit Windows SDK installation - WDK may include required components"
        }
        
        # Install the specific WDK version
        $wdkPackageId = "Microsoft.WindowsWDK.$inputVersion"
        Write-Host "Installing Windows Driver Kit: $wdkPackageId..."
        try {
          $installResult = Install-WinGetPackage -Id $wdkPackageId -Source winget -MatchOption Equals -Mode Silent -Force
          Write-Host "Install output: $installResult"
          
          # Verify installation was successful
          $installedWDK = Get-WinGetPackage | Where-Object { $_.Id -eq $wdkPackageId }
          if ($installedWDK) {
            Write-Host "Successfully installed Windows Driver Kit: $wdkPackageId (Version: $($installedWDK.InstalledVersion))"
          } else {
            throw "Windows Driver Kit installation verification failed - package not found after installation"
          }
        } catch {
          Write-Error "Failed to install Windows Driver Kit $wdkPackageId : ${_}"
          Write-Host "Try manually running: winget install --id '$wdkPackageId' --source winget --silent --force"
          exit 1
        }

        Write-Host "Setting Version_Number environment variable to $sdkVersion..."
        Write-Output "Version_Number=$sdkVersion.0" >> $env:GITHUB_ENV
        }
