name: Install WDK

inputs:
  version:
    description: WDK version to install.
    required: true
  source:
    description: Source to install WDK from (nuget or winget).
    required: true
  # required to set WDKBinRoot and WDKToolRoot based on the host architecture when using nuget
  host:
    description: Host architecture (x64 or ARM64).
    required: true
  # required to set WDKContentRoot based on the target architecture when using nuget
  target:
    description: Target architecture (x64 or ARM64).
    required: true

runs:
  using: "composite"
  steps:
    - name: Install WDK
      shell: pwsh
      run: |
        $host = '${{ inputs.host-arch }}'
        $target = '${{ inputs.target-arch }}'
        $version = '${{ inputs.version }}'
        if ($version -notmatch '^10\.0\.\d{5}(\.\d{1,4})?$') {
          Write-Error "Invalid version format: $version. Expected format: 10.0.[5 digit number].[0-4 digit number]"
          exit 1
        }
        $sdk_version = ($version.Split('.')[0..2]) -join '.'
        
        $source = '${{ inputs.source }}'
        if ($source -ne 'nuget' -and $source -ne 'winget') {
          Write-Error "Invalid source: $source. Supported sources are 'nuget' and 'winget'."
          exit 1
        }

        if ($source -eq 'nuget') {
          $packages = "C:\packages"
          Write-Host "Trying nuget restore..."
          nuget restore .\packages.config -PackagesDirectory $packages
          Write-Host "WDK installed to $packages"
          if (-not (Test-Path $packages)) {
            Write-Error "Failed to install dependencies to $packages. Please check the WDK version and source."
            exit 1
          }
          Write-Host "Setting WDKContentRoot environment variable..."
          Write-Output "WDKContentRoot=$packages\Microsoft.Windows.WDK.$target.$version\c\" >> $env:GITHUB_ENV

          Write-Host "Setting Version_Number environment variable..."
          Write-Output "Version_Number=$sdk_version.0" >> $env:GITHUB_ENV

          Write-Host "Setting WDKBinRoot environment variable..."
          Write-Output "WDKBinRoot=$packages\Microsoft.Windows.WDK.$host.$version\c\bin" >> $env:GITHUB_ENV

          Write-Host "Setting WDKToolRoot environment variable..."
          Write-Output "WDKToolRoot=$packages\Microsoft.Windows.WDK.$host.$version\c\tools" >> $env:GITHUB_ENV

          Write-Host "Setting WindowsSdkBinPath environment variable..."
          Write-Output "WindowsSdkBinPath=$packages\Microsoft.Windows.SDK.CPP.$version\c\bin" >> $env:GITHUB_ENV
        } else {
          Write-Host "Using Winget to install WDK version $version..."
          $wdk = "Microsoft.WindowsWDK.$version"
          if ((Get-WinGetPackage -Id $wdk -Source winget -MatchOption Equals).Id -eq '$wdk') {
            Write-Host "$wdk is already installed. Attempting to update..."
            Update-WinGetPackage -Id $wdk -Source winget -MatchOption Equals -Mode Silent -Force
          } else {
            Write-Host "Installing $wdk..."
            Install-WinGetPackage -Id $wdk -Source winget -MatchOption Equals -Mode Silent -Force
          }
          Write-Host "Setting Version_Number environment variable to $sdk_version..."
          Write-Output "Version_Number=$sdk_version.0" >> $env:GITHUB_ENV
        }
