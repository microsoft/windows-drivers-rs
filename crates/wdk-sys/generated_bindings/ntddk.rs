/* automatically generated by rust-bindgen 0.69.4 */

extern "C" {
    pub fn __va_start(arg1: *mut *mut ::core::ffi::c_char, ...);
}
extern "C" {
    pub fn _guard_check_icall(Target: usize);
}
extern "C" {
    pub fn _guard_icall_checks_enforced() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _guard_rf_checks_enforced() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __C_specific_handler(
        ExceptionRecord: *mut _EXCEPTION_RECORD,
        EstablisherFrame: *mut ::core::ffi::c_void,
        ContextRecord: *mut _CONTEXT,
        DispatcherContext: *mut _DISPATCHER_CONTEXT,
    ) -> EXCEPTION_DISPOSITION;
}
extern "C" {
    pub fn _exception_code() -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn _exception_info() -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn _abnormal_termination() -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isctype(
        _C: ::core::ffi::c_int,
        _Type: ::core::ffi::c_int,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isctype_l(
        _C: ::core::ffi::c_int,
        _Type: ::core::ffi::c_int,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isalpha(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isalpha_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isupper(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isupper_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn islower(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _islower_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isdigit(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isdigit_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isxdigit(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isxdigit_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isspace(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isspace_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn ispunct(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _ispunct_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isalnum(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isalnum_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isprint(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isprint_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isgraph(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isgraph_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iscntrl(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iscntrl_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn toupper(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn tolower(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _tolower(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _tolower_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _toupper(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _toupper_l(_C: ::core::ffi::c_int, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __isascii(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __toascii(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __iscsymf(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __iscsym(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswalpha(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswalpha_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswupper(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswupper_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswlower(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswlower_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswdigit(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswdigit_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswxdigit(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswxdigit_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswspace(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswspace_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswpunct(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswpunct_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswalnum(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswalnum_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswprint(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswprint_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswgraph(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswgraph_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswcntrl(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswcntrl_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn iswascii(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn isleadbyte(_C: ::core::ffi::c_int) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _isleadbyte_l(
        _C: ::core::ffi::c_int,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn towupper(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn _towupper_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn towlower(_C: wint_t) -> wint_t;
}
extern "C" {
    pub fn _towlower_l(_C: wint_t, _Locale: _locale_t) -> wint_t;
}
extern "C" {
    pub fn iswctype(_C: wint_t, _Type: wctype_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswctype_l(
        _C: wint_t,
        _Type: wctype_t,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __iswcsymf(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswcsymf_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn __iswcsym(_C: wint_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _iswcsym_l(_C: wint_t, _Locale: _locale_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn is_wctype(_C: wint_t, _Type: wctype_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _rotl8(
        Value: ::core::ffi::c_uchar,
        Shift: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _rotl16(
        Value: ::core::ffi::c_ushort,
        Shift: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_ushort;
}
extern "C" {
    pub fn _rotr8(
        Value: ::core::ffi::c_uchar,
        Shift: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _rotr16(
        Value: ::core::ffi::c_ushort,
        Shift: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_ushort;
}
extern "C" {
    pub fn _rotl(
        Value: ::core::ffi::c_uint,
        Shift: ::core::ffi::c_int,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn _rotl64(
        Value: ::core::ffi::c_ulonglong,
        Shift: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn _rotr(
        Value: ::core::ffi::c_uint,
        Shift: ::core::ffi::c_int,
    ) -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn _rotr64(
        Value: ::core::ffi::c_ulonglong,
        Shift: ::core::ffi::c_int,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn _memccpy(
        _Dst: *mut ::core::ffi::c_void,
        _Src: *const ::core::ffi::c_void,
        _Val: ::core::ffi::c_int,
        _MaxCount: usize,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memchr(
        _Buf: *const ::core::ffi::c_void,
        _Val: ::core::ffi::c_int,
        _MaxCount: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn _memicmp(
        _Buf1: *const ::core::ffi::c_void,
        _Buf2: *const ::core::ffi::c_void,
        _Size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _memicmp_l(
        _Buf1: *const ::core::ffi::c_void,
        _Buf2: *const ::core::ffi::c_void,
        _Size: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memcmp(
        _Buf1: *const ::core::ffi::c_void,
        _Buf2: *const ::core::ffi::c_void,
        _Size: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn memcpy(
        _Dst: *mut ::core::ffi::c_void,
        _Src: *const ::core::ffi::c_void,
        _MaxCount: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memcpy_s(
        _Dst: *mut ::core::ffi::c_void,
        _DstSize: rsize_t,
        _Src: *const ::core::ffi::c_void,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memset(
        _Dst: *mut ::core::ffi::c_void,
        _Val: ::core::ffi::c_int,
        _Size: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memccpy(
        _Dst: *mut ::core::ffi::c_void,
        _Src: *const ::core::ffi::c_void,
        _Val: ::core::ffi::c_int,
        _Size: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn memicmp(
        _Buf1: *const ::core::ffi::c_void,
        _Buf2: *const ::core::ffi::c_void,
        _Size: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strset_s(
        _Dst: *mut ::core::ffi::c_char,
        _DstSize: usize,
        _Value: ::core::ffi::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strset(
        _Dest: *mut ::core::ffi::c_char,
        _Value: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcpy_s(
        _Dst: *mut ::core::ffi::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const ::core::ffi::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcpy(
        _Dest: *mut ::core::ffi::c_char,
        _Source: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcat_s(
        _Dst: *mut ::core::ffi::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const ::core::ffi::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strcat(
        _Dest: *mut ::core::ffi::c_char,
        _Source: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcmp(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strlen(_Str: *const ::core::ffi::c_char) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn strnlen(_Str: *const ::core::ffi::c_char, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn memmove_s(
        _Dst: *mut ::core::ffi::c_void,
        _DstSize: rsize_t,
        _Src: *const ::core::ffi::c_void,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn memmove(
        _Dst: *mut ::core::ffi::c_void,
        _Src: *const ::core::ffi::c_void,
        _Size: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn _strdup(_Src: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strchr(
        _Str: *const ::core::ffi::c_char,
        _Val: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _stricmp(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strcmpi(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _stricmp_l(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcoll(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strcoll_l(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _stricoll(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _stricoll_l(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strncoll(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strncoll_l(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strnicoll(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strnicoll_l(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strcspn(
        _Str: *const ::core::ffi::c_char,
        _Control: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn _strerror(_ErrMsg: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strerror_s(
        _Buf: *mut ::core::ffi::c_char,
        _SizeInBytes: usize,
        _ErrMsg: *const ::core::ffi::c_char,
    ) -> errno_t;
}
extern "C" {
    pub fn strerror(arg1: ::core::ffi::c_int) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strerror_s(
        _Buf: *mut ::core::ffi::c_char,
        _SizeInBytes: usize,
        _ErrNum: ::core::ffi::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_s(_Str: *mut ::core::ffi::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strlwr(_String: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strlwr_s_l(
        _Str: *mut ::core::ffi::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strlwr_l(
        _String: *mut ::core::ffi::c_char,
        _Locale: _locale_t,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncat_s(
        _Dst: *mut ::core::ffi::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const ::core::ffi::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncat(
        _Dest: *mut ::core::ffi::c_char,
        _Source: *const ::core::ffi::c_char,
        _Count: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strncmp(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strnicmp(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _strnicmp_l(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strncpy_s(
        _Dst: *mut ::core::ffi::c_char,
        _SizeInBytes: rsize_t,
        _Src: *const ::core::ffi::c_char,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn strncpy(
        _Dest: *mut ::core::ffi::c_char,
        _Source: *const ::core::ffi::c_char,
        _Count: ::core::ffi::c_ulonglong,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strnset_s(
        _Str: *mut ::core::ffi::c_char,
        _SizeInBytes: usize,
        _Val: ::core::ffi::c_int,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _strnset(
        _Dest: *mut ::core::ffi::c_char,
        _Val: ::core::ffi::c_int,
        _Count: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strpbrk(
        _Str: *const ::core::ffi::c_char,
        _Control: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrchr(
        _Str: *const ::core::ffi::c_char,
        _Ch: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strrev(_Str: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strspn(
        _Str: *const ::core::ffi::c_char,
        _Control: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn strstr(
        _Str: *const ::core::ffi::c_char,
        _SubStr: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok(
        _Str: *mut ::core::ffi::c_char,
        _Delim: *const ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strtok_s(
        _Str: *mut ::core::ffi::c_char,
        _Delim: *const ::core::ffi::c_char,
        _Context: *mut *mut ::core::ffi::c_char,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strupr_s(_Str: *mut ::core::ffi::c_char, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _strupr(_String: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _strupr_s_l(
        _Str: *mut ::core::ffi::c_char,
        _Size: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _strupr_l(
        _String: *mut ::core::ffi::c_char,
        _Locale: _locale_t,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strxfrm(
        _Dst: *mut ::core::ffi::c_char,
        _Src: *const ::core::ffi::c_char,
        _MaxCount: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn _strxfrm_l(
        _Dst: *mut ::core::ffi::c_char,
        _Src: *const ::core::ffi::c_char,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn strdup(_Src: *const ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strcmpi(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn stricmp(
        _Str1: *const ::core::ffi::c_char,
        _Str2: *const ::core::ffi::c_char,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strlwr(_Str: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strnicmp(
        _Str1: *const ::core::ffi::c_char,
        _Str: *const ::core::ffi::c_char,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn strnset(
        _Str: *mut ::core::ffi::c_char,
        _Val: ::core::ffi::c_int,
        _MaxCount: usize,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strrev(_Str: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strset(
        _Str: *mut ::core::ffi::c_char,
        _Val: ::core::ffi::c_int,
    ) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn strupr(_Str: *mut ::core::ffi::c_char) -> *mut ::core::ffi::c_char;
}
extern "C" {
    pub fn _wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscat_s(
        _Dst: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Src: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscat(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcschr(
        _Str: *const ::core::ffi::c_ushort,
        _Ch: ::core::ffi::c_ushort,
    ) -> *mut ::core::ffi::c_ushort;
}
extern "C" {
    pub fn wcscmp(
        _Str1: *const ::core::ffi::c_ushort,
        _Str2: *const ::core::ffi::c_ushort,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcscpy_s(
        _Dst: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Src: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcscpy(_Dest: *mut wchar_t, _Source: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcscspn(_Str: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcslen(_Str: *const ::core::ffi::c_ushort) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn wcsnlen(_Src: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn wcsncat_s(
        _Dst: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Src: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncat(
        _Dest: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsncmp(
        _Str1: *const ::core::ffi::c_ushort,
        _Str2: *const ::core::ffi::c_ushort,
        _MaxCount: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcsncpy_s(
        _Dst: *mut wchar_t,
        _SizeInWords: rsize_t,
        _Src: *const wchar_t,
        _MaxCount: rsize_t,
    ) -> errno_t;
}
extern "C" {
    pub fn wcsncpy(
        _Dest: *mut wchar_t,
        _Source: *const wchar_t,
        _Count: usize,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn wcspbrk(_Str: *const wchar_t, _Control: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrchr(_Str: *const wchar_t, _Ch: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsspn(_Str: *const wchar_t, _Control: *const wchar_t) -> usize;
}
extern "C" {
    pub fn wcsstr(_Str: *const wchar_t, _SubStr: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok(_Str: *mut wchar_t, _Delim: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcstok_s(
        _Str: *mut wchar_t,
        _Delim: *const wchar_t,
        _Context: *mut *mut wchar_t,
    ) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror(_ErrNum: ::core::ffi::c_int) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcserror_s(
        _Buf: *mut wchar_t,
        _SizeInWords: usize,
        _ErrNum: ::core::ffi::c_int,
    ) -> errno_t;
}
extern "C" {
    pub fn __wcserror(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn __wcserror_s(
        _Buffer: *mut wchar_t,
        _SizeInWords: usize,
        _ErrMsg: *const wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsicmp_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsnicmp(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsnicmp_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsnset_s(
        _Dst: *mut wchar_t,
        _SizeInWords: usize,
        _Val: wchar_t,
        _MaxCount: usize,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsset_s(
        _Dst: *mut wchar_t,
        _SizeInWords: usize,
        _Value: wchar_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s(_Str: *mut wchar_t, _SizeInWords: usize) -> errno_t;
}
extern "C" {
    pub fn _wcslwr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcslwr_s_l(
        _Str: *mut wchar_t,
        _SizeInWords: usize,
        _Locale: _locale_t,
    ) -> errno_t;
}
extern "C" {
    pub fn _wcslwr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s(_Str: *mut wchar_t, _Size: usize) -> errno_t;
}
extern "C" {
    pub fn _wcsupr(_String: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn _wcsupr_s_l(_Str: *mut wchar_t, _Size: usize, _Locale: _locale_t) -> errno_t;
}
extern "C" {
    pub fn _wcsupr_l(_String: *mut wchar_t, _Locale: _locale_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsxfrm(_Dst: *mut wchar_t, _Src: *const wchar_t, _MaxCount: usize) -> usize;
}
extern "C" {
    pub fn _wcsxfrm_l(
        _Dst: *mut wchar_t,
        _Src: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> usize;
}
extern "C" {
    pub fn wcscoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcscoll_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsicoll_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsncoll(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsncoll_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsnicoll(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _wcsnicoll_l(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
        _Locale: _locale_t,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcsdup(_Str: *const wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicmp(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcsnicmp(
        _Str1: *const wchar_t,
        _Str2: *const wchar_t,
        _MaxCount: usize,
    ) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn wcsnset(_Str: *mut wchar_t, _Val: wchar_t, _MaxCount: usize) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsrev(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsset(_Str: *mut wchar_t, _Val: wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcslwr(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsupr(_Str: *mut wchar_t) -> *mut wchar_t;
}
extern "C" {
    pub fn wcsicoll(_Str1: *const wchar_t, _Str2: *const wchar_t) -> ::core::ffi::c_int;
}
extern "C" {
    pub fn _RTL_CONSTANT_STRING_type_check(
        s: *const ::core::ffi::c_void,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    pub fn __readgsqword(Offset: ::core::ffi::c_ulong) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn _bittest(
        Base: *const ::core::ffi::c_long,
        Offset: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittestandcomplement(
        Base: *mut ::core::ffi::c_long,
        Offset: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittestandset(
        Base: *mut ::core::ffi::c_long,
        Offset: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittestandreset(
        Base: *mut ::core::ffi::c_long,
        Offset: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset(
        Base: *mut ::core::ffi::c_long,
        Offset: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset(
        Base: *mut ::core::ffi::c_long,
        Offset: ::core::ffi::c_long,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittest64(
        Base: *const ::core::ffi::c_longlong,
        Offset: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittestandcomplement64(
        Base: *mut ::core::ffi::c_longlong,
        Offset: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittestandset64(
        Base: *mut ::core::ffi::c_longlong,
        Offset: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _bittestandreset64(
        Base: *mut ::core::ffi::c_longlong,
        Offset: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandset64(
        Base: *mut ::core::ffi::c_longlong,
        Offset: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _interlockedbittestandreset64(
        Base: *mut ::core::ffi::c_longlong,
        Offset: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _BitScanForward(
        Index: *mut ::core::ffi::c_ulong,
        Mask: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _BitScanReverse(
        Index: *mut ::core::ffi::c_ulong,
        Mask: ::core::ffi::c_ulong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _BitScanForward64(
        Index: *mut ::core::ffi::c_ulong,
        Mask: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _BitScanReverse64(
        Index: *mut ::core::ffi::c_ulong,
        Mask: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _InterlockedIncrement16(
        Addend: *mut ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn _InterlockedDecrement16(
        Addend: *mut ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn _InterlockedCompareExchange16(
        Destination: *mut ::core::ffi::c_short,
        ExChange: ::core::ffi::c_short,
        Comperand: ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn _InterlockedAnd(
        Destination: *mut ::core::ffi::c_long,
        Value: ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedOr(
        Destination: *mut ::core::ffi::c_long,
        Value: ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedXor(
        Destination: *mut ::core::ffi::c_long,
        Value: ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedAnd64(
        Destination: *mut ::core::ffi::c_longlong,
        Value: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedOr64(
        Destination: *mut ::core::ffi::c_longlong,
        Value: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedXor64(
        Destination: *mut ::core::ffi::c_longlong,
        Value: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedIncrement(
        Addend: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedDecrement(
        Addend: *mut ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedExchange(
        Target: *mut ::core::ffi::c_long,
        Value: ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedExchangeAdd(
        Addend: *mut ::core::ffi::c_long,
        Value: ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedCompareExchange(
        Destination: *mut ::core::ffi::c_long,
        ExChange: ::core::ffi::c_long,
        Comperand: ::core::ffi::c_long,
    ) -> ::core::ffi::c_long;
}
extern "C" {
    pub fn _InterlockedIncrement64(
        Addend: *mut ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedDecrement64(
        Addend: *mut ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchange64(
        Target: *mut ::core::ffi::c_longlong,
        Value: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedExchangeAdd64(
        Addend: *mut ::core::ffi::c_longlong,
        Value: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchange64(
        Destination: *mut ::core::ffi::c_longlong,
        ExChange: ::core::ffi::c_longlong,
        Comperand: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn _InterlockedCompareExchange128(
        Destination: *mut ::core::ffi::c_longlong,
        ExchangeHigh: ::core::ffi::c_longlong,
        ExchangeLow: ::core::ffi::c_longlong,
        ComparandResult: *mut ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn _InterlockedCompareExchangePointer(
        Destination: *mut *mut ::core::ffi::c_void,
        Exchange: *mut ::core::ffi::c_void,
        Comperand: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn _InterlockedExchangePointer(
        Target: *mut *mut ::core::ffi::c_void,
        Value: *mut ::core::ffi::c_void,
    ) -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn _InterlockedExchange8(
        Target: *mut ::core::ffi::c_char,
        Value: ::core::ffi::c_char,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    pub fn _InterlockedExchange16(
        Destination: *mut ::core::ffi::c_short,
        ExChange: ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn _InterlockedExchangeAdd8(
        _Addend: *mut ::core::ffi::c_char,
        _Value: ::core::ffi::c_char,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    pub fn _InterlockedAnd8(
        Destination: *mut ::core::ffi::c_char,
        Value: ::core::ffi::c_char,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    pub fn _InterlockedOr8(
        Destination: *mut ::core::ffi::c_char,
        Value: ::core::ffi::c_char,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    pub fn _InterlockedXor8(
        Destination: *mut ::core::ffi::c_char,
        Value: ::core::ffi::c_char,
    ) -> ::core::ffi::c_char;
}
extern "C" {
    pub fn _InterlockedAnd16(
        Destination: *mut ::core::ffi::c_short,
        Value: ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn _InterlockedOr16(
        Destination: *mut ::core::ffi::c_short,
        Value: ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn _InterlockedXor16(
        Destination: *mut ::core::ffi::c_short,
        Value: ::core::ffi::c_short,
    ) -> ::core::ffi::c_short;
}
extern "C" {
    pub fn __cpuidex(
        CPUInfo: *mut ::core::ffi::c_int,
        Function: ::core::ffi::c_int,
        SubLeaf: ::core::ffi::c_int,
    );
}
extern "C" {
    pub fn _mm_clflush(Address: *const ::core::ffi::c_void);
}
extern "C" {
    pub fn _ReadWriteBarrier();
}
extern "C" {
    pub fn __faststorefence();
}
extern "C" {
    pub fn _mm_lfence();
}
extern "C" {
    pub fn _mm_mfence();
}
extern "C" {
    pub fn _mm_sfence();
}
extern "C" {
    pub fn _mm_pause();
}
extern "C" {
    pub fn _mm_prefetch(a: *const ::core::ffi::c_char, sel: ::core::ffi::c_int);
}
extern "C" {
    pub fn _m_prefetchw(Source: *const ::core::ffi::c_void);
}
extern "C" {
    pub fn _mm_getcsr() -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn _mm_setcsr(MxCsr: ::core::ffi::c_uint);
}
extern "C" {
    pub fn __getcallerseflags() -> ::core::ffi::c_uint;
}
extern "C" {
    pub fn __segmentlimit(Selector: ULONG) -> ULONG;
}
extern "C" {
    pub fn __readpmc(Counter: ULONG) -> ULONG64;
}
extern "C" {
    pub fn __rdtsc() -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __movsb(Destination: PUCHAR, Source: *const UCHAR, Count: SIZE_T);
}
extern "C" {
    pub fn __movsw(Destination: PUSHORT, Source: *const USHORT, Count: SIZE_T);
}
extern "C" {
    pub fn __movsd(Destination: PULONG, Source: *const ULONG, Count: SIZE_T);
}
extern "C" {
    pub fn __movsq(Destination: PULONG64, Source: *const ULONG64, Count: SIZE_T);
}
extern "C" {
    pub fn __stosb(
        Destination: *mut ::core::ffi::c_uchar,
        Value: ::core::ffi::c_uchar,
        Count: ::core::ffi::c_ulonglong,
    );
}
extern "C" {
    pub fn __stosw(Destination: PUSHORT, Value: USHORT, Count: SIZE_T);
}
extern "C" {
    pub fn __stosd(Destination: PULONG, Value: ULONG, Count: SIZE_T);
}
extern "C" {
    pub fn __stosq(Destination: PULONG64, Value: ULONG64, Count: SIZE_T);
}
extern "C" {
    pub fn __mulh(
        Multiplier: ::core::ffi::c_longlong,
        Multiplicand: ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn __umulh(
        Multiplier: ::core::ffi::c_ulonglong,
        Multiplicand: ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __popcnt64(operand: ::core::ffi::c_ulonglong) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __shiftleft128(
        LowPart: ::core::ffi::c_ulonglong,
        HighPart: ::core::ffi::c_ulonglong,
        Shift: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __shiftright128(
        LowPart: ::core::ffi::c_ulonglong,
        HighPart: ::core::ffi::c_ulonglong,
        Shift: ::core::ffi::c_uchar,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn _mul128(
        Multiplier: ::core::ffi::c_longlong,
        Multiplicand: ::core::ffi::c_longlong,
        HighProduct: *mut ::core::ffi::c_longlong,
    ) -> ::core::ffi::c_longlong;
}
extern "C" {
    pub fn UnsignedMultiply128(
        Multiplier: ULONG64,
        Multiplicand: ULONG64,
        HighProduct: *mut ULONG64,
    ) -> ULONG64;
}
extern "C" {
    pub fn _umul128(
        Multiplier: ::core::ffi::c_ulonglong,
        Multiplicand: ::core::ffi::c_ulonglong,
        HighProduct: *mut ::core::ffi::c_ulonglong,
    ) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn __readgsbyte(Offset: ::core::ffi::c_ulong) -> ::core::ffi::c_uchar;
}
extern "C" {
    pub fn __readgsword(Offset: ::core::ffi::c_ulong) -> ::core::ffi::c_ushort;
}
extern "C" {
    pub fn __readgsdword(Offset: ::core::ffi::c_ulong) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn __writegsbyte(Offset: ULONG, Data: UCHAR);
}
extern "C" {
    pub fn __writegsword(Offset: ULONG, Data: USHORT);
}
extern "C" {
    pub fn __writegsdword(Offset: ULONG, Data: ULONG);
}
extern "C" {
    pub fn __writegsqword(Offset: ULONG, Data: ULONG64);
}
extern "C" {
    pub fn __incgsbyte(Offset: ULONG);
}
extern "C" {
    pub fn __addgsbyte(Offset: ULONG, Value: UCHAR);
}
extern "C" {
    pub fn __incgsword(Offset: ULONG);
}
extern "C" {
    pub fn __addgsword(Offset: ULONG, Value: USHORT);
}
extern "C" {
    pub fn __incgsdword(Offset: ULONG);
}
extern "C" {
    pub fn __addgsdword(Offset: ULONG, Value: ULONG);
}
extern "C" {
    pub fn __incgsqword(Offset: ULONG);
}
extern "C" {
    pub fn __addgsqword(Offset: ULONG, Value: ULONG64);
}
extern "C" {
    pub fn __int2c() -> !;
}
extern "C" {
    #[must_use]
    pub fn NtManagePartition(
        TargetHandle: HANDLE,
        SourceHandle: HANDLE,
        PartitionInformationClass: PARTITION_INFORMATION_CLASS,
        PartitionInformation: PVOID,
        PartitionInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPowerInformation(
        InformationLevel: POWER_INFORMATION_LEVEL::Type,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlAssert(
        VoidFailedAssertion: PVOID,
        VoidFileName: PVOID,
        LineNumber: ULONG,
        MutableMessage: PSTR,
    );
}
extern "C" {
    pub fn __fastfail(Code: ::core::ffi::c_uint) -> !;
}
extern "C" {
    #[must_use]
    pub fn RtlIntegerToUnicodeString(
        Value: ULONG,
        Base: ULONG,
        String: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInt64ToUnicodeString(
        Value: ULONGLONG,
        Base: ULONG,
        String: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeStringToInteger(
        String: PCUNICODE_STRING,
        Base: ULONG,
        Value: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeStringToInt64(
        String: PCUNICODE_STRING,
        Base: ULONG,
        Number: PLONG64,
        EndPointer: *mut PWSTR,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlInitString(DestinationString: PSTRING, SourceString: PCSZ);
}
extern "C" {
    pub fn RtlInitAnsiString(DestinationString: PANSI_STRING, SourceString: PCSZ);
}
extern "C" {
    pub fn RtlInitUTF8String(DestinationString: PUTF8_STRING, SourceString: PCSZ);
}
extern "C" {
    pub fn RtlInitUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCWSTR,
    );
}
extern "C" {
    #[must_use]
    pub fn RtlQueryRegistryValues(
        RelativeTo: ULONG,
        Path: PCWSTR,
        QueryTable: PRTL_QUERY_REGISTRY_TABLE,
        Context: PVOID,
        Environment: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmGetSystemRoutineAddress(SystemRoutineName: PUNICODE_STRING) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn RtlWriteRegistryValue(
        RelativeTo: ULONG,
        Path: PCWSTR,
        ValueName: PCWSTR,
        ValueType: ULONG,
        ValueData: PVOID,
        ValueLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDeleteRegistryValue(
        RelativeTo: ULONG,
        Path: PCWSTR,
        ValueName: PCWSTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCreateRegistryKey(RelativeTo: ULONG, Path: PWSTR) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCheckRegistryKey(RelativeTo: ULONG, Path: PWSTR) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInitAnsiStringEx(
        DestinationString: PANSI_STRING,
        SourceString: PCSZ,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInitStringEx(DestinationString: PSTRING, SourceString: PCSZ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInitUTF8StringEx(
        DestinationString: PUTF8_STRING,
        SourceString: PCSZ,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAnsiStringToUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCANSI_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeStringToAnsiString(
        DestinationString: PANSI_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCompareUnicodeStrings(
        String1: PCWCH,
        String1Length: SIZE_T,
        String2: PCWCH,
        String2Length: SIZE_T,
        CaseInSensitive: BOOLEAN,
    ) -> LONG;
}
extern "C" {
    pub fn RtlCompareUnicodeString(
        String1: PCUNICODE_STRING,
        String2: PCUNICODE_STRING,
        CaseInSensitive: BOOLEAN,
    ) -> LONG;
}
extern "C" {
    pub fn RtlEqualUnicodeString(
        String1: PCUNICODE_STRING,
        String2: PCUNICODE_STRING,
        CaseInSensitive: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlHashUnicodeString(
        String: PCUNICODE_STRING,
        CaseInSensitive: BOOLEAN,
        HashAlgorithm: ULONG,
        HashValue: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCopyUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCUNICODE_STRING,
    );
}
extern "C" {
    #[must_use]
    pub fn RtlAppendUnicodeStringToString(
        Destination: PUNICODE_STRING,
        Source: PCUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAppendUnicodeToString(
        Destination: PUNICODE_STRING,
        Source: PCWSTR,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlUpcaseUnicodeChar(SourceCharacter: WCHAR) -> WCHAR;
}
extern "C" {
    pub fn RtlDowncaseUnicodeChar(SourceCharacter: WCHAR) -> WCHAR;
}
extern "C" {
    pub fn RtlFreeUnicodeString(UnicodeString: PUNICODE_STRING);
}
extern "C" {
    pub fn RtlFreeAnsiString(AnsiString: PANSI_STRING);
}
extern "C" {
    pub fn RtlFreeUTF8String(utf8String: PUTF8_STRING);
}
extern "C" {
    pub fn RtlxUnicodeStringToAnsiSize(UnicodeString: PCUNICODE_STRING) -> ULONG;
}
extern "C" {
    pub fn RtlxAnsiStringToUnicodeSize(AnsiString: PCANSI_STRING) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeToUTF8N(
        UTF8StringDestination: PCHAR,
        UTF8StringMaxByteCount: ULONG,
        UTF8StringActualByteCount: PULONG,
        UnicodeStringSource: PCWCH,
        UnicodeStringByteCount: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUTF8ToUnicodeN(
        UnicodeStringDestination: PWSTR,
        UnicodeStringMaxByteCount: ULONG,
        UnicodeStringActualByteCount: PULONG,
        UTF8StringSource: PCCH,
        UTF8StringByteCount: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeStringToUTF8String(
        DestinationString: PUTF8_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUTF8StringToUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PUTF8_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlStringFromGUID(Guid: *const GUID, GuidString: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGUIDFromString(GuidString: PCUNICODE_STRING, Guid: *mut GUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGenerateClass5Guid(
        NamespaceGuid: *const GUID,
        Buffer: PVOID,
        BufferSize: ULONG,
        Guid: *mut GUID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCopyMemoryNonTemporal(
        Destination: *mut ::core::ffi::c_void,
        Source: *const ::core::ffi::c_void,
        Length: SIZE_T,
    );
}
extern "C" {
    pub fn RtlFillMemoryNonTemporal(
        Destination: *mut ::core::ffi::c_void,
        Length: SIZE_T,
        Value: UCHAR,
    );
}
extern "C" {
    pub fn RtlPrefetchMemoryNonTemporal(Source: PVOID, Length: SIZE_T);
}
extern "C" {
    pub fn DbgBreakPointWithStatus(Status: ULONG);
}
extern "C" {
    pub fn DbgPrint(Format: PCSTR, ...) -> ULONG;
}
extern "C" {
    pub fn DbgPrintEx(ComponentId: ULONG, Level: ULONG, Format: PCSTR, ...) -> ULONG;
}
extern "C" {
    pub fn vDbgPrintEx(
        ComponentId: ULONG,
        Level: ULONG,
        Format: PCCH,
        arglist: va_list,
    ) -> ULONG;
}
extern "C" {
    pub fn vDbgPrintExWithPrefix(
        Prefix: PCCH,
        ComponentId: ULONG,
        Level: ULONG,
        Format: PCCH,
        arglist: va_list,
    ) -> ULONG;
}
extern "C" {
    pub fn DbgPrintReturnControlC(Format: PCCH, ...) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn DbgQueryDebugFilterState(ComponentId: ULONG, Level: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn DbgSetDebugFilterState(
        ComponentId: ULONG,
        Level: ULONG,
        State: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn DbgSetDebugPrintCallback(
        DebugPrintCallback: PDEBUG_PRINT_CALLBACK,
        Enable: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlTimeToTimeFields(Time: PLARGE_INTEGER, TimeFields: PTIME_FIELDS);
}
extern "C" {
    pub fn RtlTimeFieldsToTime(
        TimeFields: PTIME_FIELDS,
        Time: PLARGE_INTEGER,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlInitializeBitMap(
        BitMapHeader: PRTL_BITMAP,
        BitMapBuffer: PULONG,
        SizeOfBitMap: ULONG,
    );
}
extern "C" {
    pub fn RtlClearBit(BitMapHeader: PRTL_BITMAP, BitNumber: ULONG);
}
extern "C" {
    pub fn RtlSetBit(BitMapHeader: PRTL_BITMAP, BitNumber: ULONG);
}
extern "C" {
    pub fn RtlTestBit(BitMapHeader: PRTL_BITMAP, BitNumber: ULONG) -> BOOLEAN;
}
extern "C" {
    pub fn RtlClearAllBits(BitMapHeader: PRTL_BITMAP);
}
extern "C" {
    pub fn RtlSetAllBits(BitMapHeader: PRTL_BITMAP);
}
extern "C" {
    pub fn RtlFindClearBits(
        BitMapHeader: PRTL_BITMAP,
        NumberToFind: ULONG,
        HintIndex: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindSetBits(
        BitMapHeader: PRTL_BITMAP,
        NumberToFind: ULONG,
        HintIndex: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindClearBitsAndSet(
        BitMapHeader: PRTL_BITMAP,
        NumberToFind: ULONG,
        HintIndex: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindSetBitsAndClear(
        BitMapHeader: PRTL_BITMAP,
        NumberToFind: ULONG,
        HintIndex: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlClearBits(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: ULONG,
        NumberToClear: ULONG,
    );
}
extern "C" {
    pub fn RtlSetBits(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: ULONG,
        NumberToSet: ULONG,
    );
}
extern "C" {
    pub fn RtlFindClearRuns(
        BitMapHeader: PRTL_BITMAP,
        RunArray: PRTL_BITMAP_RUN,
        SizeOfRunArray: ULONG,
        LocateLongestRuns: BOOLEAN,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindLongestRunClear(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: PULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindFirstRunClear(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: PULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlNumberOfClearBitsInRange(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: ULONG,
        Length: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlNumberOfSetBitsInRange(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: ULONG,
        Length: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlNumberOfClearBits(BitMapHeader: PRTL_BITMAP) -> ULONG;
}
extern "C" {
    pub fn RtlNumberOfSetBits(BitMapHeader: PRTL_BITMAP) -> ULONG;
}
extern "C" {
    pub fn RtlAreBitsClear(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: ULONG,
        Length: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlAreBitsSet(
        BitMapHeader: PRTL_BITMAP,
        StartingIndex: ULONG,
        Length: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlFindNextForwardRunClear(
        BitMapHeader: PRTL_BITMAP,
        FromIndex: ULONG,
        StartingRunIndex: PULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindLastBackwardRunClear(
        BitMapHeader: PRTL_BITMAP,
        FromIndex: ULONG,
        StartingRunIndex: PULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlFindLeastSignificantBit(Set: ULONGLONG) -> CCHAR;
}
extern "C" {
    pub fn RtlFindMostSignificantBit(Set: ULONGLONG) -> CCHAR;
}
extern "C" {
    pub fn RtlNumberOfSetBitsUlongPtr(Target: ULONG_PTR) -> ULONG;
}
extern "C" {
    pub fn RtlCopyBitMap(
        Source: PRTL_BITMAP,
        Destination: PRTL_BITMAP,
        TargetBit: ULONG,
    );
}
extern "C" {
    pub fn RtlExtractBitMap(
        Source: PRTL_BITMAP,
        Destination: PRTL_BITMAP,
        TargetBit: ULONG,
        NumberOfBits: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn RtlCreateSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Revision: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlValidSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlLengthSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlValidRelativeSecurityDescriptor(
        SecurityDescriptorInput: PSECURITY_DESCRIPTOR,
        SecurityDescriptorLength: ULONG,
        RequiredInformation: SECURITY_INFORMATION,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlSetDaclSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        DaclPresent: BOOLEAN,
        Dacl: PACL,
        DaclDefaulted: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn _byteswap_ushort(arg1: ::core::ffi::c_ushort) -> ::core::ffi::c_ushort;
}
extern "C" {
    pub fn _byteswap_ulong(arg1: ::core::ffi::c_ulong) -> ::core::ffi::c_ulong;
}
extern "C" {
    pub fn _byteswap_uint64(arg1: ::core::ffi::c_ulonglong) -> ::core::ffi::c_ulonglong;
}
extern "C" {
    pub fn VerSetConditionMask(
        ConditionMask: ULONGLONG,
        TypeMask: ULONG,
        Condition: UCHAR,
    ) -> ULONGLONG;
}
extern "C" {
    #[must_use]
    pub fn RtlGetVersion(lpVersionInformation: PRTL_OSVERSIONINFOW) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlVerifyVersionInfo(
        VersionInfo: PRTL_OSVERSIONINFOEXW,
        TypeMask: ULONG,
        ConditionMask: ULONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIsNtDdiVersionAvailable(Version: ULONG) -> BOOLEAN;
}
extern "C" {
    pub fn RtlIsServicePackVersionInstalled(Version: ULONG) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlIoEncodeMemIoResource(
        Descriptor: PIO_RESOURCE_DESCRIPTOR,
        Type: UCHAR,
        Length: ULONGLONG,
        Alignment: ULONGLONG,
        MinimumAddress: ULONGLONG,
        MaximumAddress: ULONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCmEncodeMemIoResource(
        Descriptor: PCM_PARTIAL_RESOURCE_DESCRIPTOR,
        Type: UCHAR,
        Length: ULONGLONG,
        Start: ULONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIoDecodeMemIoResource(
        Descriptor: PIO_RESOURCE_DESCRIPTOR,
        Alignment: PULONGLONG,
        MinimumAddress: PULONGLONG,
        MaximumAddress: PULONGLONG,
    ) -> ULONGLONG;
}
extern "C" {
    pub fn RtlCmDecodeMemIoResource(
        Descriptor: PCM_PARTIAL_RESOURCE_DESCRIPTOR,
        Start: PULONGLONG,
    ) -> ULONGLONG;
}
extern "C" {
    #[must_use]
    pub fn RtlFindClosestEncodableLength(
        SourceLength: ULONGLONG,
        TargetLength: PULONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIsUntrustedObject(
        Handle: HANDLE,
        Object: PVOID,
        UntrustedObject: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlQueryValidationRunlevel(ComponentName: PCUNICODE_STRING) -> ULONG;
}
extern "C" {
    pub fn RtlCrc32(
        Buffer: *const ::core::ffi::c_void,
        Size: usize,
        InitialCrc: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn RtlCrc64(
        Buffer: *const ::core::ffi::c_void,
        Size: usize,
        InitialCrc: ULONGLONG,
    ) -> ULONGLONG;
}
extern "C" {
    pub fn RtlOsDeploymentState(Flags: ULONG) -> OS_DEPLOYEMENT_STATE_VALUES;
}
extern "C" {
    pub fn RtlCompareMemory(
        Source1: *const ::core::ffi::c_void,
        Source2: *const ::core::ffi::c_void,
        Length: SIZE_T,
    ) -> SIZE_T;
}
extern "C" {
    #[must_use]
    pub fn NtCreateTransactionManager(
        TmHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        LogFileName: PUNICODE_STRING,
        CreateOptions: ULONG,
        CommitStrength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenTransactionManager(
        TmHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        LogFileName: PUNICODE_STRING,
        TmIdentity: LPGUID,
        OpenOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRenameTransactionManager(
        LogFileName: PUNICODE_STRING,
        ExistingTransactionManagerGuid: LPGUID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRollforwardTransactionManager(
        TransactionManagerHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRecoverTransactionManager(TransactionManagerHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationTransactionManager(
        TransactionManagerHandle: HANDLE,
        TransactionManagerInformationClass: TRANSACTIONMANAGER_INFORMATION_CLASS,
        TransactionManagerInformation: PVOID,
        TransactionManagerInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationTransactionManager(
        TmHandle: HANDLE,
        TransactionManagerInformationClass: TRANSACTIONMANAGER_INFORMATION_CLASS,
        TransactionManagerInformation: PVOID,
        TransactionManagerInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtEnumerateTransactionObject(
        RootObjectHandle: HANDLE,
        QueryType: KTMOBJECT_TYPE,
        ObjectCursor: PKTMOBJECT_CURSOR,
        ObjectCursorLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCreateTransaction(
        TransactionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        Uow: LPGUID,
        TmHandle: HANDLE,
        CreateOptions: ULONG,
        IsolationLevel: ULONG,
        IsolationFlags: ULONG,
        Timeout: PLARGE_INTEGER,
        Description: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenTransaction(
        TransactionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        Uow: LPGUID,
        TmHandle: HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationTransaction(
        TransactionHandle: HANDLE,
        TransactionInformationClass: TRANSACTION_INFORMATION_CLASS,
        TransactionInformation: PVOID,
        TransactionInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationTransaction(
        TransactionHandle: HANDLE,
        TransactionInformationClass: TRANSACTION_INFORMATION_CLASS,
        TransactionInformation: PVOID,
        TransactionInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCommitTransaction(TransactionHandle: HANDLE, Wait: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRollbackTransaction(TransactionHandle: HANDLE, Wait: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCreateEnlistment(
        EnlistmentHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ResourceManagerHandle: HANDLE,
        TransactionHandle: HANDLE,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        CreateOptions: ULONG,
        NotificationMask: NOTIFICATION_MASK,
        EnlistmentKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenEnlistment(
        EnlistmentHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ResourceManagerHandle: HANDLE,
        EnlistmentGuid: LPGUID,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationEnlistment(
        EnlistmentHandle: HANDLE,
        EnlistmentInformationClass: ENLISTMENT_INFORMATION_CLASS,
        EnlistmentInformation: PVOID,
        EnlistmentInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationEnlistment(
        EnlistmentHandle: HANDLE,
        EnlistmentInformationClass: ENLISTMENT_INFORMATION_CLASS,
        EnlistmentInformation: PVOID,
        EnlistmentInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRecoverEnlistment(
        EnlistmentHandle: HANDLE,
        EnlistmentKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrePrepareEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrepareEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCommitEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRollbackEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrePrepareComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrepareComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCommitComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtReadOnlyEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRollbackComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSinglePhaseReject(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCreateResourceManager(
        ResourceManagerHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        TmHandle: HANDLE,
        RmGuid: LPGUID,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        CreateOptions: ULONG,
        Description: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenResourceManager(
        ResourceManagerHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        TmHandle: HANDLE,
        ResourceManagerGuid: LPGUID,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRecoverResourceManager(ResourceManagerHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtGetNotificationResourceManager(
        ResourceManagerHandle: HANDLE,
        TransactionNotification: PTRANSACTION_NOTIFICATION,
        NotificationLength: ULONG,
        Timeout: PLARGE_INTEGER,
        ReturnLength: PULONG,
        Asynchronous: ULONG,
        AsynchronousContext: ULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationResourceManager(
        ResourceManagerHandle: HANDLE,
        ResourceManagerInformationClass: RESOURCEMANAGER_INFORMATION_CLASS,
        ResourceManagerInformation: PVOID,
        ResourceManagerInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationResourceManager(
        ResourceManagerHandle: HANDLE,
        ResourceManagerInformationClass: RESOURCEMANAGER_INFORMATION_CLASS,
        ResourceManagerInformation: PVOID,
        ResourceManagerInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRegisterProtocolAddressInformation(
        ResourceManager: HANDLE,
        ProtocolId: PCRM_PROTOCOL_ID,
        ProtocolInformationSize: ULONG,
        ProtocolInformation: PVOID,
        CreateOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPropagationComplete(
        ResourceManagerHandle: HANDLE,
        RequestCookie: ULONG,
        BufferLength: ULONG,
        Buffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPropagationFailed(
        ResourceManagerHandle: HANDLE,
        RequestCookie: ULONG,
        PropStatus: NTSTATUS,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn __inbyte(Port: USHORT) -> UCHAR;
}
extern "C" {
    pub fn __inword(Port: USHORT) -> USHORT;
}
extern "C" {
    pub fn __indword(Port: USHORT) -> ULONG;
}
extern "C" {
    pub fn __outbyte(Port: USHORT, Data: UCHAR);
}
extern "C" {
    pub fn __outword(Port: USHORT, Data: USHORT);
}
extern "C" {
    pub fn __outdword(Port: USHORT, Data: ULONG);
}
extern "C" {
    pub fn __inbytestring(Port: USHORT, Buffer: PUCHAR, Count: ULONG);
}
extern "C" {
    pub fn __inwordstring(Port: USHORT, Buffer: PUSHORT, Count: ULONG);
}
extern "C" {
    pub fn __indwordstring(Port: USHORT, Buffer: PULONG, Count: ULONG);
}
extern "C" {
    pub fn __outbytestring(Port: USHORT, Buffer: PUCHAR, Count: ULONG);
}
extern "C" {
    pub fn __outwordstring(Port: USHORT, Buffer: PUSHORT, Count: ULONG);
}
extern "C" {
    pub fn __outdwordstring(Port: USHORT, Buffer: PULONG, Count: ULONG);
}
extern "C" {
    pub fn __readcr8() -> ULONG64;
}
extern "C" {
    pub fn __writecr8(Data: ULONG64);
}
extern "C" {
    pub fn KeFlushIoBuffers(Mdl: PMDL, ReadOperation: BOOLEAN, DmaOperation: BOOLEAN);
}
extern "C" {
    pub fn KeGetCurrentIrql() -> KIRQL;
}
extern "C" {
    pub fn KeLowerIrql(NewIrql: KIRQL);
}
extern "C" {
    pub fn KfRaiseIrql(NewIrql: KIRQL) -> KIRQL;
}
extern "C" {
    pub fn KeInitializeDpc(
        Dpc: PRKDPC,
        DeferredRoutine: PKDEFERRED_ROUTINE,
        DeferredContext: PVOID,
    );
}
extern "C" {
    pub fn KeInitializeThreadedDpc(
        Dpc: PRKDPC,
        DeferredRoutine: PKDEFERRED_ROUTINE,
        DeferredContext: PVOID,
    );
}
extern "C" {
    pub fn KeInsertQueueDpc(
        Dpc: PRKDPC,
        SystemArgument1: PVOID,
        SystemArgument2: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeRemoveQueueDpc(Dpc: PRKDPC) -> BOOLEAN;
}
extern "C" {
    pub fn KeRemoveQueueDpcEx(Dpc: PRKDPC, WaitIfActive: BOOLEAN) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn KeInitializeCrashDumpHeader(
        DumpType: ULONG,
        Flags: ULONG,
        Buffer: PVOID,
        BufferSize: ULONG,
        BufferNeeded: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeSetImportanceDpc(Dpc: PRKDPC, Importance: KDPC_IMPORTANCE);
}
extern "C" {
    pub fn KeSetTargetProcessorDpc(Dpc: PRKDPC, Number: CCHAR);
}
extern "C" {
    pub fn KeFlushQueuedDpcs();
}
extern "C" {
    pub fn KeInitializeDeviceQueue(DeviceQueue: PKDEVICE_QUEUE);
}
extern "C" {
    pub fn KeInsertDeviceQueue(
        DeviceQueue: PKDEVICE_QUEUE,
        DeviceQueueEntry: PKDEVICE_QUEUE_ENTRY,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeInsertByKeyDeviceQueue(
        DeviceQueue: PKDEVICE_QUEUE,
        DeviceQueueEntry: PKDEVICE_QUEUE_ENTRY,
        SortKey: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeRemoveDeviceQueue(DeviceQueue: PKDEVICE_QUEUE) -> PKDEVICE_QUEUE_ENTRY;
}
extern "C" {
    pub fn KeRemoveByKeyDeviceQueue(
        DeviceQueue: PKDEVICE_QUEUE,
        SortKey: ULONG,
    ) -> PKDEVICE_QUEUE_ENTRY;
}
extern "C" {
    pub fn KeRemoveByKeyDeviceQueueIfBusy(
        DeviceQueue: PKDEVICE_QUEUE,
        SortKey: ULONG,
    ) -> PKDEVICE_QUEUE_ENTRY;
}
extern "C" {
    pub fn KeRemoveEntryDeviceQueue(
        DeviceQueue: PKDEVICE_QUEUE,
        DeviceQueueEntry: PKDEVICE_QUEUE_ENTRY,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeSynchronizeExecution(
        Interrupt: PKINTERRUPT,
        SynchronizeRoutine: PKSYNCHRONIZE_ROUTINE,
        SynchronizeContext: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeAcquireInterruptSpinLock(Interrupt: PKINTERRUPT) -> KIRQL;
}
extern "C" {
    pub fn KeReleaseInterruptSpinLock(Interrupt: PKINTERRUPT, OldIrql: KIRQL);
}
extern "C" {
    pub fn KeInitializeEvent(Event: PRKEVENT, Type: EVENT_TYPE, State: BOOLEAN);
}
extern "C" {
    pub fn KeClearEvent(Event: PRKEVENT);
}
extern "C" {
    pub fn KeReadStateEvent(Event: PRKEVENT) -> LONG;
}
extern "C" {
    pub fn KeResetEvent(Event: PRKEVENT) -> LONG;
}
extern "C" {
    pub fn KeSetEvent(Event: PRKEVENT, Increment: KPRIORITY, Wait: BOOLEAN) -> LONG;
}
extern "C" {
    pub fn KeInitializeMutex(Mutex: PRKMUTEX, Level: ULONG);
}
extern "C" {
    pub fn KeReadStateMutex(Mutex: PRKMUTEX) -> LONG;
}
extern "C" {
    pub fn KeReleaseMutex(Mutex: PRKMUTEX, Wait: BOOLEAN) -> LONG;
}
extern "C" {
    pub fn KeInitializeSemaphore(Semaphore: PRKSEMAPHORE, Count: LONG, Limit: LONG);
}
extern "C" {
    pub fn KeReadStateSemaphore(Semaphore: PRKSEMAPHORE) -> LONG;
}
extern "C" {
    pub fn KeReleaseSemaphore(
        Semaphore: PRKSEMAPHORE,
        Increment: KPRIORITY,
        Adjustment: LONG,
        Wait: BOOLEAN,
    ) -> LONG;
}
extern "C" {
    #[must_use]
    pub fn KeDelayExecutionThread(
        WaitMode: KPROCESSOR_MODE,
        Alertable: BOOLEAN,
        Interval: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeQueryPriorityThread(Thread: PKTHREAD) -> KPRIORITY;
}
extern "C" {
    pub fn KeQueryRuntimeThread(Thread: PKTHREAD, UserTime: PULONG) -> ULONG;
}
extern "C" {
    pub fn KeQueryTotalCycleTimeThread(
        Thread: PKTHREAD,
        CycleTimeStamp: PULONG64,
    ) -> ULONG64;
}
extern "C" {
    #[must_use]
    pub fn KeSetTargetProcessorDpcEx(
        Dpc: PKDPC,
        ProcNumber: PPROCESSOR_NUMBER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeRevertToUserAffinityThread();
}
extern "C" {
    pub fn KeSetSystemAffinityThread(Affinity: KAFFINITY);
}
extern "C" {
    pub fn KeRevertToUserAffinityThreadEx(Affinity: KAFFINITY);
}
extern "C" {
    pub fn KeSetSystemGroupAffinityThread(
        Affinity: PGROUP_AFFINITY,
        PreviousAffinity: PGROUP_AFFINITY,
    );
}
extern "C" {
    pub fn KeRevertToUserGroupAffinityThread(PreviousAffinity: PGROUP_AFFINITY);
}
extern "C" {
    pub fn KeSetSystemAffinityThreadEx(Affinity: KAFFINITY) -> KAFFINITY;
}
extern "C" {
    pub fn KeSetPriorityThread(Thread: PKTHREAD, Priority: KPRIORITY) -> KPRIORITY;
}
extern "C" {
    pub fn KeEnterCriticalRegion();
}
extern "C" {
    pub fn KeLeaveCriticalRegion();
}
extern "C" {
    pub fn KeEnterGuardedRegion();
}
extern "C" {
    pub fn KeLeaveGuardedRegion();
}
extern "C" {
    pub fn KeAreApcsDisabled() -> BOOLEAN;
}
extern "C" {
    pub fn KeInitializeTimer(Timer: PKTIMER);
}
extern "C" {
    pub fn KeInitializeTimerEx(Timer: PKTIMER, Type: TIMER_TYPE);
}
extern "C" {
    pub fn KeCancelTimer(arg1: PKTIMER) -> BOOLEAN;
}
extern "C" {
    pub fn KeReadStateTimer(Timer: PKTIMER) -> BOOLEAN;
}
extern "C" {
    pub fn KeSetTimer(Timer: PKTIMER, DueTime: LARGE_INTEGER, Dpc: PKDPC) -> BOOLEAN;
}
extern "C" {
    pub fn KeSetTimerEx(
        Timer: PKTIMER,
        DueTime: LARGE_INTEGER,
        Period: LONG,
        Dpc: PKDPC,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeSetCoalescableTimer(
        Timer: PKTIMER,
        DueTime: LARGE_INTEGER,
        Period: ULONG,
        TolerableDelay: ULONG,
        Dpc: PKDPC,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn KeWaitForMultipleObjects(
        Count: ULONG,
        Object: *mut PVOID,
        WaitType: WAIT_TYPE,
        WaitReason: KWAIT_REASON,
        WaitMode: KPROCESSOR_MODE,
        Alertable: BOOLEAN,
        Timeout: PLARGE_INTEGER,
        WaitBlockArray: PKWAIT_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KeWaitForSingleObject(
        Object: PVOID,
        WaitReason: KWAIT_REASON,
        WaitMode: KPROCESSOR_MODE,
        Alertable: BOOLEAN,
        Timeout: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeIpiGenericCall(
        BroadcastFunction: PKIPI_BROADCAST_WORKER,
        Context: ULONG_PTR,
    ) -> ULONG_PTR;
}
extern "C" {
    pub fn KeInitializeSpinLock(SpinLock: PKSPIN_LOCK);
}
extern "C" {
    pub fn KeTestSpinLock(SpinLock: PKSPIN_LOCK) -> BOOLEAN;
}
extern "C" {
    pub fn KeTryToAcquireSpinLockAtDpcLevel(SpinLock: PKSPIN_LOCK) -> BOOLEAN;
}
extern "C" {
    pub fn KeAcquireSpinLockAtDpcLevel(SpinLock: PKSPIN_LOCK);
}
extern "C" {
    pub fn KeAcquireSpinLockRaiseToDpc(SpinLock: PKSPIN_LOCK) -> KIRQL;
}
extern "C" {
    pub fn KeReleaseSpinLock(SpinLock: PKSPIN_LOCK, NewIrql: KIRQL);
}
extern "C" {
    pub fn KeReleaseSpinLockFromDpcLevel(SpinLock: PKSPIN_LOCK);
}
extern "C" {
    pub fn KeAcquireSpinLockForDpc(SpinLock: PKSPIN_LOCK) -> KIRQL;
}
extern "C" {
    pub fn KeReleaseSpinLockForDpc(SpinLock: PKSPIN_LOCK, OldIrql: KIRQL);
}
extern "C" {
    pub fn KeAcquireInStackQueuedSpinLock(
        SpinLock: PKSPIN_LOCK,
        LockHandle: PKLOCK_QUEUE_HANDLE,
    );
}
extern "C" {
    pub fn KeReleaseInStackQueuedSpinLock(LockHandle: PKLOCK_QUEUE_HANDLE);
}
extern "C" {
    pub fn KeAcquireInStackQueuedSpinLockAtDpcLevel(
        SpinLock: PKSPIN_LOCK,
        LockHandle: PKLOCK_QUEUE_HANDLE,
    );
}
extern "C" {
    pub fn KeReleaseInStackQueuedSpinLockFromDpcLevel(LockHandle: PKLOCK_QUEUE_HANDLE);
}
extern "C" {
    pub fn KeAcquireInStackQueuedSpinLockForDpc(
        SpinLock: PKSPIN_LOCK,
        LockHandle: PKLOCK_QUEUE_HANDLE,
    );
}
extern "C" {
    pub fn KeReleaseInStackQueuedSpinLockForDpc(LockHandle: PKLOCK_QUEUE_HANDLE);
}
extern "C" {
    #[must_use]
    pub fn KeQueryDpcWatchdogInformation(
        WatchdogInformation: PKDPC_WATCHDOG_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeIsExecutingDpc() -> LOGICAL;
}
extern "C" {
    pub fn KeDeregisterBugCheckCallback(
        CallbackRecord: PKBUGCHECK_CALLBACK_RECORD,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeRegisterBugCheckCallback(
        CallbackRecord: PKBUGCHECK_CALLBACK_RECORD,
        CallbackRoutine: PKBUGCHECK_CALLBACK_ROUTINE,
        Buffer: PVOID,
        Length: ULONG,
        Component: PUCHAR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn BugCheckSecondaryMultiPartDumpDataCallback(
        Reason: KBUGCHECK_CALLBACK_REASON,
        Record: *mut _KBUGCHECK_REASON_CALLBACK_RECORD,
        ReasonSpecificData: PVOID,
        ReasonSpecificDataLength: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn KeInitializeTriageDumpDataArray(
        KtriageDumpDataArray: PKTRIAGE_DUMP_DATA_ARRAY,
        Size: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KeAddTriageDumpDataBlock(
        KtriageDumpDataArray: PKTRIAGE_DUMP_DATA_ARRAY,
        Address: PVOID,
        Size: SIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeDeregisterBugCheckReasonCallback(
        CallbackRecord: PKBUGCHECK_REASON_CALLBACK_RECORD,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeRegisterBugCheckReasonCallback(
        CallbackRecord: PKBUGCHECK_REASON_CALLBACK_RECORD,
        CallbackRoutine: PKBUGCHECK_REASON_CALLBACK_ROUTINE,
        Reason: KBUGCHECK_CALLBACK_REASON,
        Component: PUCHAR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn KeRegisterNmiCallback(
        CallbackRoutine: PNMI_CALLBACK,
        Context: PVOID,
    ) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn KeDeregisterNmiCallback(Handle: PVOID) -> NTSTATUS;
}
extern "C" {
    pub fn KeRegisterBoundCallback(CallbackRoutine: PBOUND_CALLBACK) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn KeDeregisterBoundCallback(Handle: PVOID) -> NTSTATUS;
}
extern "C" {
    pub fn KeBugCheckEx(
        BugCheckCode: ULONG,
        BugCheckParameter1: ULONG_PTR,
        BugCheckParameter2: ULONG_PTR,
        BugCheckParameter3: ULONG_PTR,
        BugCheckParameter4: ULONG_PTR,
    ) -> !;
}
extern "C" {
    pub fn KeQuerySystemTimePrecise(CurrentTime: PLARGE_INTEGER);
}
extern "C" {
    pub fn KeQueryInterruptTimePrecise(QpcTimeStamp: PULONG64) -> ULONG64;
}
extern "C" {
    pub fn KeQueryUnbiasedInterruptTimePrecise(QpcTimeStamp: PULONG64) -> ULONG64;
}
extern "C" {
    pub fn KeQueryTimeIncrement() -> ULONG;
}
extern "C" {
    pub fn KeQueryUnbiasedInterruptTime() -> ULONGLONG;
}
extern "C" {
    pub fn KeGetRecommendedSharedDataAlignment() -> ULONG;
}
extern "C" {
    pub fn KeQueryActiveProcessors() -> KAFFINITY;
}
extern "C" {
    pub fn KeQueryActiveProcessorCount(ActiveProcessors: PKAFFINITY) -> ULONG;
}
extern "C" {
    pub fn KeQueryActiveProcessorCountEx(GroupNumber: USHORT) -> ULONG;
}
extern "C" {
    pub fn KeQueryMaximumProcessorCount() -> ULONG;
}
extern "C" {
    pub fn KeQueryMaximumProcessorCountEx(GroupNumber: USHORT) -> ULONG;
}
extern "C" {
    pub fn KeQueryActiveGroupCount() -> USHORT;
}
extern "C" {
    pub fn KeQueryMaximumGroupCount() -> USHORT;
}
extern "C" {
    pub fn KeQueryGroupAffinity(GroupNumber: USHORT) -> KAFFINITY;
}
extern "C" {
    pub fn KeGetCurrentProcessorNumberEx(ProcNumber: PPROCESSOR_NUMBER) -> ULONG;
}
extern "C" {
    pub fn KeQueryNodeActiveAffinity(
        NodeNumber: USHORT,
        Affinity: PGROUP_AFFINITY,
        Count: PUSHORT,
    );
}
extern "C" {
    pub fn KeQueryNodeMaximumProcessorCount(NodeNumber: USHORT) -> USHORT;
}
extern "C" {
    pub fn KeQueryHighestNodeNumber() -> USHORT;
}
extern "C" {
    pub fn KeGetCurrentNodeNumber() -> USHORT;
}
extern "C" {
    #[must_use]
    pub fn KeQueryLogicalProcessorRelationship(
        ProcessorNumber: PPROCESSOR_NUMBER,
        RelationshipType: LOGICAL_PROCESSOR_RELATIONSHIP,
        Information: PSYSTEM_LOGICAL_PROCESSOR_INFORMATION_EX,
        Length: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeShouldYieldProcessor() -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn KeQueryNodeActiveAffinity2(
        NodeNumber: USHORT,
        GroupAffinities: PGROUP_AFFINITY,
        GroupAffinitiesCount: USHORT,
        GroupAffinitiesRequired: PUSHORT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeQueryNodeActiveProcessorCount(NodeNumber: USHORT) -> ULONG;
}
extern "C" {
    pub fn KeAreAllApcsDisabled() -> BOOLEAN;
}
extern "C" {
    pub fn KeInitializeGuardedMutex(Mutex: PKGUARDED_MUTEX);
}
extern "C" {
    pub fn KeAcquireGuardedMutex(Mutex: PKGUARDED_MUTEX);
}
extern "C" {
    pub fn KeReleaseGuardedMutex(Mutex: PKGUARDED_MUTEX);
}
extern "C" {
    pub fn KeTryToAcquireGuardedMutex(Mutex: PKGUARDED_MUTEX) -> BOOLEAN;
}
extern "C" {
    pub fn KeAcquireGuardedMutexUnsafe(FastMutex: PKGUARDED_MUTEX);
}
extern "C" {
    pub fn KeReleaseGuardedMutexUnsafe(FastMutex: PKGUARDED_MUTEX);
}
extern "C" {
    pub fn KeRegisterProcessorChangeCallback(
        CallbackFunction: PPROCESSOR_CALLBACK_FUNCTION,
        CallbackContext: PVOID,
        Flags: ULONG,
    ) -> PVOID;
}
extern "C" {
    pub fn KeDeregisterProcessorChangeCallback(CallbackHandle: PVOID);
}
extern "C" {
    #[must_use]
    pub fn KeGetProcessorNumberFromIndex(
        ProcIndex: ULONG,
        ProcNumber: PPROCESSOR_NUMBER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeGetProcessorIndexFromNumber(ProcNumber: PPROCESSOR_NUMBER) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn KeSaveExtendedProcessorState(
        Mask: ULONG64,
        XStateSave: PXSTATE_SAVE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeRestoreExtendedProcessorState(XStateSave: PXSTATE_SAVE);
}
extern "C" {
    #[must_use]
    pub fn KeConvertAuxiliaryCounterToPerformanceCounter(
        AuxiliaryCounterValue: ULONG64,
        PerformanceCounterValue: PULONG64,
        ConversionError: PULONG64,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KeConvertPerformanceCounterToAuxiliaryCounter(
        PerformanceCounterValue: ULONG64,
        AuxiliaryCounterValue: PULONG64,
        ConversionError: PULONG64,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KeQueryAuxiliaryCounterFrequency(
        AuxiliaryCounterFrequency: PULONG64,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KdDisableDebugger() -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KdEnableDebugger() -> NTSTATUS;
}
extern "C" {
    pub fn KdRefreshDebuggerNotPresent() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn KdChangeOption(
        Option: KD_OPTION,
        InBufferBytes: ULONG,
        InBuffer: PVOID,
        OutBufferBytes: ULONG,
        OutBuffer: PVOID,
        OutBufferNeeded: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExAllocatePool(PoolType: POOL_TYPE, NumberOfBytes: SIZE_T) -> PVOID;
}
extern "C" {
    pub fn ExAllocatePoolWithQuota(PoolType: POOL_TYPE, NumberOfBytes: SIZE_T) -> PVOID;
}
extern "C" {
    pub fn ExAllocatePool2(
        Flags: POOL_FLAGS,
        NumberOfBytes: SIZE_T,
        Tag: ULONG,
    ) -> PVOID;
}
extern "C" {
    pub fn ExAllocatePool3(
        Flags: POOL_FLAGS,
        NumberOfBytes: SIZE_T,
        Tag: ULONG,
        ExtendedParameters: PCPOOL_EXTENDED_PARAMETER,
        ExtendedParametersCount: ULONG,
    ) -> PVOID;
}
extern "C" {
    pub fn ExFreePool2(
        P: PVOID,
        Tag: ULONG,
        ExtendedParameters: PCPOOL_EXTENDED_PARAMETER,
        ExtendedParametersCount: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn ExCreatePool(
        Flags: ULONG,
        Tag: ULONG_PTR,
        Params: *mut POOL_CREATE_EXTENDED_PARAMS,
        PoolHandle: *mut HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExDestroyPool(PoolHandle: HANDLE);
}
extern "C" {
    #[must_use]
    pub fn ExSecurePoolUpdate(
        SecurePoolHandle: HANDLE,
        Tag: ULONG,
        Allocation: PVOID,
        Cookie: ULONG_PTR,
        Offset: SIZE_T,
        Size: SIZE_T,
        Buffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExSecurePoolValidate(
        SecurePoolHandle: HANDLE,
        Tag: ULONG,
        Allocation: PVOID,
        Cookie: ULONG_PTR,
    ) -> LOGICAL;
}
extern "C" {
    pub fn ExFreePool(P: PVOID);
}
extern "C" {
    pub fn ExFreePoolWithTag(P: PVOID, Tag: ULONG);
}
extern "C" {
    pub fn ExAcquireFastMutexUnsafe(FastMutex: PFAST_MUTEX);
}
extern "C" {
    pub fn ExReleaseFastMutexUnsafe(FastMutex: PFAST_MUTEX);
}
extern "C" {
    pub fn ExAcquireFastMutex(FastMutex: PFAST_MUTEX);
}
extern "C" {
    pub fn ExReleaseFastMutex(FastMutex: PFAST_MUTEX);
}
extern "C" {
    pub fn ExTryToAcquireFastMutex(FastMutex: PFAST_MUTEX) -> BOOLEAN;
}
extern "C" {
    pub fn ExInterlockedAddLargeInteger(
        Addend: PLARGE_INTEGER,
        Increment: LARGE_INTEGER,
        Lock: PKSPIN_LOCK,
    ) -> LARGE_INTEGER;
}
extern "C" {
    pub fn ExInterlockedAddUlong(
        Addend: PULONG,
        Increment: ULONG,
        Lock: PKSPIN_LOCK,
    ) -> ULONG;
}
extern "C" {
    pub fn ExInterlockedInsertHeadList(
        ListHead: PLIST_ENTRY,
        ListEntry: PLIST_ENTRY,
        Lock: PKSPIN_LOCK,
    ) -> PLIST_ENTRY;
}
extern "C" {
    pub fn ExInterlockedInsertTailList(
        ListHead: PLIST_ENTRY,
        ListEntry: PLIST_ENTRY,
        Lock: PKSPIN_LOCK,
    ) -> PLIST_ENTRY;
}
extern "C" {
    pub fn ExInterlockedRemoveHeadList(
        ListHead: PLIST_ENTRY,
        Lock: PKSPIN_LOCK,
    ) -> PLIST_ENTRY;
}
extern "C" {
    pub fn ExInterlockedPopEntryList(
        ListHead: PSINGLE_LIST_ENTRY,
        Lock: PKSPIN_LOCK,
    ) -> PSINGLE_LIST_ENTRY;
}
extern "C" {
    pub fn ExInterlockedPushEntryList(
        ListHead: PSINGLE_LIST_ENTRY,
        ListEntry: PSINGLE_LIST_ENTRY,
        Lock: PKSPIN_LOCK,
    ) -> PSINGLE_LIST_ENTRY;
}
extern "C" {
    pub fn InitializeSListHead(SListHead: PSLIST_HEADER);
}
extern "C" {
    pub fn FirstEntrySList(SListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
extern "C" {
    pub fn ExQueryDepthSList(SListHead: PSLIST_HEADER) -> USHORT;
}
extern "C" {
    pub fn ExpInterlockedPopEntrySList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
extern "C" {
    pub fn ExpInterlockedPushEntrySList(
        ListHead: PSLIST_HEADER,
        ListEntry: PSLIST_ENTRY,
    ) -> PSLIST_ENTRY;
}
extern "C" {
    pub fn ExpInterlockedFlushSList(ListHead: PSLIST_HEADER) -> PSLIST_ENTRY;
}
extern "C" {
    #[must_use]
    pub fn ExInitializeLookasideListEx(
        Lookaside: PLOOKASIDE_LIST_EX,
        Allocate: PALLOCATE_FUNCTION_EX,
        Free: PFREE_FUNCTION_EX,
        PoolType: POOL_TYPE,
        Flags: ULONG,
        Size: SIZE_T,
        Tag: ULONG,
        Depth: USHORT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExDeleteLookasideListEx(Lookaside: PLOOKASIDE_LIST_EX);
}
extern "C" {
    pub fn ExFlushLookasideListEx(Lookaside: PLOOKASIDE_LIST_EX);
}
extern "C" {
    pub fn ExAllocateFromLookasideListEx(Lookaside: PLOOKASIDE_LIST_EX) -> PVOID;
}
extern "C" {
    pub fn ExFreeToLookasideListEx(Lookaside: PLOOKASIDE_LIST_EX, Entry: PVOID);
}
extern "C" {
    pub fn ExInitializeNPagedLookasideList(
        Lookaside: PNPAGED_LOOKASIDE_LIST,
        Allocate: PALLOCATE_FUNCTION,
        Free: PFREE_FUNCTION,
        Flags: ULONG,
        Size: SIZE_T,
        Tag: ULONG,
        Depth: USHORT,
    );
}
extern "C" {
    pub fn ExDeleteNPagedLookasideList(Lookaside: PNPAGED_LOOKASIDE_LIST);
}
extern "C" {
    pub fn ExAllocateFromNPagedLookasideList(Lookaside: PNPAGED_LOOKASIDE_LIST) -> PVOID;
}
extern "C" {
    pub fn ExFreeToNPagedLookasideList(Lookaside: PNPAGED_LOOKASIDE_LIST, Entry: PVOID);
}
extern "C" {
    pub fn ExInitializePagedLookasideList(
        Lookaside: PPAGED_LOOKASIDE_LIST,
        Allocate: PALLOCATE_FUNCTION,
        Free: PFREE_FUNCTION,
        Flags: ULONG,
        Size: SIZE_T,
        Tag: ULONG,
        Depth: USHORT,
    );
}
extern "C" {
    pub fn ExDeletePagedLookasideList(Lookaside: PPAGED_LOOKASIDE_LIST);
}
extern "C" {
    pub fn ExAllocateFromPagedLookasideList(Lookaside: PPAGED_LOOKASIDE_LIST) -> PVOID;
}
extern "C" {
    pub fn ExFreeToPagedLookasideList(Lookaside: PPAGED_LOOKASIDE_LIST, Entry: PVOID);
}
extern "C" {
    pub fn ProbeForRead(
        Address: *mut ::core::ffi::c_void,
        Length: SIZE_T,
        Alignment: ULONG,
    );
}
extern "C" {
    pub fn ExRaiseStatus(Status: NTSTATUS) -> !;
}
extern "C" {
    pub fn ProbeForWrite(
        Address: *mut ::core::ffi::c_void,
        Length: SIZE_T,
        Alignment: ULONG,
    );
}
extern "C" {
    pub fn ExQueueWorkItem(WorkItem: PWORK_QUEUE_ITEM, QueueType: WORK_QUEUE_TYPE);
}
extern "C" {
    pub fn ExIsProcessorFeaturePresent(ProcessorFeature: ULONG) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn ExInitializeResourceLite(Resource: PERESOURCE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ExReinitializeResourceLite(Resource: PERESOURCE) -> NTSTATUS;
}
extern "C" {
    pub fn ExAcquireResourceSharedLite(Resource: PERESOURCE, Wait: BOOLEAN) -> BOOLEAN;
}
extern "C" {
    pub fn ExEnterCriticalRegionAndAcquireResourceShared(Resource: PERESOURCE) -> PVOID;
}
extern "C" {
    pub fn ExAcquireResourceExclusiveLite(
        Resource: PERESOURCE,
        Wait: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExEnterCriticalRegionAndAcquireResourceExclusive(
        Resource: PERESOURCE,
    ) -> PVOID;
}
extern "C" {
    pub fn ExAcquireSharedStarveExclusive(
        Resource: PERESOURCE,
        Wait: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExAcquireSharedWaitForExclusive(
        Resource: PERESOURCE,
        Wait: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExEnterCriticalRegionAndAcquireSharedWaitForExclusive(
        Resource: PERESOURCE,
    ) -> PVOID;
}
extern "C" {
    pub fn ExReleaseResourceLite(Resource: PERESOURCE);
}
extern "C" {
    pub fn ExReleaseResourceAndLeaveCriticalRegion(Resource: PERESOURCE);
}
extern "C" {
    pub fn ExReleaseResourceForThreadLite(
        Resource: PERESOURCE,
        ResourceThreadId: ERESOURCE_THREAD,
    );
}
extern "C" {
    pub fn ExSetResourceOwnerPointer(Resource: PERESOURCE, OwnerPointer: PVOID);
}
extern "C" {
    pub fn ExSetResourceOwnerPointerEx(
        Resource: PERESOURCE,
        OwnerPointer: PVOID,
        Flags: ULONG,
    );
}
extern "C" {
    pub fn ExConvertExclusiveToSharedLite(Resource: PERESOURCE);
}
extern "C" {
    #[must_use]
    pub fn ExDeleteResourceLite(Resource: PERESOURCE) -> NTSTATUS;
}
extern "C" {
    pub fn ExGetExclusiveWaiterCount(Resource: PERESOURCE) -> ULONG;
}
extern "C" {
    pub fn ExGetSharedWaiterCount(Resource: PERESOURCE) -> ULONG;
}
extern "C" {
    pub fn ExIsResourceAcquiredExclusiveLite(Resource: PERESOURCE) -> BOOLEAN;
}
extern "C" {
    pub fn ExIsResourceAcquiredSharedLite(Resource: PERESOURCE) -> ULONG;
}
extern "C" {
    pub fn ExGetPreviousMode() -> KPROCESSOR_MODE;
}
extern "C" {
    pub fn ExSetTimerResolution(DesiredTime: ULONG, SetResolution: BOOLEAN) -> ULONG;
}
extern "C" {
    pub fn ExQueryTimerResolution(
        MaximumTime: PULONG,
        MinimumTime: PULONG,
        CurrentTime: PULONG,
    );
}
extern "C" {
    pub fn ExSystemTimeToLocalTime(
        SystemTime: PLARGE_INTEGER,
        LocalTime: PLARGE_INTEGER,
    );
}
extern "C" {
    pub fn ExLocalTimeToSystemTime(
        LocalTime: PLARGE_INTEGER,
        SystemTime: PLARGE_INTEGER,
    );
}
extern "C" {
    pub fn ExAllocateTimer(
        Callback: PEXT_CALLBACK,
        CallbackContext: PVOID,
        Attributes: ULONG,
    ) -> PEX_TIMER;
}
extern "C" {
    pub fn ExSetTimer(
        Timer: PEX_TIMER,
        DueTime: LONGLONG,
        Period: LONGLONG,
        Parameters: PEXT_SET_PARAMETERS,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExCancelTimer(
        Timer: PEX_TIMER,
        Parameters: PEXT_CANCEL_PARAMETERS,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExDeleteTimer(
        Timer: PEX_TIMER,
        Cancel: BOOLEAN,
        Wait: BOOLEAN,
        Parameters: PEXT_DELETE_PARAMETERS,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn ExCreateCallback(
        CallbackObject: *mut PCALLBACK_OBJECT,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        Create: BOOLEAN,
        AllowMultipleCallbacks: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExRegisterCallback(
        CallbackObject: PCALLBACK_OBJECT,
        CallbackFunction: PCALLBACK_FUNCTION,
        CallbackContext: PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn ExUnregisterCallback(CallbackRegistration: PVOID);
}
extern "C" {
    pub fn ExNotifyCallback(CallbackObject: PVOID, Argument1: PVOID, Argument2: PVOID);
}
extern "C" {
    pub fn ExVerifySuite(SuiteType: SUITE_TYPE) -> BOOLEAN;
}
extern "C" {
    pub fn ExInitializeRundownProtection(RunRef: PEX_RUNDOWN_REF);
}
extern "C" {
    pub fn ExReInitializeRundownProtection(RunRef: PEX_RUNDOWN_REF);
}
extern "C" {
    pub fn ExAcquireRundownProtection(RunRef: PEX_RUNDOWN_REF) -> BOOLEAN;
}
extern "C" {
    pub fn ExAcquireRundownProtectionEx(
        RunRef: PEX_RUNDOWN_REF,
        Count: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExReleaseRundownProtection(RunRef: PEX_RUNDOWN_REF);
}
extern "C" {
    pub fn ExReleaseRundownProtectionEx(RunRef: PEX_RUNDOWN_REF, Count: ULONG);
}
extern "C" {
    pub fn ExRundownCompleted(RunRef: PEX_RUNDOWN_REF);
}
extern "C" {
    pub fn ExWaitForRundownProtectionRelease(RunRef: PEX_RUNDOWN_REF);
}
extern "C" {
    pub fn ExAllocateCacheAwareRundownProtection(
        PoolType: POOL_TYPE,
        PoolTag: ULONG,
    ) -> PEX_RUNDOWN_REF_CACHE_AWARE;
}
extern "C" {
    pub fn ExSizeOfRundownProtectionCacheAware() -> SIZE_T;
}
extern "C" {
    pub fn ExInitializeRundownProtectionCacheAware(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
        RunRefSize: SIZE_T,
    );
}
extern "C" {
    pub fn ExFreeCacheAwareRundownProtection(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
    );
}
extern "C" {
    pub fn ExAcquireRundownProtectionCacheAware(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExReleaseRundownProtectionCacheAware(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
    );
}
extern "C" {
    pub fn ExAcquireRundownProtectionCacheAwareEx(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
        Count: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn ExReleaseRundownProtectionCacheAwareEx(
        RunRef: PEX_RUNDOWN_REF_CACHE_AWARE,
        Count: ULONG,
    );
}
extern "C" {
    pub fn ExWaitForRundownProtectionReleaseCacheAware(
        RunRef: PEX_RUNDOWN_REF_CACHE_AWARE,
    );
}
extern "C" {
    pub fn ExReInitializeRundownProtectionCacheAware(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
    );
}
extern "C" {
    pub fn ExRundownCompletedCacheAware(RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE);
}
extern "C" {
    pub fn ExInitializeRundownProtectionCacheAwareEx(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
        Flags: ULONG,
    );
}
extern "C" {
    pub fn ExCleanupRundownProtectionCacheAware(
        RunRefCacheAware: PEX_RUNDOWN_REF_CACHE_AWARE,
    );
}
extern "C" {
    pub fn ExInitializePushLock(PushLock: PULONG_PTR);
}
extern "C" {
    pub fn ExAcquirePushLockExclusiveEx(PushLock: PULONG_PTR, Flags: ULONG);
}
extern "C" {
    pub fn ExAcquirePushLockSharedEx(PushLock: PULONG_PTR, Flags: ULONG);
}
extern "C" {
    pub fn ExReleasePushLockExclusiveEx(PushLock: PULONG_PTR, Flags: ULONG);
}
extern "C" {
    pub fn ExReleasePushLockSharedEx(PushLock: PULONG_PTR, Flags: ULONG);
}
extern "C" {
    #[must_use]
    pub fn ExInitializeDeviceAts(
        PhysicalDeviceObject: *mut [u8; 0usize],
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExAcquireSpinLockSharedAtDpcLevel(SpinLock: PEX_SPIN_LOCK);
}
extern "C" {
    pub fn ExAcquireSpinLockShared(SpinLock: PEX_SPIN_LOCK) -> KIRQL;
}
extern "C" {
    pub fn ExReleaseSpinLockSharedFromDpcLevel(SpinLock: PEX_SPIN_LOCK);
}
extern "C" {
    pub fn ExReleaseSpinLockShared(SpinLock: PEX_SPIN_LOCK, OldIrql: KIRQL);
}
extern "C" {
    pub fn ExTryConvertSharedSpinLockExclusive(SpinLock: PEX_SPIN_LOCK) -> LOGICAL;
}
extern "C" {
    pub fn ExAcquireSpinLockExclusiveAtDpcLevel(SpinLock: PEX_SPIN_LOCK);
}
extern "C" {
    pub fn ExAcquireSpinLockExclusive(SpinLock: PEX_SPIN_LOCK) -> KIRQL;
}
extern "C" {
    pub fn ExReleaseSpinLockExclusiveFromDpcLevel(SpinLock: PEX_SPIN_LOCK);
}
extern "C" {
    pub fn ExReleaseSpinLockExclusive(SpinLock: PEX_SPIN_LOCK, OldIrql: KIRQL);
}
extern "C" {
    pub fn ExTryAcquireSpinLockSharedAtDpcLevel(SpinLock: PEX_SPIN_LOCK) -> LOGICAL;
}
extern "C" {
    pub fn ExTryAcquireSpinLockExclusiveAtDpcLevel(SpinLock: PEX_SPIN_LOCK) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn ExGetFirmwareEnvironmentVariable(
        VariableName: PUNICODE_STRING,
        VendorGuid: LPGUID,
        Value: PVOID,
        ValueLength: PULONG,
        Attributes: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ExSetFirmwareEnvironmentVariable(
        VariableName: PUNICODE_STRING,
        VendorGuid: LPGUID,
        Value: PVOID,
        ValueLength: ULONG,
        Attributes: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExIsManufacturingModeEnabled() -> BOOLEAN;
}
extern "C" {
    pub fn ExIsSoftBoot() -> BOOLEAN;
}
extern "C" {
    pub fn ExGetFirmwareType() -> FIRMWARE_TYPE;
}
extern "C" {
    #[must_use]
    pub fn ExEnumerateSystemFirmwareTables(
        FirmwareTableProviderSignature: ULONG,
        FirmwareTableBuffer: PVOID,
        BufferLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ExGetSystemFirmwareTable(
        FirmwareTableProviderSignature: ULONG,
        FirmwareTableID: ULONG,
        FirmwareTableBuffer: PVOID,
        BufferLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn CmRegisterCallback(
        Function: PEX_CALLBACK_FUNCTION,
        Context: PVOID,
        Cookie: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn CmUnRegisterCallback(Cookie: LARGE_INTEGER) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn CmRegisterCallbackEx(
        Function: PEX_CALLBACK_FUNCTION,
        Altitude: PCUNICODE_STRING,
        Driver: PVOID,
        Context: PVOID,
        Cookie: PLARGE_INTEGER,
        Reserved: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn CmGetCallbackVersion(Major: PULONG, Minor: PULONG);
}
extern "C" {
    #[must_use]
    pub fn CmSetCallbackObjectContext(
        Object: PVOID,
        Cookie: PLARGE_INTEGER,
        NewContext: PVOID,
        OldContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn CmCallbackGetKeyObjectID(
        Cookie: PLARGE_INTEGER,
        Object: PVOID,
        ObjectID: PULONG_PTR,
        ObjectName: *mut PCUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn CmGetBoundTransaction(Cookie: PLARGE_INTEGER, Object: PVOID) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn CmCallbackGetKeyObjectIDEx(
        Cookie: PLARGE_INTEGER,
        Object: PVOID,
        ObjectID: PULONG_PTR,
        ObjectName: *mut PCUNICODE_STRING,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn CmCallbackReleaseKeyObjectIDEx(ObjectName: PCUNICODE_STRING);
}
extern "C" {
    pub fn MmQuerySystemSize() -> MM_SYSTEMSIZE;
}
extern "C" {
    #[must_use]
    pub fn MmIsVerifierEnabled(VerifierFlags: PULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmAddVerifierThunks(ThunkBuffer: PVOID, ThunkBufferSize: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmAddVerifierSpecialThunks(
        EntryRoutine: ULONG_PTR,
        ThunkBuffer: PVOID,
        ThunkBufferSize: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmProbeAndLockSelectedPages(
        MemoryDescriptorList: PMDL,
        SegmentArray: PFILE_SEGMENT_ELEMENT,
        AccessMode: KPROCESSOR_MODE,
        Operation: LOCK_OPERATION,
    );
}
extern "C" {
    pub fn MmProbeAndLockProcessPages(
        MemoryDescriptorList: PMDL,
        Process: PEPROCESS,
        AccessMode: KPROCESSOR_MODE,
        Operation: LOCK_OPERATION,
    );
}
extern "C" {
    pub fn MmProbeAndLockPages(
        MemoryDescriptorList: PMDL,
        AccessMode: KPROCESSOR_MODE,
        Operation: LOCK_OPERATION,
    );
}
extern "C" {
    pub fn MmUnlockPages(MemoryDescriptorList: PMDL);
}
extern "C" {
    pub fn MmBuildMdlForNonPagedPool(MemoryDescriptorList: PMDL);
}
extern "C" {
    #[must_use]
    pub fn MmAllocateMdlForIoSpace(
        PhysicalAddressList: PMM_PHYSICAL_ADDRESS_LIST,
        NumberOfEntries: SIZE_T,
        NewMdl: *mut PMDL,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmAreMdlPagesCached(MemoryDescriptorList: PMDL) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn MmSetPermanentCacheAttribute(
        StartAddress: PHYSICAL_ADDRESS,
        NumberOfBytes: LARGE_INTEGER,
        CacheType: MEMORY_CACHING_TYPE,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmMapLockedPages(
        MemoryDescriptorList: PMDL,
        AccessMode: KPROCESSOR_MODE,
    ) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn MmMapMdl(
        MemoryDescriptorList: PMDL,
        Protection: ULONG,
        DriverRoutine: PMM_MDL_ROUTINE,
        DriverContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmMapMemoryDumpMdlEx(
        Va: PVOID,
        PageTotal: PFN_NUMBER,
        MemoryDumpMdl: PMDL,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmIsIoSpaceActive(
        StartAddress: PHYSICAL_ADDRESS,
        NumberOfBytes: SIZE_T,
    ) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn MmAdvanceMdl(Mdl: PMDL, NumberOfBytes: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmProtectMdlSystemAddress(
        MemoryDescriptorList: PMDL,
        NewProtect: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmMapLockedPagesSpecifyCache(
        MemoryDescriptorList: PMDL,
        AccessMode: KPROCESSOR_MODE,
        CacheType: MEMORY_CACHING_TYPE,
        RequestedAddress: PVOID,
        BugCheckOnFailure: ULONG,
        Priority: ULONG,
    ) -> PVOID;
}
extern "C" {
    pub fn MmUnmapLockedPages(BaseAddress: PVOID, MemoryDescriptorList: PMDL);
}
extern "C" {
    pub fn MmAllocateMappingAddressEx(
        NumberOfBytes: SIZE_T,
        PoolTag: ULONG,
        Flags: ULONG,
    ) -> PVOID;
}
extern "C" {
    pub fn MmAllocateMappingAddress(NumberOfBytes: SIZE_T, PoolTag: ULONG) -> PVOID;
}
extern "C" {
    pub fn MmFreeMappingAddress(BaseAddress: PVOID, PoolTag: ULONG);
}
extern "C" {
    pub fn MmMapLockedPagesWithReservedMapping(
        MappingAddress: PVOID,
        PoolTag: ULONG,
        MemoryDescriptorList: PMDL,
        CacheType: MEMORY_CACHING_TYPE,
    ) -> PVOID;
}
extern "C" {
    pub fn MmUnmapReservedMapping(
        BaseAddress: PVOID,
        PoolTag: ULONG,
        MemoryDescriptorList: PMDL,
    );
}
extern "C" {
    pub fn MmAllocateNodePagesForMdlEx(
        LowAddress: PHYSICAL_ADDRESS,
        HighAddress: PHYSICAL_ADDRESS,
        SkipBytes: PHYSICAL_ADDRESS,
        TotalBytes: SIZE_T,
        CacheType: MEMORY_CACHING_TYPE,
        IdealNode: ULONG,
        Flags: ULONG,
    ) -> PMDL;
}
extern "C" {
    pub fn MmAllocatePartitionNodePagesForMdlEx(
        LowAddress: PHYSICAL_ADDRESS,
        HighAddress: PHYSICAL_ADDRESS,
        SkipBytes: PHYSICAL_ADDRESS,
        TotalBytes: SIZE_T,
        CacheType: MEMORY_CACHING_TYPE,
        IdealNode: MM_NODE_NUMBER_ZERO_BASED,
        Flags: ULONG,
        PartitionObject: PVOID,
    ) -> PMDL;
}
extern "C" {
    pub fn MmAllocatePagesForMdlEx(
        LowAddress: PHYSICAL_ADDRESS,
        HighAddress: PHYSICAL_ADDRESS,
        SkipBytes: PHYSICAL_ADDRESS,
        TotalBytes: SIZE_T,
        CacheType: MEMORY_CACHING_TYPE,
        Flags: ULONG,
    ) -> PMDL;
}
extern "C" {
    pub fn MmAllocatePagesForMdl(
        LowAddress: PHYSICAL_ADDRESS,
        HighAddress: PHYSICAL_ADDRESS,
        SkipBytes: PHYSICAL_ADDRESS,
        TotalBytes: SIZE_T,
    ) -> PMDL;
}
extern "C" {
    pub fn MmFreePagesFromMdlEx(MemoryDescriptorList: PMDL, Flags: ULONG);
}
extern "C" {
    pub fn MmFreePagesFromMdl(MemoryDescriptorList: PMDL);
}
extern "C" {
    pub fn MmMapIoSpace(
        PhysicalAddress: PHYSICAL_ADDRESS,
        NumberOfBytes: SIZE_T,
        CacheType: MEMORY_CACHING_TYPE,
    ) -> PVOID;
}
extern "C" {
    pub fn MmUnmapIoSpace(BaseAddress: PVOID, NumberOfBytes: SIZE_T);
}
extern "C" {
    pub fn MmMapIoSpaceEx(
        PhysicalAddress: PHYSICAL_ADDRESS,
        NumberOfBytes: SIZE_T,
        Protect: ULONG,
    ) -> PVOID;
}
extern "C" {
    pub fn MmAllocateContiguousMemory(
        NumberOfBytes: SIZE_T,
        HighestAcceptableAddress: PHYSICAL_ADDRESS,
    ) -> PVOID;
}
extern "C" {
    pub fn MmAllocateContiguousMemorySpecifyCache(
        NumberOfBytes: SIZE_T,
        LowestAcceptableAddress: PHYSICAL_ADDRESS,
        HighestAcceptableAddress: PHYSICAL_ADDRESS,
        BoundaryAddressMultiple: PHYSICAL_ADDRESS,
        CacheType: MEMORY_CACHING_TYPE,
    ) -> PVOID;
}
extern "C" {
    pub fn MmAllocateContiguousMemorySpecifyCacheNode(
        NumberOfBytes: SIZE_T,
        LowestAcceptableAddress: PHYSICAL_ADDRESS,
        HighestAcceptableAddress: PHYSICAL_ADDRESS,
        BoundaryAddressMultiple: PHYSICAL_ADDRESS,
        CacheType: MEMORY_CACHING_TYPE,
        PreferredNode: NODE_REQUIREMENT,
    ) -> PVOID;
}
extern "C" {
    pub fn MmAllocateContiguousNodeMemory(
        NumberOfBytes: SIZE_T,
        LowestAcceptableAddress: PHYSICAL_ADDRESS,
        HighestAcceptableAddress: PHYSICAL_ADDRESS,
        BoundaryAddressMultiple: PHYSICAL_ADDRESS,
        Protect: ULONG,
        PreferredNode: NODE_REQUIREMENT,
    ) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn MmAllocateContiguousMemoryEx(
        NumberOfBytes: PSIZE_T,
        LowestAcceptableAddress: PHYSICAL_ADDRESS,
        HighestAcceptableAddress: PHYSICAL_ADDRESS,
        BoundaryAddressMultiple: PHYSICAL_ADDRESS,
        PreferredNode: NODE_REQUIREMENT,
        Protect: ULONG,
        PartitionObject: PVOID,
        Tag: ULONG,
        Flags: ULONG,
        BaseAddress: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmFreeContiguousMemory(BaseAddress: PVOID);
}
extern "C" {
    pub fn MmFreeContiguousMemorySpecifyCache(
        BaseAddress: PVOID,
        NumberOfBytes: SIZE_T,
        CacheType: MEMORY_CACHING_TYPE,
    );
}
extern "C" {
    pub fn MmSizeOfMdl(Base: PVOID, Length: SIZE_T) -> SIZE_T;
}
extern "C" {
    pub fn MmCreateMdl(MemoryDescriptorList: PMDL, Base: PVOID, Length: SIZE_T) -> PMDL;
}
extern "C" {
    pub fn MmMdlPageContentsState(
        MemoryDescriptorList: PMDL,
        State: MM_MDL_PAGE_CONTENTS_STATE,
    ) -> MM_MDL_PAGE_CONTENTS_STATE;
}
extern "C" {
    pub fn MmLockPagableDataSection(AddressWithinSection: PVOID) -> PVOID;
}
extern "C" {
    pub fn MmResetDriverPaging(AddressWithinSection: PVOID);
}
extern "C" {
    pub fn MmPageEntireDriver(AddressWithinSection: PVOID) -> PVOID;
}
extern "C" {
    pub fn MmUnlockPagableImageSection(ImageSectionHandle: PVOID);
}
extern "C" {
    pub fn MmIsDriverSuspectForVerifier(DriverObject: *mut _DRIVER_OBJECT) -> LOGICAL;
}
extern "C" {
    pub fn MmIsDriverVerifying(DriverObject: *mut _DRIVER_OBJECT) -> LOGICAL;
}
extern "C" {
    pub fn MmIsDriverVerifyingByAddress(AddressWithinSection: PVOID) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn MmProtectDriverSection(
        AddressWithinSection: PVOID,
        Size: SIZE_T,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeCaptureSubjectContext(SubjectContext: PSECURITY_SUBJECT_CONTEXT);
}
extern "C" {
    pub fn SeLockSubjectContext(SubjectContext: PSECURITY_SUBJECT_CONTEXT);
}
extern "C" {
    pub fn SeUnlockSubjectContext(SubjectContext: PSECURITY_SUBJECT_CONTEXT);
}
extern "C" {
    pub fn SeReleaseSubjectContext(SubjectContext: PSECURITY_SUBJECT_CONTEXT);
}
extern "C" {
    #[must_use]
    pub fn SeAssignSecurity(
        ParentDescriptor: PSECURITY_DESCRIPTOR,
        ExplicitDescriptor: PSECURITY_DESCRIPTOR,
        NewDescriptor: *mut PSECURITY_DESCRIPTOR,
        IsDirectoryObject: BOOLEAN,
        SubjectContext: PSECURITY_SUBJECT_CONTEXT,
        GenericMapping: PGENERIC_MAPPING,
        PoolType: POOL_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeComputeAutoInheritByObjectType(
        ObjectType: PVOID,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        ParentSecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn SeAssignSecurityEx(
        ParentDescriptor: PSECURITY_DESCRIPTOR,
        ExplicitDescriptor: PSECURITY_DESCRIPTOR,
        NewDescriptor: *mut PSECURITY_DESCRIPTOR,
        ObjectType: *mut GUID,
        IsDirectoryObject: BOOLEAN,
        AutoInheritFlags: ULONG,
        SubjectContext: PSECURITY_SUBJECT_CONTEXT,
        GenericMapping: PGENERIC_MAPPING,
        PoolType: POOL_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeDeassignSecurity(SecurityDescriptor: *mut PSECURITY_DESCRIPTOR) -> NTSTATUS;
}
extern "C" {
    pub fn SeObjectCreateSaclAccessBits(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> ULONG;
}
extern "C" {
    pub fn SeAccessCheck(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
        SubjectContextLocked: BOOLEAN,
        DesiredAccess: ACCESS_MASK,
        PreviouslyGrantedAccess: ACCESS_MASK,
        Privileges: *mut PPRIVILEGE_SET,
        GenericMapping: PGENERIC_MAPPING,
        AccessMode: KPROCESSOR_MODE,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn SeSetAuditParameter(
        AuditParameters: PSE_ADT_PARAMETER_ARRAY,
        Type: SE_ADT_PARAMETER_TYPE,
        Index: ULONG,
        Data: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeReportSecurityEvent(
        Flags: ULONG,
        SourceName: PUNICODE_STRING,
        UserSid: PSID,
        AuditParameters: PSE_ADT_PARAMETER_ARRAY,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeValidSecurityDescriptor(
        Length: ULONG,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn SeRegisterImageVerificationCallback(
        ImageType: SE_IMAGE_TYPE,
        CallbackType: SE_IMAGE_VERIFICATION_CALLBACK_TYPE,
        CallbackFunction: PSE_IMAGE_VERIFICATION_CALLBACK_FUNCTION,
        CallbackContext: PVOID,
        Token: SE_IMAGE_VERIFICATION_CALLBACK_TOKEN,
        CallbackHandle: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeUnregisterImageVerificationCallback(CallbackHandle: PVOID);
}
extern "C" {
    #[must_use]
    pub fn PsCreateSystemThread(
        ThreadHandle: PHANDLE,
        DesiredAccess: ULONG,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        ProcessHandle: HANDLE,
        ClientId: PCLIENT_ID,
        StartRoutine: PKSTART_ROUTINE,
        StartContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsTerminateSystemThread(ExitStatus: NTSTATUS) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsWrapApcWow64Thread(
        ApcContext: *mut PVOID,
        ApcRoutine: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PsGetVersion(
        MajorVersion: PULONG,
        MinorVersion: PULONG,
        BuildNumber: PULONG,
        CSDVersion: PUNICODE_STRING,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn PsQueryTotalCycleTimeProcess(
        Process: PEPROCESS,
        CycleTimeStamp: PULONG64,
    ) -> ULONG64;
}
extern "C" {
    #[must_use]
    pub fn PsAllocateAffinityToken(AffinityToken: *mut PAFFINITY_TOKEN) -> NTSTATUS;
}
extern "C" {
    pub fn PsFreeAffinityToken(AffinityToken: PAFFINITY_TOKEN);
}
extern "C" {
    #[must_use]
    pub fn PsSetSystemMultipleGroupAffinityThread(
        GroupAffinities: PGROUP_AFFINITY,
        GroupCount: USHORT,
        AffinityToken: PAFFINITY_TOKEN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PsRevertToUserMultipleGroupAffinityThread(AffinityToken: PAFFINITY_TOKEN);
}
extern "C" {
    pub fn IoAcquireCancelSpinLock(Irql: PKIRQL);
}
extern "C" {
    #[must_use]
    pub fn IoAllocateDriverObjectExtension(
        DriverObject: PDRIVER_OBJECT,
        ClientIdentificationAddress: PVOID,
        DriverObjectExtensionSize: ULONG,
        DriverObjectExtension: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoAllocateErrorLogEntry(IoObject: PVOID, EntrySize: UCHAR) -> PVOID;
}
extern "C" {
    pub fn IoAllocateIrp(StackSize: CCHAR, ChargeQuota: BOOLEAN) -> PIRP;
}
extern "C" {
    pub fn IoAllocateIrpEx(
        DeviceObject: PDEVICE_OBJECT,
        StackSize: CCHAR,
        ChargeQuota: BOOLEAN,
    ) -> PIRP;
}
extern "C" {
    pub fn IoAllocateMdl(
        VirtualAddress: PVOID,
        Length: ULONG,
        SecondaryBuffer: BOOLEAN,
        ChargeQuota: BOOLEAN,
        Irp: PIRP,
    ) -> PMDL;
}
extern "C" {
    #[must_use]
    pub fn IoAttachDevice(
        SourceDevice: PDEVICE_OBJECT,
        TargetDevice: PUNICODE_STRING,
        AttachedDevice: *mut PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoAttachDeviceToDeviceStack(
        SourceDevice: PDEVICE_OBJECT,
        TargetDevice: PDEVICE_OBJECT,
    ) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoBuildAsynchronousFsdRequest(
        MajorFunction: ULONG,
        DeviceObject: PDEVICE_OBJECT,
        Buffer: PVOID,
        Length: ULONG,
        StartingOffset: PLARGE_INTEGER,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> PIRP;
}
extern "C" {
    pub fn IoBuildDeviceIoControlRequest(
        IoControlCode: ULONG,
        DeviceObject: PDEVICE_OBJECT,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
        InternalDeviceIoControl: BOOLEAN,
        Event: PKEVENT,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> PIRP;
}
extern "C" {
    pub fn IoBuildPartialMdl(
        SourceMdl: PMDL,
        TargetMdl: PMDL,
        VirtualAddress: PVOID,
        Length: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn IoGetBootDiskInformation(
        BootDiskInformation: PBOOTDISK_INFORMATION,
        Size: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetBootDiskInformationLite(
        BootDiskInformation: *mut PBOOTDISK_INFORMATION_LITE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoBuildSynchronousFsdRequest(
        MajorFunction: ULONG,
        DeviceObject: PDEVICE_OBJECT,
        Buffer: PVOID,
        Length: ULONG,
        StartingOffset: PLARGE_INTEGER,
        Event: PKEVENT,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> PIRP;
}
extern "C" {
    #[must_use]
    pub fn IofCallDriver(DeviceObject: PDEVICE_OBJECT, Irp: PIRP) -> NTSTATUS;
}
extern "C" {
    pub fn IoCancelIrp(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoCheckShareAccess(
        DesiredAccess: ACCESS_MASK,
        DesiredShareAccess: ULONG,
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        Update: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCheckShareAccessEx(
        DesiredAccess: ACCESS_MASK,
        DesiredShareAccess: ULONG,
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        Update: BOOLEAN,
        WritePermission: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCheckLinkShareAccess(
        DesiredAccess: ACCESS_MASK,
        DesiredShareAccess: ULONG,
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        LinkShareAccess: PLINK_SHARE_ACCESS,
        IoShareAccessFlags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IofCompleteRequest(Irp: PIRP, PriorityBoost: CCHAR);
}
extern "C" {
    #[must_use]
    pub fn IoConnectInterrupt(
        InterruptObject: *mut PKINTERRUPT,
        ServiceRoutine: PKSERVICE_ROUTINE,
        ServiceContext: PVOID,
        SpinLock: PKSPIN_LOCK,
        Vector: ULONG,
        Irql: KIRQL,
        SynchronizeIrql: KIRQL,
        InterruptMode: KINTERRUPT_MODE,
        ShareVector: BOOLEAN,
        ProcessorEnableMask: KAFFINITY,
        FloatingSave: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoConnectInterruptEx(
        Parameters: PIO_CONNECT_INTERRUPT_PARAMETERS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCreateDevice(
        DriverObject: PDRIVER_OBJECT,
        DeviceExtensionSize: ULONG,
        DeviceName: PUNICODE_STRING,
        DeviceType: ULONG,
        DeviceCharacteristics: ULONG,
        Exclusive: BOOLEAN,
        DeviceObject: *mut PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoIsWdmVersionAvailable(MajorVersion: UCHAR, MinorVersion: UCHAR) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoCreateFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        AllocationSize: PLARGE_INTEGER,
        FileAttributes: ULONG,
        ShareAccess: ULONG,
        Disposition: ULONG,
        CreateOptions: ULONG,
        EaBuffer: PVOID,
        EaLength: ULONG,
        CreateFileType: CREATE_FILE_TYPE,
        InternalParameters: PVOID,
        Options: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCreateNotificationEvent(
        EventName: PUNICODE_STRING,
        EventHandle: PHANDLE,
    ) -> PKEVENT;
}
extern "C" {
    #[must_use]
    pub fn IoCreateSymbolicLink(
        SymbolicLinkName: PUNICODE_STRING,
        DeviceName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCreateSynchronizationEvent(
        EventName: PUNICODE_STRING,
        EventHandle: PHANDLE,
    ) -> PKEVENT;
}
extern "C" {
    #[must_use]
    pub fn IoCreateUnprotectedSymbolicLink(
        SymbolicLinkName: PUNICODE_STRING,
        DeviceName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoDeleteDevice(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn IoDeleteSymbolicLink(SymbolicLinkName: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    pub fn IoDetachDevice(TargetDevice: PDEVICE_OBJECT);
}
extern "C" {
    pub fn IoDisconnectInterrupt(InterruptObject: PKINTERRUPT);
}
extern "C" {
    pub fn IoDisconnectInterruptEx(Parameters: PIO_DISCONNECT_INTERRUPT_PARAMETERS);
}
extern "C" {
    pub fn IoReportInterruptActive(
        Parameters: PIO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS,
    );
}
extern "C" {
    pub fn IoReportInterruptInactive(
        Parameters: PIO_REPORT_INTERRUPT_ACTIVE_STATE_PARAMETERS,
    );
}
extern "C" {
    #[must_use]
    pub fn IoGetAffinityInterrupt(
        InterruptObject: PKINTERRUPT,
        GroupAffinity: PGROUP_AFFINITY,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoFreeIrp(Irp: PIRP);
}
extern "C" {
    pub fn IoFreeMdl(Mdl: PMDL);
}
extern "C" {
    pub fn IoGetAttachedDeviceReference(DeviceObject: PDEVICE_OBJECT) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoGetDriverObjectExtension(
        DriverObject: PDRIVER_OBJECT,
        ClientIdentificationAddress: PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn IoGetCurrentProcess() -> PEPROCESS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceObjectPointer(
        ObjectName: PUNICODE_STRING,
        DesiredAccess: ACCESS_MASK,
        FileObject: *mut PFILE_OBJECT,
        DeviceObject: *mut PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetDmaAdapter(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        DeviceDescription: *mut _DEVICE_DESCRIPTION,
        NumberOfMapRegisters: PULONG,
    ) -> *mut _DMA_ADAPTER;
}
extern "C" {
    #[must_use]
    pub fn IoGetIommuInterface(
        Version: ULONG,
        InterfaceOut: PDMA_IOMMU_INTERFACE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetIommuInterfaceEx(
        Version: ULONG,
        Flags: ULONGLONG,
        InterfaceOut: PDMA_IOMMU_INTERFACE_EX,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoForwardIrpSynchronously(DeviceObject: PDEVICE_OBJECT, Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoSynchronousCallDriver(DeviceObject: PDEVICE_OBJECT, Irp: PIRP) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetInitialStack() -> PVOID;
}
extern "C" {
    pub fn IoGetStackLimits(LowLimit: PULONG_PTR, HighLimit: PULONG_PTR);
}
extern "C" {
    pub fn IoWithinStackLimits(RegionStart: ULONG_PTR, RegionSize: SIZE_T) -> LOGICAL;
}
extern "C" {
    pub fn IoGetRelatedDeviceObject(FileObject: PFILE_OBJECT) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoGetTopLevelIrp() -> PIRP;
}
extern "C" {
    pub fn IoInitializeIrp(Irp: PIRP, PacketSize: USHORT, StackSize: CCHAR);
}
extern "C" {
    pub fn IoCleanupIrp(Irp: PIRP);
}
extern "C" {
    pub fn IoInitializeIrpEx(
        Irp: PIRP,
        DeviceObject: PDEVICE_OBJECT,
        PacketSize: USHORT,
        StackSize: CCHAR,
    );
}
extern "C" {
    #[must_use]
    pub fn IoInitializeTimer(
        DeviceObject: PDEVICE_OBJECT,
        TimerRoutine: PIO_TIMER_ROUTINE,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoReuseIrp(Irp: PIRP, Iostatus: NTSTATUS);
}
extern "C" {
    #[must_use]
    pub fn IoRegisterShutdownNotification(DeviceObject: PDEVICE_OBJECT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRegisterLastChanceShutdownNotification(
        DeviceObject: PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoReleaseCancelSpinLock(Irql: KIRQL);
}
extern "C" {
    pub fn IoRemoveShareAccess(FileObject: PFILE_OBJECT, ShareAccess: PSHARE_ACCESS);
}
extern "C" {
    pub fn IoRemoveLinkShareAccess(
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        LinkShareAccess: PLINK_SHARE_ACCESS,
    );
}
extern "C" {
    pub fn IoRemoveLinkShareAccessEx(
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        LinkShareAccess: PLINK_SHARE_ACCESS,
        IoShareAccessFlags: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn IoSetCompletionRoutineEx(
        DeviceObject: PDEVICE_OBJECT,
        Irp: PIRP,
        CompletionRoutine: PIO_COMPLETION_ROUTINE,
        Context: PVOID,
        InvokeOnSuccess: BOOLEAN,
        InvokeOnError: BOOLEAN,
        InvokeOnCancel: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoSetShareAccess(
        DesiredAccess: ACCESS_MASK,
        DesiredShareAccess: ULONG,
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
    );
}
extern "C" {
    pub fn IoSetShareAccessEx(
        DesiredAccess: ACCESS_MASK,
        DesiredShareAccess: ULONG,
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        WritePermission: PBOOLEAN,
    );
}
extern "C" {
    pub fn IoSetLinkShareAccess(
        DesiredAccess: ACCESS_MASK,
        DesiredShareAccess: ULONG,
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        LinkShareAccess: PLINK_SHARE_ACCESS,
        IoShareAccessFlags: ULONG,
    );
}
extern "C" {
    pub fn IoSetTopLevelIrp(Irp: PIRP);
}
extern "C" {
    pub fn IoInitializeRemoveLockEx(
        Lock: PIO_REMOVE_LOCK,
        AllocateTag: ULONG,
        MaxLockedMinutes: ULONG,
        HighWatermark: ULONG,
        RemlockSize: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn IoAcquireRemoveLockEx(
        RemoveLock: PIO_REMOVE_LOCK,
        Tag: PVOID,
        File: PCSTR,
        Line: ULONG,
        RemlockSize: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoReleaseRemoveLockEx(
        RemoveLock: PIO_REMOVE_LOCK,
        Tag: PVOID,
        RemlockSize: ULONG,
    );
}
extern "C" {
    pub fn IoReleaseRemoveLockAndWaitEx(
        RemoveLock: PIO_REMOVE_LOCK,
        Tag: PVOID,
        RemlockSize: ULONG,
    );
}
extern "C" {
    pub fn IoSizeOfIrpEx(DeviceObject: PDEVICE_OBJECT, StackSize: CCHAR) -> USHORT;
}
extern "C" {
    pub fn IoStartNextPacket(DeviceObject: PDEVICE_OBJECT, Cancelable: BOOLEAN);
}
extern "C" {
    pub fn IoStartNextPacketByKey(
        DeviceObject: PDEVICE_OBJECT,
        Cancelable: BOOLEAN,
        Key: ULONG,
    );
}
extern "C" {
    pub fn IoStartPacket(
        DeviceObject: PDEVICE_OBJECT,
        Irp: PIRP,
        Key: PULONG,
        CancelFunction: PDRIVER_CANCEL,
    );
}
extern "C" {
    pub fn IoSetStartIoAttributes(
        DeviceObject: PDEVICE_OBJECT,
        DeferredStartIo: BOOLEAN,
        NonCancelable: BOOLEAN,
    );
}
extern "C" {
    pub fn IoStartTimer(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn IoStopTimer(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn IoUnregisterShutdownNotification(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn IoUpdateShareAccess(FileObject: PFILE_OBJECT, ShareAccess: PSHARE_ACCESS);
}
extern "C" {
    pub fn IoUpdateLinkShareAccess(
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        LinkShareAccess: PLINK_SHARE_ACCESS,
    );
}
extern "C" {
    pub fn IoUpdateLinkShareAccessEx(
        FileObject: PFILE_OBJECT,
        ShareAccess: PSHARE_ACCESS,
        LinkShareAccess: PLINK_SHARE_ACCESS,
        IoShareAccessFlags: ULONG,
    );
}
extern "C" {
    pub fn IoWriteErrorLogEntry(ElEntry: PVOID);
}
extern "C" {
    #[must_use]
    pub fn IoCreateSystemThread(
        IoObject: PVOID,
        ThreadHandle: PHANDLE,
        DesiredAccess: ULONG,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        ProcessHandle: HANDLE,
        ClientId: PCLIENT_ID,
        StartRoutine: PKSTART_ROUTINE,
        StartContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoAllocateWorkItem(DeviceObject: PDEVICE_OBJECT) -> PIO_WORKITEM;
}
extern "C" {
    pub fn IoFreeWorkItem(IoWorkItem: PIO_WORKITEM);
}
extern "C" {
    pub fn IoQueueWorkItem(
        IoWorkItem: PIO_WORKITEM,
        WorkerRoutine: PIO_WORKITEM_ROUTINE,
        QueueType: WORK_QUEUE_TYPE,
        Context: PVOID,
    );
}
extern "C" {
    pub fn IoQueueWorkItemEx(
        IoWorkItem: PIO_WORKITEM,
        WorkerRoutine: PIO_WORKITEM_ROUTINE_EX,
        QueueType: WORK_QUEUE_TYPE,
        Context: PVOID,
    );
}
extern "C" {
    pub fn IoSizeofWorkItem() -> ULONG;
}
extern "C" {
    pub fn IoInitializeWorkItem(IoObject: PVOID, IoWorkItem: PIO_WORKITEM);
}
extern "C" {
    pub fn IoUninitializeWorkItem(IoWorkItem: PIO_WORKITEM);
}
extern "C" {
    pub fn IoTryQueueWorkItem(
        IoWorkItem: PIO_WORKITEM,
        WorkerRoutine: PIO_WORKITEM_ROUTINE_EX,
        QueueType: WORK_QUEUE_TYPE,
        Context: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoWMIRegistrationControl(
        DeviceObject: PDEVICE_OBJECT,
        Action: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIAllocateInstanceIds(
        Guid: LPCGUID,
        InstanceCount: ULONG,
        FirstInstanceId: *mut ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMISuggestInstanceName(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        SymbolicLinkName: PUNICODE_STRING,
        CombineNames: BOOLEAN,
        SuggestedInstanceName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIWriteEvent(WnodeEventItem: PVOID) -> NTSTATUS;
}
extern "C" {
    pub fn IoWMIDeviceObjectToProviderId(DeviceObject: PDEVICE_OBJECT) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn IoWMIOpenBlock(
        Guid: LPCGUID,
        DesiredAccess: ULONG,
        DataBlockObject: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIQueryAllData(
        DataBlockObject: PVOID,
        InOutBufferSize: PULONG,
        OutBuffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIQueryAllDataMultiple(
        DataBlockObjectList: *mut PVOID,
        ObjectCount: ULONG,
        InOutBufferSize: PULONG,
        OutBuffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIQuerySingleInstance(
        DataBlockObject: PVOID,
        InstanceName: PUNICODE_STRING,
        InOutBufferSize: PULONG,
        OutBuffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIQuerySingleInstanceMultiple(
        DataBlockObjectList: *mut PVOID,
        InstanceNames: PUNICODE_STRING,
        ObjectCount: ULONG,
        InOutBufferSize: PULONG,
        OutBuffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMISetSingleInstance(
        DataBlockObject: PVOID,
        InstanceName: PUNICODE_STRING,
        Version: ULONG,
        ValueBufferSize: ULONG,
        ValueBuffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMISetSingleItem(
        DataBlockObject: PVOID,
        InstanceName: PUNICODE_STRING,
        DataItemId: ULONG,
        Version: ULONG,
        ValueBufferSize: ULONG,
        ValueBuffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIExecuteMethod(
        DataBlockObject: PVOID,
        InstanceName: PUNICODE_STRING,
        MethodId: ULONG,
        InBufferSize: ULONG,
        OutBufferSize: PULONG,
        InOutBuffer: PUCHAR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMISetNotificationCallback(
        Object: PVOID,
        Callback: WMI_NOTIFICATION_CALLBACK,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIHandleToInstanceName(
        DataBlockObject: PVOID,
        FileHandle: HANDLE,
        InstanceName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWMIDeviceObjectToInstanceName(
        DataBlockObject: PVOID,
        DeviceObject: PDEVICE_OBJECT,
        InstanceName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoIs32bitProcess(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    pub fn IoIsInitiator32bitProcess(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    pub fn IoFreeErrorLogEntry(ElEntry: PVOID);
}
extern "C" {
    #[must_use]
    pub fn IoCsqInitialize(
        Csq: PIO_CSQ,
        CsqInsertIrp: PIO_CSQ_INSERT_IRP,
        CsqRemoveIrp: PIO_CSQ_REMOVE_IRP,
        CsqPeekNextIrp: PIO_CSQ_PEEK_NEXT_IRP,
        CsqAcquireLock: PIO_CSQ_ACQUIRE_LOCK,
        CsqReleaseLock: PIO_CSQ_RELEASE_LOCK,
        CsqCompleteCanceledIrp: PIO_CSQ_COMPLETE_CANCELED_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCsqInitializeEx(
        Csq: PIO_CSQ,
        CsqInsertIrp: PIO_CSQ_INSERT_IRP_EX,
        CsqRemoveIrp: PIO_CSQ_REMOVE_IRP,
        CsqPeekNextIrp: PIO_CSQ_PEEK_NEXT_IRP,
        CsqAcquireLock: PIO_CSQ_ACQUIRE_LOCK,
        CsqReleaseLock: PIO_CSQ_RELEASE_LOCK,
        CsqCompleteCanceledIrp: PIO_CSQ_COMPLETE_CANCELED_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCsqInsertIrp(Csq: PIO_CSQ, Irp: PIRP, Context: PIO_CSQ_IRP_CONTEXT);
}
extern "C" {
    #[must_use]
    pub fn IoCsqInsertIrpEx(
        Csq: PIO_CSQ,
        Irp: PIRP,
        Context: PIO_CSQ_IRP_CONTEXT,
        InsertContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCsqRemoveNextIrp(Csq: PIO_CSQ, PeekContext: PVOID) -> PIRP;
}
extern "C" {
    pub fn IoCsqRemoveIrp(Csq: PIO_CSQ, Context: PIO_CSQ_IRP_CONTEXT) -> PIRP;
}
extern "C" {
    #[must_use]
    pub fn IoValidateDeviceIoControlAccess(Irp: PIRP, RequiredAccess: ULONG) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetIoPriorityHint(Irp: PIRP) -> IO_PRIORITY_HINT;
}
extern "C" {
    #[must_use]
    pub fn IoSetIoPriorityHint(Irp: PIRP, PriorityHint: IO_PRIORITY_HINT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoAllocateSfioStreamIdentifier(
        FileObject: PFILE_OBJECT,
        Length: ULONG,
        Signature: PVOID,
        StreamIdentifier: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetSfioStreamIdentifier(
        FileObject: PFILE_OBJECT,
        Signature: PVOID,
    ) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn IoFreeSfioStreamIdentifier(
        FileObject: PFILE_OBJECT,
        Signature: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetIoAttributionHandle(
        Irp: PIRP,
        IoAttributionHandle: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRecordIoAttribution(
        OpaqueHandle: PVOID,
        AttributionInformation: *mut IO_ATTRIBUTION_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetIoAttributionIrp(
        Irp: PIRP,
        AttributionSource: PVOID,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetContainerInformation(
        InformationClass: IO_CONTAINER_INFORMATION_CLASS,
        ContainerObject: PVOID,
        Buffer: PVOID,
        BufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRegisterContainerNotification(
        NotificationClass: IO_CONTAINER_NOTIFICATION_CLASS,
        CallbackFunction: PIO_CONTAINER_NOTIFICATION_FUNCTION,
        NotificationInformation: PVOID,
        NotificationInformationLength: ULONG,
        CallbackRegistration: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoUnregisterContainerNotification(CallbackRegistration: PVOID);
}
extern "C" {
    #[must_use]
    pub fn IoReserveKsrPersistentMemory(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        Size: SIZE_T,
        Flags: ULONG,
        DataHandle: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoFreeKsrPersistentMemory(DataHandle: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoQueryKsrPersistentMemorySize(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        BufferSize: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoAcquireKsrPersistentMemory(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        Buffer: PVOID,
        Size: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWriteKsrPersistentMemory(
        DataHandle: PVOID,
        Buffer: PVOID,
        Size: SIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoEnumerateKsrPersistentMemoryEx(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        PhysicalDeviceId: PUNICODE_STRING,
        Callback: PIO_PERSISTED_MEMORY_ENUMERATION_CALLBACK,
        CallbackContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReserveKsrPersistentMemoryEx(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        PhysicalDeviceId: PUNICODE_STRING,
        DataTag: PUSHORT,
        DataVersion: ULONG,
        Size: SIZE_T,
        Flags: ULONG,
        DataHandle: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoQueryKsrPersistentMemorySizeEx(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        PhysicalDeviceId: PUNICODE_STRING,
        DataTag: PUSHORT,
        DataVersion: PULONG,
        BufferSize: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoAcquireKsrPersistentMemoryEx(
        DriverObject: PDRIVER_OBJECT,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        PhysicalDeviceId: PUNICODE_STRING,
        DataTag: PUSHORT,
        DataVersion: PULONG,
        Buffer: PVOID,
        Size: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WmiQueryTraceInformation(
        TraceInformationClass: TRACE_INFORMATION_CLASS,
        TraceInformation: PVOID,
        TraceInformationLength: ULONG,
        RequiredLength: PULONG,
        Buffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwRegister(
        ProviderId: LPCGUID,
        EnableCallback: PETWENABLECALLBACK,
        CallbackContext: PVOID,
        RegHandle: PREGHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwUnregister(RegHandle: REGHANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwSetInformation(
        RegHandle: REGHANDLE,
        InformationClass: EVENT_INFO_CLASS,
        EventInformation: PVOID,
        InformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn EtwEventEnabled(
        RegHandle: REGHANDLE,
        EventDescriptor: PCEVENT_DESCRIPTOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn EtwProviderEnabled(
        RegHandle: REGHANDLE,
        Level: UCHAR,
        Keyword: ULONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn EtwActivityIdControl(ControlCode: ULONG, ActivityId: LPGUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwWrite(
        RegHandle: REGHANDLE,
        EventDescriptor: PCEVENT_DESCRIPTOR,
        ActivityId: LPCGUID,
        UserDataCount: ULONG,
        UserData: PEVENT_DATA_DESCRIPTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwWriteTransfer(
        RegHandle: REGHANDLE,
        EventDescriptor: PCEVENT_DESCRIPTOR,
        ActivityId: LPCGUID,
        RelatedActivityId: LPCGUID,
        UserDataCount: ULONG,
        UserData: PEVENT_DATA_DESCRIPTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwWriteString(
        RegHandle: REGHANDLE,
        Level: UCHAR,
        Keyword: ULONGLONG,
        ActivityId: LPCGUID,
        String: PCWSTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn EtwWriteEx(
        RegHandle: REGHANDLE,
        EventDescriptor: PCEVENT_DESCRIPTOR,
        Filter: ULONG64,
        Flags: ULONG,
        ActivityId: LPCGUID,
        RelatedActivityId: LPCGUID,
        UserDataCount: ULONG,
        UserData: PEVENT_DATA_DESCRIPTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeEtwWriteKMCveEvent(
        CveId: PCUNICODE_STRING,
        AdditionalDetails: PCUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoInvalidateDeviceRelations(
        DeviceObject: PDEVICE_OBJECT,
        Type: DEVICE_RELATION_TYPE,
    );
}
extern "C" {
    pub fn IoRequestDeviceEject(PhysicalDeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn IoRequestDeviceEjectEx(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        Callback: PIO_DEVICE_EJECT_CALLBACK,
        Context: PVOID,
        DriverObject: PDRIVER_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceProperty(
        DeviceObject: PDEVICE_OBJECT,
        DeviceProperty: DEVICE_REGISTRY_PROPERTY::Type,
        BufferLength: ULONG,
        PropertyBuffer: PVOID,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoOpenDeviceRegistryKey(
        DeviceObject: PDEVICE_OBJECT,
        DevInstKeyType: ULONG,
        DesiredAccess: ACCESS_MASK,
        DeviceRegKey: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRegisterDeviceInterface(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        InterfaceClassGuid: *const GUID,
        ReferenceString: PUNICODE_STRING,
        SymbolicLinkName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoOpenDeviceInterfaceRegistryKey(
        SymbolicLinkName: PUNICODE_STRING,
        DesiredAccess: ACCESS_MASK,
        DeviceInterfaceRegKey: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetDeviceInterfaceState(
        SymbolicLinkName: PUNICODE_STRING,
        Enable: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceInterfaces(
        InterfaceClassGuid: *const GUID,
        PhysicalDeviceObject: PDEVICE_OBJECT,
        Flags: ULONG,
        SymbolicLinkList: *mut PZZWSTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceInterfaceAlias(
        SymbolicLinkName: PUNICODE_STRING,
        AliasInterfaceClassGuid: *const GUID,
        AliasSymbolicLinkName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRegisterPlugPlayNotification(
        EventCategory: IO_NOTIFICATION_EVENT_CATEGORY,
        EventCategoryFlags: ULONG,
        EventCategoryData: PVOID,
        DriverObject: PDRIVER_OBJECT,
        CallbackRoutine: PDRIVER_NOTIFICATION_CALLBACK_ROUTINE,
        Context: PVOID,
        NotificationEntry: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoUnregisterPlugPlayNotification(NotificationEntry: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoUnregisterPlugPlayNotificationEx(NotificationEntry: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReportTargetDeviceChange(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        NotificationStructure: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoInvalidateDeviceState(PhysicalDeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn IoReportTargetDeviceChangeAsynchronous(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        NotificationStructure: PVOID,
        Callback: PDEVICE_CHANGE_COMPLETE_CALLBACK,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDriverDirectory(
        DriverObject: PDRIVER_OBJECT,
        DirectoryType: DRIVER_DIRECTORY_TYPE,
        Flags: ULONG,
        DriverDirectoryHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceDirectory(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        DirectoryType: DEVICE_DIRECTORY_TYPE,
        Flags: ULONG,
        Reserved: PVOID,
        DeviceDirectoryHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoOpenDriverRegistryKey(
        DriverObject: PDRIVER_OBJECT,
        RegKeyType: DRIVER_REGKEY_TYPE,
        DesiredAccess: ACCESS_MASK,
        Flags: ULONG,
        DriverRegKey: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetDevicePropertyData(
        Pdo: PDEVICE_OBJECT,
        PropertyKey: *const DEVPROPKEY,
        Lcid: LCID,
        Flags: ULONG,
        Type: DEVPROPTYPE,
        Size: ULONG,
        Data: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDevicePropertyData(
        Pdo: PDEVICE_OBJECT,
        PropertyKey: *const DEVPROPKEY,
        Lcid: LCID,
        Flags: ULONG,
        Size: ULONG,
        Data: PVOID,
        RequiredSize: PULONG,
        Type: PDEVPROPTYPE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetDeviceInterfacePropertyData(
        SymbolicLinkName: PUNICODE_STRING,
        PropertyKey: *const DEVPROPKEY,
        Lcid: LCID,
        Flags: ULONG,
        Type: DEVPROPTYPE,
        Size: ULONG,
        Data: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceInterfacePropertyData(
        SymbolicLinkName: PUNICODE_STRING,
        PropertyKey: *const DEVPROPKEY,
        Lcid: LCID,
        Flags: ULONG,
        Size: ULONG,
        Data: PVOID,
        RequiredSize: PULONG,
        Type: PDEVPROPTYPE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetDeviceNumaNode(Pdo: PDEVICE_OBJECT, NodeNumber: PUSHORT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReplacePartitionUnit(
        TargetPdo: PDEVICE_OBJECT,
        SparePdo: PDEVICE_OBJECT,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeFlushWriteBuffer();
}
extern "C" {
    pub fn KeQueryPerformanceCounter(
        PerformanceFrequency: PLARGE_INTEGER,
    ) -> LARGE_INTEGER;
}
extern "C" {
    pub fn KeStallExecutionProcessor(MicroSeconds: ULONG);
}
extern "C" {
    pub fn PoSetHiberRange(
        MemoryMap: PVOID,
        Flags: ULONG,
        Address: PVOID,
        Length: ULONG_PTR,
        Tag: ULONG,
    );
}
extern "C" {
    pub fn PoSetSystemState(Flags: EXECUTION_STATE);
}
extern "C" {
    pub fn PoRegisterSystemState(StateHandle: PVOID, Flags: EXECUTION_STATE) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn PoCreatePowerRequest(
        PowerRequest: *mut PVOID,
        DeviceObject: PDEVICE_OBJECT,
        Context: PCOUNTED_REASON_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoSetPowerRequest(PowerRequest: PVOID, Type: POWER_REQUEST_TYPE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoClearPowerRequest(
        PowerRequest: PVOID,
        Type: POWER_REQUEST_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoDeletePowerRequest(PowerRequest: PVOID);
}
extern "C" {
    #[must_use]
    pub fn PoRequestPowerIrp(
        DeviceObject: PDEVICE_OBJECT,
        MinorFunction: UCHAR,
        PowerState: POWER_STATE,
        CompletionFunction: PREQUEST_POWER_COMPLETE,
        Context: PVOID,
        Irp: *mut PIRP,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoSetSystemWake(Irp: PIRP);
}
extern "C" {
    pub fn PoSetSystemWakeDevice(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn PoGetSystemWake(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    pub fn PoUnregisterSystemState(StateHandle: PVOID);
}
extern "C" {
    pub fn PoSetPowerState(
        DeviceObject: PDEVICE_OBJECT,
        Type: POWER_STATE_TYPE,
        State: POWER_STATE,
    ) -> POWER_STATE;
}
extern "C" {
    #[must_use]
    pub fn PoCallDriver(DeviceObject: PDEVICE_OBJECT, Irp: PIRP) -> NTSTATUS;
}
extern "C" {
    pub fn PoStartNextPowerIrp(Irp: PIRP);
}
extern "C" {
    pub fn PoRegisterDeviceForIdleDetection(
        DeviceObject: PDEVICE_OBJECT,
        ConservationIdleTime: ULONG,
        PerformanceIdleTime: ULONG,
        State: DEVICE_POWER_STATE,
    ) -> PULONG;
}
extern "C" {
    pub fn PoSetDeviceBusyEx(IdlePointer: PULONG);
}
extern "C" {
    pub fn PoStartDeviceBusy(IdlePointer: PULONG);
}
extern "C" {
    pub fn PoEndDeviceBusy(IdlePointer: PULONG);
}
extern "C" {
    pub fn PoQueryWatchdogTime(Pdo: PDEVICE_OBJECT, SecondsRemaining: PULONG) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PoRegisterPowerSettingCallback(
        DeviceObject: PDEVICE_OBJECT,
        SettingGuid: LPCGUID,
        Callback: PPOWER_SETTING_CALLBACK,
        Context: PVOID,
        Handle: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoUnregisterPowerSettingCallback(Handle: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoFxRegisterDevice(
        Pdo: PDEVICE_OBJECT,
        Device: PPO_FX_DEVICE,
        Handle: *mut POHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoFxStartDevicePowerManagement(Handle: POHANDLE);
}
extern "C" {
    pub fn PoFxUnregisterDevice(Handle: POHANDLE);
}
extern "C" {
    #[must_use]
    pub fn PoFxRegisterCrashdumpDevice(Handle: POHANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoFxPowerOnCrashdumpDevice(Handle: POHANDLE, Context: PVOID) -> NTSTATUS;
}
extern "C" {
    pub fn PoFxActivateComponent(Handle: POHANDLE, Component: ULONG, Flags: ULONG);
}
extern "C" {
    pub fn PoFxCompleteDevicePowerNotRequired(Handle: POHANDLE);
}
extern "C" {
    pub fn PoFxCompleteIdleCondition(Handle: POHANDLE, Component: ULONG);
}
extern "C" {
    pub fn PoFxCompleteIdleState(Handle: POHANDLE, Component: ULONG);
}
extern "C" {
    pub fn PoFxIdleComponent(Handle: POHANDLE, Component: ULONG, Flags: ULONG);
}
extern "C" {
    pub fn PoFxSetComponentLatency(
        Handle: POHANDLE,
        Component: ULONG,
        Latency: ULONGLONG,
    );
}
extern "C" {
    pub fn PoFxSetComponentResidency(
        Handle: POHANDLE,
        Component: ULONG,
        Residency: ULONGLONG,
    );
}
extern "C" {
    pub fn PoFxSetComponentWake(Handle: POHANDLE, Component: ULONG, WakeHint: BOOLEAN);
}
extern "C" {
    pub fn PoFxSetDeviceIdleTimeout(Handle: POHANDLE, IdleTimeout: ULONGLONG);
}
extern "C" {
    pub fn PoFxReportDevicePoweredOn(Handle: POHANDLE);
}
extern "C" {
    #[must_use]
    pub fn PoFxPowerControl(
        Handle: POHANDLE,
        PowerControlCode: LPCGUID,
        InBuffer: PVOID,
        InBufferSize: SIZE_T,
        OutBuffer: PVOID,
        OutBufferSize: SIZE_T,
        BytesReturned: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoFxNotifySurprisePowerOn(Pdo: PDEVICE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn PoFxRegisterComponentPerfStates(
        Handle: POHANDLE,
        Component: ULONG,
        Flags: ULONGLONG,
        ComponentPerfStateCallback: PPO_FX_COMPONENT_PERF_STATE_CALLBACK,
        InputStateInfo: PPO_FX_COMPONENT_PERF_INFO,
        OutputStateInfo: *mut PPO_FX_COMPONENT_PERF_INFO,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoFxIssueComponentPerfStateChange(
        Handle: POHANDLE,
        Flags: ULONG,
        Component: ULONG,
        PerfChange: PPO_FX_PERF_STATE_CHANGE,
        Context: PVOID,
    );
}
extern "C" {
    pub fn PoFxIssueComponentPerfStateChangeMultiple(
        Handle: POHANDLE,
        Flags: ULONG,
        Component: ULONG,
        PerfChangesCount: ULONG,
        PerfChanges: *mut PO_FX_PERF_STATE_CHANGE,
        Context: PVOID,
    );
}
extern "C" {
    #[must_use]
    pub fn PoFxQueryCurrentComponentPerfState(
        Handle: POHANDLE,
        Flags: ULONG,
        Component: ULONG,
        SetIndex: ULONG,
        CurrentPerf: PULONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoFxSetTargetDripsDevicePowerState(
        Handle: POHANDLE,
        TargetState: DEVICE_POWER_STATE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoFxCompleteDirectedPowerDown(Handle: POHANDLE);
}
extern "C" {
    #[must_use]
    pub fn PoCreateThermalRequest(
        ThermalRequest: *mut PVOID,
        TargetDeviceObject: PDEVICE_OBJECT,
        PolicyDeviceObject: PDEVICE_OBJECT,
        Context: PCOUNTED_REASON_CONTEXT,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoGetThermalRequestSupport(
        ThermalRequest: PVOID,
        Type: PO_THERMAL_REQUEST_TYPE,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PoSetThermalPassiveCooling(
        ThermalRequest: PVOID,
        Throttle: UCHAR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoSetThermalActiveCooling(
        ThermalRequest: PVOID,
        Engaged: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PoDeleteThermalRequest(ThermalRequest: PVOID);
}
extern "C" {
    pub fn PoFxRegisterDripsWatchdogCallback(
        Handle: POHANDLE,
        Callback: PPO_FX_DRIPS_WATCHDOG_CALLBACK,
        IncludeChildDevices: BOOLEAN,
        MatchingDriverObject: PDRIVER_OBJECT,
    );
}
extern "C" {
    #[must_use]
    pub fn ObReferenceObjectByHandle(
        Handle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectType: POBJECT_TYPE,
        AccessMode: KPROCESSOR_MODE,
        Object: *mut PVOID,
        HandleInformation: POBJECT_HANDLE_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ObReferenceObjectByHandleWithTag(
        Handle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectType: POBJECT_TYPE,
        AccessMode: KPROCESSOR_MODE,
        Tag: ULONG,
        Object: *mut PVOID,
        HandleInformation: POBJECT_HANDLE_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ObReferenceObjectSafe(Object: PVOID) -> BOOLEAN;
}
extern "C" {
    pub fn ObReferenceObjectSafeWithTag(Object: PVOID, Tag: ULONG) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn ObCloseHandle(Handle: HANDLE, PreviousMode: KPROCESSOR_MODE) -> NTSTATUS;
}
extern "C" {
    pub fn ObfReferenceObject(Object: PVOID) -> LONG_PTR;
}
extern "C" {
    pub fn ObfReferenceObjectWithTag(Object: PVOID, Tag: ULONG) -> LONG_PTR;
}
extern "C" {
    #[must_use]
    pub fn ObReferenceObjectByPointer(
        Object: PVOID,
        DesiredAccess: ACCESS_MASK,
        ObjectType: POBJECT_TYPE,
        AccessMode: KPROCESSOR_MODE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ObReferenceObjectByPointerWithTag(
        Object: PVOID,
        DesiredAccess: ACCESS_MASK,
        ObjectType: POBJECT_TYPE,
        AccessMode: KPROCESSOR_MODE,
        Tag: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ObfDereferenceObject(Object: PVOID) -> LONG_PTR;
}
extern "C" {
    pub fn ObfDereferenceObjectWithTag(Object: PVOID, Tag: ULONG) -> LONG_PTR;
}
extern "C" {
    pub fn ObDereferenceObjectDeferDelete(Object: PVOID);
}
extern "C" {
    pub fn ObDereferenceObjectDeferDeleteWithTag(Object: PVOID, Tag: ULONG);
}
extern "C" {
    #[must_use]
    pub fn ObGetObjectSecurity(
        Object: PVOID,
        SecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        MemoryAllocated: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ObReleaseObjectSecurity(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        MemoryAllocated: BOOLEAN,
    );
}
extern "C" {
    #[must_use]
    pub fn ObRegisterCallbacks(
        CallbackRegistration: POB_CALLBACK_REGISTRATION,
        RegistrationHandle: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ObUnRegisterCallbacks(RegistrationHandle: PVOID);
}
extern "C" {
    pub fn ObGetFilterVersion() -> USHORT;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        AllocationSize: PLARGE_INTEGER,
        FileAttributes: ULONG,
        ShareAccess: ULONG,
        CreateDisposition: ULONG,
        CreateOptions: ULONG,
        EaBuffer: PVOID,
        EaLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ShareAccess: ULONG,
        OpenOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwLoadDriver(DriverServiceName: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwUnloadDriver(DriverServiceName: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwReadFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ByteOffset: PLARGE_INTEGER,
        Key: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwWriteFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ByteOffset: PLARGE_INTEGER,
        Key: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwClose(Handle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateDirectoryObject(
        DirectoryHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwMakeTemporaryObject(Handle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateSection(
        SectionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        MaximumSize: PLARGE_INTEGER,
        SectionPageProtection: ULONG,
        AllocationAttributes: ULONG,
        FileHandle: HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenSection(
        SectionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwMapViewOfSection(
        SectionHandle: HANDLE,
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        ZeroBits: ULONG_PTR,
        CommitSize: SIZE_T,
        SectionOffset: PLARGE_INTEGER,
        ViewSize: PSIZE_T,
        InheritDisposition: SECTION_INHERIT,
        AllocationType: ULONG,
        Win32Protect: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwUnmapViewOfSection(ProcessHandle: HANDLE, BaseAddress: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateKey(
        KeyHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        TitleIndex: ULONG,
        Class: PUNICODE_STRING,
        CreateOptions: ULONG,
        Disposition: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateKeyTransacted(
        KeyHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        TitleIndex: ULONG,
        Class: PUNICODE_STRING,
        CreateOptions: ULONG,
        TransactionHandle: HANDLE,
        Disposition: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateRegistryTransaction(
        TransactionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        CreateOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenRegistryTransaction(
        TransactionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCommitRegistryTransaction(
        TransactionHandle: HANDLE,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtRollbackRegistryTransaction(
        TransactionHandle: HANDLE,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenKey(
        KeyHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenKeyEx(
        KeyHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        OpenOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenKeyTransacted(
        KeyHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        TransactionHandle: HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenKeyTransactedEx(
        KeyHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        OpenOptions: ULONG,
        TransactionHandle: HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDeleteKey(KeyHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDeleteValueKey(KeyHandle: HANDLE, ValueName: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwEnumerateKey(
        KeyHandle: HANDLE,
        Index: ULONG,
        KeyInformationClass: KEY_INFORMATION_CLASS,
        KeyInformation: PVOID,
        Length: ULONG,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwEnumerateValueKey(
        KeyHandle: HANDLE,
        Index: ULONG,
        KeyValueInformationClass: KEY_VALUE_INFORMATION_CLASS,
        KeyValueInformation: PVOID,
        Length: ULONG,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwFlushKey(KeyHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryKey(
        KeyHandle: HANDLE,
        KeyInformationClass: KEY_INFORMATION_CLASS,
        KeyInformation: PVOID,
        Length: ULONG,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryValueKey(
        KeyHandle: HANDLE,
        ValueName: PUNICODE_STRING,
        KeyValueInformationClass: KEY_VALUE_INFORMATION_CLASS,
        KeyValueInformation: PVOID,
        Length: ULONG,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRenameKey(KeyHandle: HANDLE, NewName: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSaveKey(KeyHandle: HANDLE, FileHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSaveKeyEx(KeyHandle: HANDLE, FileHandle: HANDLE, Format: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRestoreKey(KeyHandle: HANDLE, FileHandle: HANDLE, Flags: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationKey(
        KeyHandle: HANDLE,
        KeySetInformationClass: KEY_SET_INFORMATION_CLASS,
        KeySetInformation: PVOID,
        KeySetInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetValueKey(
        KeyHandle: HANDLE,
        ValueName: PUNICODE_STRING,
        TitleIndex: ULONG,
        Type: ULONG,
        Data: PVOID,
        DataSize: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenSymbolicLinkObject(
        LinkHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQuerySymbolicLinkObject(
        LinkHandle: HANDLE,
        LinkTarget: PUNICODE_STRING,
        ReturnedLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateTransactionManager(
        TmHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        LogFileName: PUNICODE_STRING,
        CreateOptions: ULONG,
        CommitStrength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenTransactionManager(
        TmHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        LogFileName: PUNICODE_STRING,
        TmIdentity: LPGUID,
        OpenOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRollforwardTransactionManager(
        TransactionManagerHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRecoverTransactionManager(TransactionManagerHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationTransactionManager(
        TransactionManagerHandle: HANDLE,
        TransactionManagerInformationClass: TRANSACTIONMANAGER_INFORMATION_CLASS,
        TransactionManagerInformation: PVOID,
        TransactionManagerInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationTransactionManager(
        TmHandle: HANDLE,
        TransactionManagerInformationClass: TRANSACTIONMANAGER_INFORMATION_CLASS,
        TransactionManagerInformation: PVOID,
        TransactionManagerInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwEnumerateTransactionObject(
        RootObjectHandle: HANDLE,
        QueryType: KTMOBJECT_TYPE,
        ObjectCursor: PKTMOBJECT_CURSOR,
        ObjectCursorLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateTransaction(
        TransactionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        Uow: LPGUID,
        TmHandle: HANDLE,
        CreateOptions: ULONG,
        IsolationLevel: ULONG,
        IsolationFlags: ULONG,
        Timeout: PLARGE_INTEGER,
        Description: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenTransaction(
        TransactionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        Uow: LPGUID,
        TmHandle: HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationTransaction(
        TransactionHandle: HANDLE,
        TransactionInformationClass: TRANSACTION_INFORMATION_CLASS,
        TransactionInformation: PVOID,
        TransactionInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationTransaction(
        TransactionHandle: HANDLE,
        TransactionInformationClass: TRANSACTION_INFORMATION_CLASS,
        TransactionInformation: PVOID,
        TransactionInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCommitTransaction(TransactionHandle: HANDLE, Wait: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRollbackTransaction(TransactionHandle: HANDLE, Wait: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateResourceManager(
        ResourceManagerHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        TmHandle: HANDLE,
        ResourceManagerGuid: LPGUID,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        CreateOptions: ULONG,
        Description: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenResourceManager(
        ResourceManagerHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        TmHandle: HANDLE,
        ResourceManagerGuid: LPGUID,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRecoverResourceManager(ResourceManagerHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwGetNotificationResourceManager(
        ResourceManagerHandle: HANDLE,
        TransactionNotification: PTRANSACTION_NOTIFICATION,
        NotificationLength: ULONG,
        Timeout: PLARGE_INTEGER,
        ReturnLength: PULONG,
        Asynchronous: ULONG,
        AsynchronousContext: ULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationResourceManager(
        ResourceManagerHandle: HANDLE,
        ResourceManagerInformationClass: RESOURCEMANAGER_INFORMATION_CLASS,
        ResourceManagerInformation: PVOID,
        ResourceManagerInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationResourceManager(
        ResourceManagerHandle: HANDLE,
        ResourceManagerInformationClass: RESOURCEMANAGER_INFORMATION_CLASS,
        ResourceManagerInformation: PVOID,
        ResourceManagerInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateEnlistment(
        EnlistmentHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ResourceManagerHandle: HANDLE,
        TransactionHandle: HANDLE,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        CreateOptions: ULONG,
        NotificationMask: NOTIFICATION_MASK,
        EnlistmentKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenEnlistment(
        EnlistmentHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        RmHandle: HANDLE,
        EnlistmentGuid: LPGUID,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationEnlistment(
        EnlistmentHandle: HANDLE,
        EnlistmentInformationClass: ENLISTMENT_INFORMATION_CLASS,
        EnlistmentInformation: PVOID,
        EnlistmentInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationEnlistment(
        EnlistmentHandle: HANDLE,
        EnlistmentInformationClass: ENLISTMENT_INFORMATION_CLASS,
        EnlistmentInformation: PVOID,
        EnlistmentInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRecoverEnlistment(
        EnlistmentHandle: HANDLE,
        EnlistmentKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwPrePrepareEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwPrepareEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCommitEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRollbackEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwPrePrepareComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwPrepareComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCommitComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwReadOnlyEnlistment(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwRollbackComplete(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSinglePhaseReject(
        EnlistmentHandle: HANDLE,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenEvent(
        EventHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationByName(
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryFullAttributesFile(
        ObjectAttributes: POBJECT_ATTRIBUTES,
        FileInformation: PFILE_NETWORK_OPEN_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ClfsLsnEqual(plsn1: *const CLFS_LSN, plsn2: *const CLFS_LSN) -> BOOLEAN;
}
extern "C" {
    pub fn ClfsLsnLess(plsn1: *const CLFS_LSN, plsn2: *const CLFS_LSN) -> BOOLEAN;
}
extern "C" {
    pub fn ClfsLsnGreater(plsn1: *const CLFS_LSN, plsn2: *const CLFS_LSN) -> BOOLEAN;
}
extern "C" {
    pub fn ClfsLsnNull(plsn: *const CLFS_LSN) -> BOOLEAN;
}
extern "C" {
    pub fn ClfsLsnContainer(plsn: *const CLFS_LSN) -> CLFS_CONTAINER_ID;
}
extern "C" {
    pub fn ClfsLsnCreate(
        cidContainer: CLFS_CONTAINER_ID,
        offBlock: ULONG,
        cRecord: ULONG,
    ) -> CLFS_LSN;
}
extern "C" {
    pub fn ClfsLsnBlockOffset(plsn: *const CLFS_LSN) -> ULONG;
}
extern "C" {
    pub fn ClfsLsnRecordSequence(plsn: *const CLFS_LSN) -> ULONG;
}
extern "C" {
    pub fn ClfsLsnInvalid(plsn: *const CLFS_LSN) -> BOOLEAN;
}
extern "C" {
    pub fn ClfsLsnIncrement(plsn: PCLFS_LSN) -> CLFS_LSN;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtRegisterManagedClient(
        LogFile: PLOG_FILE_OBJECT,
        RegistrationData: PCLFS_MGMT_CLIENT_REGISTRATION,
        ClientCookie: PCLFS_MGMT_CLIENT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtDeregisterManagedClient(ClientCookie: CLFS_MGMT_CLIENT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtTailAdvanceFailure(
        Client: CLFS_MGMT_CLIENT,
        Reason: NTSTATUS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtHandleLogFileFull(Client: CLFS_MGMT_CLIENT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtInstallPolicy(
        LogFile: PLOG_FILE_OBJECT,
        Policy: PCLFS_MGMT_POLICY,
        PolicyLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtQueryPolicy(
        LogFile: PLOG_FILE_OBJECT,
        PolicyType: CLFS_MGMT_POLICY_TYPE,
        Policy: PCLFS_MGMT_POLICY,
        PolicyLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtRemovePolicy(
        LogFile: PLOG_FILE_OBJECT,
        PolicyType: CLFS_MGMT_POLICY_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtSetLogFileSize(
        LogFile: PLOG_FILE_OBJECT,
        NewSizeInContainers: PULONGLONG,
        ResultingSizeInContainers: PULONGLONG,
        CompletionRoutine: PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK,
        CompletionRoutineData: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsMgmtSetLogFileSizeAsClient(
        LogFile: PLOG_FILE_OBJECT,
        ClientCookie: PCLFS_MGMT_CLIENT,
        NewSizeInContainers: PULONGLONG,
        ResultingSizeInContainers: PULONGLONG,
        CompletionRoutine: PCLFS_SET_LOG_SIZE_COMPLETE_CALLBACK,
        CompletionRoutineData: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsInitialize() -> NTSTATUS;
}
extern "C" {
    pub fn ClfsFinalize();
}
extern "C" {
    #[must_use]
    pub fn ClfsCreateLogFile(
        pplfoLog: PPLOG_FILE_OBJECT,
        puszLogFileName: PUNICODE_STRING,
        fDesiredAccess: ACCESS_MASK,
        dwShareMode: ULONG,
        psdLogFile: PSECURITY_DESCRIPTOR,
        fCreateDisposition: ULONG,
        fCreateOptions: ULONG,
        fFlagsAndAttributes: ULONG,
        fLogOptionFlag: ULONG,
        pvContext: PVOID,
        cbContext: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsDeleteLogByPointer(plfoLog: PLOG_FILE_OBJECT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsDeleteLogFile(
        puszLogFileName: PUNICODE_STRING,
        pvReserved: PVOID,
        fLogOptionFlag: ULONG,
        pvContext: PVOID,
        cbContext: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsAddLogContainer(
        plfoLog: PLOG_FILE_OBJECT,
        pcbContainer: PULONGLONG,
        puszContainerPath: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsAddLogContainerSet(
        plfoLog: PLOG_FILE_OBJECT,
        cContainers: USHORT,
        pcbContainer: PULONGLONG,
        rguszContainerPath: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsRemoveLogContainer(
        plfoLog: PLOG_FILE_OBJECT,
        puszContainerPath: PUNICODE_STRING,
        fForce: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsRemoveLogContainerSet(
        plfoLog: PLOG_FILE_OBJECT,
        cContainers: USHORT,
        rgwszContainerPath: PUNICODE_STRING,
        fForce: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsSetArchiveTail(
        plfoLog: PLOG_FILE_OBJECT,
        plsnArchiveTail: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsSetEndOfLog(plfoLog: PLOG_FILE_OBJECT, plsnEnd: PCLFS_LSN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsCreateScanContext(
        plfoLog: PLOG_FILE_OBJECT,
        cFromContainer: ULONG,
        cContainers: ULONG,
        eScanMode: CLFS_SCAN_MODE,
        pcxScan: PCLFS_SCAN_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsScanLogContainers(
        pcxScan: PCLFS_SCAN_CONTEXT,
        eScanMode: CLFS_SCAN_MODE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsGetContainerName(
        plfoLog: PLOG_FILE_OBJECT,
        cidLogicalContainer: CLFS_CONTAINER_ID,
        puszContainerName: PUNICODE_STRING,
        pcActualLenContainerName: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsGetLogFileInformation(
        plfoLog: PLOG_FILE_OBJECT,
        pinfoBuffer: PCLFS_INFORMATION,
        pcbInfoBuffer: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsQueryLogFileInformation(
        plfoLog: PLOG_FILE_OBJECT,
        eInformationClass: CLFS_LOG_INFORMATION_CLASS,
        pinfoInputBuffer: PVOID,
        cbinfoInputBuffer: ULONG,
        pinfoBuffer: PVOID,
        pcbInfoBuffer: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsSetLogFileInformation(
        plfoLog: PLOG_FILE_OBJECT,
        eInformationClass: CLFS_LOG_INFORMATION_CLASS,
        pinfoBuffer: PVOID,
        cbBuffer: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsReadRestartArea(
        pvMarshalContext: PVOID,
        ppvRestartBuffer: *mut PVOID,
        pcbRestartBuffer: PULONG,
        plsn: PCLFS_LSN,
        ppvReadContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsReadPreviousRestartArea(
        pvReadContext: PVOID,
        ppvRestartBuffer: *mut PVOID,
        pcbRestartBuffer: PULONG,
        plsnRestart: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsWriteRestartArea(
        pvMarshalContext: PVOID,
        pvRestartBuffer: PVOID,
        cbRestartBuffer: ULONG,
        plsnBase: PCLFS_LSN,
        fFlags: ULONG,
        pcbWritten: PULONG,
        plsnNext: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsAdvanceLogBase(
        pvMarshalContext: PVOID,
        plsnBase: PCLFS_LSN,
        fFlags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsCloseAndResetLogFile(plfoLog: PLOG_FILE_OBJECT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsCloseLogFileObject(plfoLog: PLOG_FILE_OBJECT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsCreateMarshallingArea(
        plfoLog: PLOG_FILE_OBJECT,
        ePoolType: POOL_TYPE,
        pfnAllocBuffer: PALLOCATE_FUNCTION,
        pfnFreeBuffer: PFREE_FUNCTION,
        cbMarshallingBuffer: ULONG,
        cMaxWriteBuffers: ULONG,
        cMaxReadBuffers: ULONG,
        ppvMarshalContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsCreateMarshallingAreaEx(
        plfoLog: PLOG_FILE_OBJECT,
        ePoolType: POOL_TYPE,
        pfnAllocBuffer: PALLOCATE_FUNCTION,
        pfnFreeBuffer: PFREE_FUNCTION,
        cbMarshallingBuffer: ULONG,
        cMaxWriteBuffers: ULONG,
        cMaxReadBuffers: ULONG,
        cAlignmentSize: ULONG,
        fFlags: ULONGLONG,
        ppvMarshalContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsDeleteMarshallingArea(pvMarshalContext: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsReserveAndAppendLog(
        pvMarshalContext: PVOID,
        rgWriteEntries: PCLFS_WRITE_ENTRY,
        cWriteEntries: ULONG,
        plsnUndoNext: PCLFS_LSN,
        plsnPrevious: PCLFS_LSN,
        cReserveRecords: ULONG,
        rgcbReservation: PLONGLONG,
        fFlags: ULONG,
        plsn: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsReserveAndAppendLogAligned(
        pvMarshalContext: PVOID,
        rgWriteEntries: PCLFS_WRITE_ENTRY,
        cWriteEntries: ULONG,
        cbEntryAlignment: ULONG,
        plsnUndoNext: PCLFS_LSN,
        plsnPrevious: PCLFS_LSN,
        cReserveRecords: ULONG,
        rgcbReservation: PLONGLONG,
        fFlags: ULONG,
        plsn: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsAlignReservedLog(
        pvMarshalContext: PVOID,
        cRecords: ULONG,
        rgcbReservation: *mut LONGLONG,
        pcbAlignReservation: PLONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsAllocReservedLog(
        pvMarshalContext: PVOID,
        cRecords: ULONG,
        pcbAdjustment: PLONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsFreeReservedLog(
        pvMarshalContext: PVOID,
        cRecords: ULONG,
        pcbAdjustment: PLONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsFlushBuffers(pvMarshalContext: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsFlushToLsn(
        pvMarshalContext: PVOID,
        plsnFlush: PCLFS_LSN,
        plsnLastFlushed: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsReadLogRecord(
        pvMarshalContext: PVOID,
        plsnFirst: PCLFS_LSN,
        peContextMode: CLFS_CONTEXT_MODE,
        ppvReadBuffer: *mut PVOID,
        pcbReadBuffer: PULONG,
        peRecordType: PCLFS_RECORD_TYPE,
        plsnUndoNext: PCLFS_LSN,
        plsnPrevious: PCLFS_LSN,
        ppvReadContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsReadNextLogRecord(
        pvReadContext: PVOID,
        ppvBuffer: *mut PVOID,
        pcbBuffer: PULONG,
        peRecordType: PCLFS_RECORD_TYPE,
        plsnUser: PCLFS_LSN,
        plsnUndoNext: PCLFS_LSN,
        plsnPrevious: PCLFS_LSN,
        plsnRecord: PCLFS_LSN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsTerminateReadLog(pvCursorContext: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsGetLastLsn(plfoLog: PLOG_FILE_OBJECT, plsnLast: PCLFS_LSN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ClfsGetIoStatistics(
        plfoLog: PLOG_FILE_OBJECT,
        pvStatsBuffer: PVOID,
        cbStatsBuffer: ULONG,
        eStatsClass: CLFS_IOSTATS_CLASS,
        pcbStatsWritten: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ClfsLaterLsn(plsn: PCLFS_LSN) -> CLFS_LSN;
}
extern "C" {
    pub fn ClfsEarlierLsn(plsn: PCLFS_LSN) -> CLFS_LSN;
}
extern "C" {
    #[must_use]
    pub fn ClfsLsnDifference(
        plsnStart: PCLFS_LSN,
        plsnFinish: PCLFS_LSN,
        cbContainer: ULONG,
        cbMaxBlock: ULONG,
        pcbDifference: PLONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ClfsValidTopLevelContext(pirpTopLevelContext: PIRP) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn TmInitializeTransactionManager(
        TransactionManager: PRKTM,
        LogFileName: PCUNICODE_STRING,
        TmId: PGUID,
        CreateOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRenameTransactionManager(
        LogFileName: PUNICODE_STRING,
        ExistingTransactionManagerGuid: LPGUID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRecoverTransactionManager(
        Tm: PKTM,
        TargetVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmCommitTransaction(Transaction: PKTRANSACTION, Wait: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRollbackTransaction(Transaction: PKTRANSACTION, Wait: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmCreateEnlistment(
        EnlistmentHandle: PHANDLE,
        PreviousMode: KPROCESSOR_MODE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        ResourceManager: PRKRESOURCEMANAGER,
        Transaction: PKTRANSACTION,
        CreateOptions: ULONG,
        NotificationMask: NOTIFICATION_MASK,
        EnlistmentKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRecoverEnlistment(
        Enlistment: PKENLISTMENT,
        EnlistmentKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmPrePrepareEnlistment(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmPrepareEnlistment(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmCommitEnlistment(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRollbackEnlistment(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmPrePrepareComplete(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmPrepareComplete(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmReadOnlyEnlistment(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmCommitComplete(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRollbackComplete(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmReferenceEnlistmentKey(
        Enlistment: PKENLISTMENT,
        Key: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmDereferenceEnlistmentKey(
        Enlistment: PKENLISTMENT,
        LastReference: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmSinglePhaseReject(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRequestOutcomeEnlistment(
        Enlistment: PKENLISTMENT,
        TmVirtualClock: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmEnableCallbacks(
        ResourceManager: PKRESOURCEMANAGER,
        CallbackRoutine: PTM_RM_NOTIFICATION,
        RMKey: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmRecoverResourceManager(ResourceManager: PKRESOURCEMANAGER) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmPropagationComplete(
        ResourceManager: PKRESOURCEMANAGER,
        RequestCookie: ULONG,
        BufferLength: ULONG,
        Buffer: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn TmPropagationFailed(
        ResourceManager: PKRESOURCEMANAGER,
        RequestCookie: ULONG,
        Status: NTSTATUS,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn TmGetTransactionId(Transaction: PKTRANSACTION, TransactionId: PUOW);
}
extern "C" {
    pub fn TmIsTransactionActive(Transaction: PKTRANSACTION) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PcwRegister(
        Registration: *mut PPCW_REGISTRATION,
        Info: PPCW_REGISTRATION_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PcwUnregister(Registration: PPCW_REGISTRATION);
}
extern "C" {
    #[must_use]
    pub fn PcwCreateInstance(
        Instance: *mut PPCW_INSTANCE,
        Registration: PPCW_REGISTRATION,
        Name: PCUNICODE_STRING,
        Count: ULONG,
        Data: PPCW_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PcwCloseInstance(Instance: PPCW_INSTANCE);
}
extern "C" {
    #[must_use]
    pub fn PcwAddInstance(
        Buffer: PPCW_BUFFER,
        Name: PCUNICODE_STRING,
        Id: ULONG,
        Count: ULONG,
        Data: PPCW_DATA,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn VslCreateSecureSection(
        Handle: PHANDLE,
        TargetProcess: PEPROCESS,
        Mdl: PMDL,
        DevicePageProtection: ULONG,
        Attributes: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn VslDeleteSecureSection(GlobalHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    pub fn RtlRunOnceInitialize(RunOnce: PRTL_RUN_ONCE);
}
extern "C" {
    #[must_use]
    pub fn RtlRunOnceExecuteOnce(
        RunOnce: PRTL_RUN_ONCE,
        InitFn: PRTL_RUN_ONCE_INIT_FN,
        Parameter: PVOID,
        Context: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlRunOnceBeginInitialize(
        RunOnce: PRTL_RUN_ONCE,
        Flags: ULONG,
        Context: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlRunOnceComplete(
        RunOnce: PRTL_RUN_ONCE,
        Flags: ULONG,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlInitializeGenericTableAvl(
        Table: PRTL_AVL_TABLE,
        CompareRoutine: PRTL_AVL_COMPARE_ROUTINE,
        AllocateRoutine: PRTL_AVL_ALLOCATE_ROUTINE,
        FreeRoutine: PRTL_AVL_FREE_ROUTINE,
        TableContext: PVOID,
    );
}
extern "C" {
    pub fn RtlInsertElementGenericTableAvl(
        Table: PRTL_AVL_TABLE,
        Buffer: PVOID,
        BufferSize: CLONG,
        NewElement: PBOOLEAN,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlInsertElementGenericTableFullAvl(
        Table: PRTL_AVL_TABLE,
        Buffer: PVOID,
        BufferSize: CLONG,
        NewElement: PBOOLEAN,
        NodeOrParent: PVOID,
        SearchResult: TABLE_SEARCH_RESULT,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlDeleteElementGenericTableAvl(
        Table: PRTL_AVL_TABLE,
        Buffer: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlDeleteElementGenericTableAvlEx(Table: PRTL_AVL_TABLE, NodeOrParent: PVOID);
}
extern "C" {
    pub fn RtlLookupElementGenericTableAvl(
        Table: PRTL_AVL_TABLE,
        Buffer: PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlLookupElementGenericTableFullAvl(
        Table: PRTL_AVL_TABLE,
        Buffer: PVOID,
        NodeOrParent: *mut PVOID,
        SearchResult: *mut TABLE_SEARCH_RESULT,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlEnumerateGenericTableAvl(Table: PRTL_AVL_TABLE, Restart: BOOLEAN) -> PVOID;
}
extern "C" {
    pub fn RtlEnumerateGenericTableWithoutSplayingAvl(
        Table: PRTL_AVL_TABLE,
        RestartKey: *mut PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlLookupFirstMatchingElementGenericTableAvl(
        Table: PRTL_AVL_TABLE,
        Buffer: PVOID,
        RestartKey: *mut PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlEnumerateGenericTableLikeADirectory(
        Table: PRTL_AVL_TABLE,
        MatchFunction: PRTL_AVL_MATCH_FUNCTION,
        MatchData: PVOID,
        NextFlag: ULONG,
        RestartKey: *mut PVOID,
        DeleteCount: PULONG,
        Buffer: PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlGetElementGenericTableAvl(Table: PRTL_AVL_TABLE, I: ULONG) -> PVOID;
}
extern "C" {
    pub fn RtlNumberGenericTableElementsAvl(Table: PRTL_AVL_TABLE) -> ULONG;
}
extern "C" {
    pub fn RtlIsGenericTableEmptyAvl(Table: PRTL_AVL_TABLE) -> BOOLEAN;
}
extern "C" {
    pub fn RtlSplay(Links: PRTL_SPLAY_LINKS) -> PRTL_SPLAY_LINKS;
}
extern "C" {
    pub fn RtlDelete(Links: PRTL_SPLAY_LINKS) -> PRTL_SPLAY_LINKS;
}
extern "C" {
    pub fn RtlDeleteNoSplay(Links: PRTL_SPLAY_LINKS, Root: *mut PRTL_SPLAY_LINKS);
}
extern "C" {
    pub fn RtlSubtreeSuccessor(Links: PRTL_SPLAY_LINKS) -> PRTL_SPLAY_LINKS;
}
extern "C" {
    pub fn RtlSubtreePredecessor(Links: PRTL_SPLAY_LINKS) -> PRTL_SPLAY_LINKS;
}
extern "C" {
    pub fn RtlRealSuccessor(Links: PRTL_SPLAY_LINKS) -> PRTL_SPLAY_LINKS;
}
extern "C" {
    pub fn RtlRealPredecessor(Links: PRTL_SPLAY_LINKS) -> PRTL_SPLAY_LINKS;
}
extern "C" {
    pub fn RtlInitializeGenericTable(
        Table: PRTL_GENERIC_TABLE,
        CompareRoutine: PRTL_GENERIC_COMPARE_ROUTINE,
        AllocateRoutine: PRTL_GENERIC_ALLOCATE_ROUTINE,
        FreeRoutine: PRTL_GENERIC_FREE_ROUTINE,
        TableContext: PVOID,
    );
}
extern "C" {
    pub fn RtlInsertElementGenericTable(
        Table: PRTL_GENERIC_TABLE,
        Buffer: PVOID,
        BufferSize: CLONG,
        NewElement: PBOOLEAN,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlInsertElementGenericTableFull(
        Table: PRTL_GENERIC_TABLE,
        Buffer: PVOID,
        BufferSize: CLONG,
        NewElement: PBOOLEAN,
        NodeOrParent: PVOID,
        SearchResult: TABLE_SEARCH_RESULT,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlDeleteElementGenericTable(
        Table: PRTL_GENERIC_TABLE,
        Buffer: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlLookupElementGenericTable(
        Table: PRTL_GENERIC_TABLE,
        Buffer: PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlLookupElementGenericTableFull(
        Table: PRTL_GENERIC_TABLE,
        Buffer: PVOID,
        NodeOrParent: *mut PVOID,
        SearchResult: *mut TABLE_SEARCH_RESULT,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlEnumerateGenericTable(
        Table: PRTL_GENERIC_TABLE,
        Restart: BOOLEAN,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlEnumerateGenericTableWithoutSplaying(
        Table: PRTL_GENERIC_TABLE,
        RestartKey: *mut PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlGetElementGenericTable(Table: PRTL_GENERIC_TABLE, I: ULONG) -> PVOID;
}
extern "C" {
    pub fn RtlNumberGenericTableElements(Table: PRTL_GENERIC_TABLE) -> ULONG;
}
extern "C" {
    pub fn RtlIsGenericTableEmpty(Table: PRTL_GENERIC_TABLE) -> BOOLEAN;
}
extern "C" {
    pub fn RtlCreateHashTable(
        HashTable: *mut PRTL_DYNAMIC_HASH_TABLE,
        Shift: ULONG,
        Flags: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlCreateHashTableEx(
        HashTable: *mut PRTL_DYNAMIC_HASH_TABLE,
        InitialSize: ULONG,
        Shift: ULONG,
        Flags: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlDeleteHashTable(HashTable: PRTL_DYNAMIC_HASH_TABLE);
}
extern "C" {
    pub fn RtlInsertEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Entry: PRTL_DYNAMIC_HASH_TABLE_ENTRY,
        Signature: ULONG_PTR,
        Context: PRTL_DYNAMIC_HASH_TABLE_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlRemoveEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Entry: PRTL_DYNAMIC_HASH_TABLE_ENTRY,
        Context: PRTL_DYNAMIC_HASH_TABLE_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlLookupEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Signature: ULONG_PTR,
        Context: PRTL_DYNAMIC_HASH_TABLE_CONTEXT,
    ) -> PRTL_DYNAMIC_HASH_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlGetNextEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Context: PRTL_DYNAMIC_HASH_TABLE_CONTEXT,
    ) -> PRTL_DYNAMIC_HASH_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlInitEnumerationHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlEnumerateEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    ) -> PRTL_DYNAMIC_HASH_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlEndEnumerationHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    );
}
extern "C" {
    pub fn RtlInitWeakEnumerationHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlWeaklyEnumerateEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    ) -> PRTL_DYNAMIC_HASH_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlEndWeakEnumerationHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    );
}
extern "C" {
    pub fn RtlInitStrongEnumerationHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlStronglyEnumerateEntryHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    ) -> PRTL_DYNAMIC_HASH_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlEndStrongEnumerationHashTable(
        HashTable: PRTL_DYNAMIC_HASH_TABLE,
        Enumerator: PRTL_DYNAMIC_HASH_TABLE_ENUMERATOR,
    );
}
extern "C" {
    pub fn RtlExpandHashTable(HashTable: PRTL_DYNAMIC_HASH_TABLE) -> BOOLEAN;
}
extern "C" {
    pub fn RtlContractHashTable(HashTable: PRTL_DYNAMIC_HASH_TABLE) -> BOOLEAN;
}
extern "C" {
    pub fn _ReturnAddress() -> *mut ::core::ffi::c_void;
}
extern "C" {
    pub fn RtlGetCallersAddress(CallersAddress: *mut PVOID, CallersCaller: *mut PVOID);
}
extern "C" {
    pub fn RtlWalkFrameChain(Callers: *mut PVOID, Count: ULONG, Flags: ULONG) -> ULONG;
}
extern "C" {
    pub fn RtlGetEnabledExtendedFeatures(FeatureMask: ULONG64) -> ULONG64;
}
extern "C" {
    #[must_use]
    pub fn RtlCharToInteger(String: PCSZ, Base: ULONG, Value: PULONG) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCopyString(DestinationString: PSTRING, SourceString: *const STRING);
}
extern "C" {
    pub fn RtlUpperChar(Character: CHAR) -> CHAR;
}
extern "C" {
    pub fn RtlCompareString(
        String1: *const STRING,
        String2: *const STRING,
        CaseInSensitive: BOOLEAN,
    ) -> LONG;
}
extern "C" {
    pub fn RtlEqualString(
        String1: *const STRING,
        String2: *const STRING,
        CaseInSensitive: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlUpperString(DestinationString: PSTRING, SourceString: *const STRING);
}
extern "C" {
    pub fn RtlPrefixUnicodeString(
        String1: PCUNICODE_STRING,
        String2: PCUNICODE_STRING,
        CaseInSensitive: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlSuffixUnicodeString(
        String1: PCUNICODE_STRING,
        String2: PCUNICODE_STRING,
        CaseInSensitive: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlUpcaseUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlQueryRegistryValueWithFallback(
        PrimaryHandle: HANDLE,
        FallbackHandle: HANDLE,
        ValueName: PUNICODE_STRING,
        ValueLength: ULONG,
        ValueType: PULONG,
        ValueData: PVOID,
        ResultLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlMapGenericMask(
        AccessMask: PACCESS_MASK,
        GenericMapping: *const GENERIC_MAPPING,
    );
}
extern "C" {
    #[must_use]
    pub fn RtlVolumeDeviceToDosName(
        VolumeDeviceObject: PVOID,
        DosName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn DbgPrompt(Prompt: PCCH, Response: PCH, Length: ULONG) -> ULONG;
}
extern "C" {
    pub fn RtlGetProductInfo(
        OSMajorVersion: ULONG,
        OSMinorVersion: ULONG,
        SpMajorVersion: ULONG,
        SpMinorVersion: ULONG,
        ReturnedProductType: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlGetActiveConsoleId() -> ULONG;
}
extern "C" {
    pub fn RtlGetConsoleSessionForegroundProcessId() -> ULONGLONG;
}
extern "C" {
    pub fn RtlGetSuiteMask() -> ULONG;
}
extern "C" {
    pub fn RtlIsMultiSessionSku() -> BOOLEAN;
}
extern "C" {
    pub fn RtlIsStateSeparationEnabled() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlGetPersistedStateLocation(
        SourceID: PCWSTR,
        CustomValue: PCWSTR,
        DefaultPath: PCWSTR,
        StateLocationType: STATE_LOCATION_TYPE,
        TargetPath: PWCHAR,
        BufferLengthIn: ULONG,
        BufferLengthOut: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIsApiSetImplemented(apiSetName: PCSTR) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIsMultiUsersInSessionSku() -> BOOLEAN;
}
extern "C" {
    pub fn RtlGetNtProductType(NtProductType: PNT_PRODUCT_TYPE) -> BOOLEAN;
}
extern "C" {
    pub fn RtlGetNtSystemRoot() -> PCWSTR;
}
extern "C" {
    #[must_use]
    pub fn RtlGetNonVolatileToken(
        NvBuffer: PVOID,
        Size: SIZE_T,
        NvToken: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlFreeNonVolatileToken(NvToken: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlFlushNonVolatileMemory(
        NvToken: PVOID,
        NvBuffer: PVOID,
        Size: SIZE_T,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDrainNonVolatileFlush(NvToken: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlWriteNonVolatileMemory(
        NvToken: PVOID,
        NvDestination: *mut ::core::ffi::c_void,
        Source: *const ::core::ffi::c_void,
        Size: SIZE_T,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlFillNonVolatileMemory(
        NvToken: PVOID,
        NvDestination: *mut ::core::ffi::c_void,
        Size: SIZE_T,
        Value: UCHAR,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlFlushNonVolatileMemoryRanges(
        NvToken: PVOID,
        NvRanges: PNV_MEMORY_RANGE,
        NumRanges: SIZE_T,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInitializeCorrelationVector(
        CorrelationVector: PCORRELATION_VECTOR,
        Version: ::core::ffi::c_int,
        Guid: *const GUID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIncrementCorrelationVector(
        CorrelationVector: PCORRELATION_VECTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlExtendCorrelationVector(
        CorrelationVector: PCORRELATION_VECTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlValidateCorrelationVector(Vector: PCORRELATION_VECTOR) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlRaiseCustomSystemEventTrigger(
        TriggerConfig: PCUSTOM_SYSTEM_EVENT_TRIGGER_CONFIG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIsZeroMemory(Buffer: PVOID, Length: SIZE_T) -> BOOLEAN;
}
extern "C" {
    pub fn RtlNormalizeSecurityDescriptor(
        SecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        SecurityDescriptorLength: ULONG,
        NewSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        NewSecurityDescriptorLength: PULONG,
        CheckOnly: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlGetSystemGlobalData(
        DataId: RTL_SYSTEM_GLOBAL_DATA_ID,
        Buffer: PVOID,
        Size: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlSetSystemGlobalData(
        DataId: RTL_SYSTEM_GLOBAL_DATA_ID,
        Buffer: PVOID,
        Size: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenProcess(
        ProcessHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        ClientId: PCLIENT_ID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KePulseEvent(Event: PRKEVENT, Increment: KPRIORITY, Wait: BOOLEAN) -> LONG;
}
extern "C" {
    #[must_use]
    pub fn KeExpandKernelStackAndCallout(
        Callout: PEXPAND_STACK_CALLOUT,
        Parameter: PVOID,
        Size: SIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KeExpandKernelStackAndCalloutEx(
        Callout: PEXPAND_STACK_CALLOUT,
        Parameter: PVOID,
        Size: SIZE_T,
        Wait: BOOLEAN,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeSetBasePriorityThread(Thread: PKTHREAD, Increment: LONG) -> LONG;
}
extern "C" {
    pub fn KeBugCheck(BugCheckCode: ULONG) -> !;
}
extern "C" {
    pub fn KeInvalidateAllCaches() -> BOOLEAN;
}
extern "C" {
    pub fn KeInvalidateRangeAllCaches(BaseAddress: PVOID, Length: ULONG);
}
extern "C" {
    #[must_use]
    pub fn KeSetHardwareCounterConfiguration(
        CounterArray: PHARDWARE_COUNTER,
        Count: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn KeQueryHardwareCounterConfiguration(
        CounterArray: PHARDWARE_COUNTER,
        MaximumCount: ULONG,
        Count: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ExRaiseDatatypeMisalignment() -> !;
}
extern "C" {
    pub fn ExRaiseAccessViolation() -> !;
}
extern "C" {
    #[must_use]
    pub fn ExInitializeZone(
        Zone: PZONE_HEADER,
        BlockSize: ULONG,
        InitialSegment: PVOID,
        InitialSegmentSize: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ExExtendZone(
        Zone: PZONE_HEADER,
        Segment: PVOID,
        SegmentSize: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ExInterlockedExtendZone(
        Zone: PZONE_HEADER,
        Segment: PVOID,
        SegmentSize: ULONG,
        Lock: PKSPIN_LOCK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ExUuidCreate(Uuid: *mut UUID) -> NTSTATUS;
}
extern "C" {
    pub fn MmIsThisAnNtAsSystem() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn MmMapUserAddressesToPage(
        BaseAddress: PVOID,
        NumberOfBytes: SIZE_T,
        PageAddress: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmAddPhysicalMemory(
        StartAddress: PPHYSICAL_ADDRESS,
        NumberOfBytes: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmRotatePhysicalView(
        VirtualAddress: PVOID,
        NumberOfBytes: PSIZE_T,
        NewMdl: PMDL,
        Direction: MM_ROTATE_DIRECTION,
        CopyFunction: PMM_ROTATE_COPY_CALLBACK_FUNCTION,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmRemovePhysicalMemory(
        StartAddress: PPHYSICAL_ADDRESS,
        NumberOfBytes: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmGetPhysicalMemoryRanges() -> PPHYSICAL_MEMORY_RANGE;
}
extern "C" {
    pub fn MmGetPhysicalMemoryRangesEx(PartitionObject: PVOID) -> PPHYSICAL_MEMORY_RANGE;
}
extern "C" {
    pub fn MmGetPhysicalMemoryRangesEx2(
        PartitionObject: PVOID,
        Flags: ULONG,
    ) -> PPHYSICAL_MEMORY_RANGE;
}
extern "C" {
    pub fn MmMapVideoDisplay(
        PhysicalAddress: PHYSICAL_ADDRESS,
        NumberOfBytes: SIZE_T,
        CacheType: MEMORY_CACHING_TYPE,
    ) -> PVOID;
}
extern "C" {
    pub fn MmUnmapVideoDisplay(BaseAddress: PVOID, NumberOfBytes: SIZE_T);
}
extern "C" {
    pub fn MmGetPhysicalAddress(BaseAddress: PVOID) -> PHYSICAL_ADDRESS;
}
extern "C" {
    #[must_use]
    pub fn MmGetCacheAttribute(
        PhysicalAddress: PHYSICAL_ADDRESS,
        CacheType: *mut MEMORY_CACHING_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmCopyMemory(
        TargetAddress: PVOID,
        SourceAddress: MM_COPY_ADDRESS,
        NumberOfBytes: SIZE_T,
        Flags: ULONG,
        NumberOfBytesTransferred: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmGetCacheAttributeEx(
        PhysicalAddress: PHYSICAL_ADDRESS,
        Flags: ULONG,
        CacheType: *mut MEMORY_CACHING_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn MmGetVirtualForPhysical(PhysicalAddress: PHYSICAL_ADDRESS) -> PVOID;
}
extern "C" {
    pub fn MmAllocateNonCachedMemory(NumberOfBytes: SIZE_T) -> PVOID;
}
extern "C" {
    pub fn MmFreeNonCachedMemory(BaseAddress: PVOID, NumberOfBytes: SIZE_T);
}
extern "C" {
    pub fn MmIsAddressValid(VirtualAddress: PVOID) -> BOOLEAN;
}
extern "C" {
    pub fn MmIsNonPagedSystemAddressValid(VirtualAddress: PVOID) -> BOOLEAN;
}
extern "C" {
    pub fn MmLockPagableSectionByHandle(ImageSectionHandle: PVOID);
}
extern "C" {
    pub fn MmSecureVirtualMemory(
        Address: PVOID,
        Size: SIZE_T,
        ProbeMode: ULONG,
    ) -> HANDLE;
}
extern "C" {
    pub fn MmSecureVirtualMemoryEx(
        Address: PVOID,
        Size: SIZE_T,
        ProbeMode: ULONG,
        Flags: ULONG,
    ) -> HANDLE;
}
extern "C" {
    pub fn MmUnsecureVirtualMemory(SecureHandle: HANDLE);
}
extern "C" {
    #[must_use]
    pub fn MmMapViewInSystemSpaceEx(
        Section: PVOID,
        MappedBase: *mut PVOID,
        ViewSize: PSIZE_T,
        SectionOffset: PLARGE_INTEGER,
        Flags: ULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmMapViewInSystemSpace(
        Section: PVOID,
        MappedBase: *mut PVOID,
        ViewSize: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmUnmapViewInSystemSpace(MappedBase: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmMapViewInSessionSpaceEx(
        Section: PVOID,
        MappedBase: *mut PVOID,
        ViewSize: PSIZE_T,
        SectionOffset: PLARGE_INTEGER,
        Flags: ULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmMapViewInSessionSpace(
        Section: PVOID,
        MappedBase: *mut PVOID,
        ViewSize: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmUnmapViewInSessionSpace(MappedBase: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmCreateMirror() -> NTSTATUS;
}
extern "C" {
    pub fn SeSinglePrivilegeCheck(
        PrivilegeValue: LUID,
        PreviousMode: KPROCESSOR_MODE,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PsSetCreateProcessNotifyRoutine(
        NotifyRoutine: PCREATE_PROCESS_NOTIFY_ROUTINE,
        Remove: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsSetCreateProcessNotifyRoutineEx(
        NotifyRoutine: PCREATE_PROCESS_NOTIFY_ROUTINE_EX,
        Remove: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsSetCreateProcessNotifyRoutineEx2(
        NotifyType: PSCREATEPROCESSNOTIFYTYPE,
        NotifyInformation: PVOID,
        Remove: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsSetCreateThreadNotifyRoutine(
        NotifyRoutine: PCREATE_THREAD_NOTIFY_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsSetCreateThreadNotifyRoutineEx(
        NotifyType: PSCREATETHREADNOTIFYTYPE,
        NotifyInformation: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsRemoveCreateThreadNotifyRoutine(
        NotifyRoutine: PCREATE_THREAD_NOTIFY_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsSetLoadImageNotifyRoutine(
        NotifyRoutine: PLOAD_IMAGE_NOTIFY_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsSetLoadImageNotifyRoutineEx(
        NotifyRoutine: PLOAD_IMAGE_NOTIFY_ROUTINE,
        Flags: ULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsRemoveLoadImageNotifyRoutine(
        NotifyRoutine: PLOAD_IMAGE_NOTIFY_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PsGetCurrentProcessId() -> HANDLE;
}
extern "C" {
    pub fn PsGetCurrentThreadId() -> HANDLE;
}
extern "C" {
    pub fn PsSetCurrentThreadPrefetching(Prefetching: BOOLEAN) -> BOOLEAN;
}
extern "C" {
    pub fn PsIsCurrentThreadPrefetching() -> BOOLEAN;
}
extern "C" {
    pub fn PsGetProcessCreateTimeQuadPart(Process: PEPROCESS) -> LONGLONG;
}
extern "C" {
    pub fn PsGetProcessStartKey(Process: PEPROCESS) -> ULONGLONG;
}
extern "C" {
    #[must_use]
    pub fn PsGetProcessExitStatus(Process: PEPROCESS) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsGetThreadExitStatus(Thread: PETHREAD) -> NTSTATUS;
}
extern "C" {
    pub fn PsGetProcessId(Process: PEPROCESS) -> HANDLE;
}
extern "C" {
    pub fn PsGetThreadId(Thread: PETHREAD) -> HANDLE;
}
extern "C" {
    pub fn PsGetThreadProperty(Thread: PETHREAD, Key: ULONG_PTR, Flags: ULONG) -> PVOID;
}
extern "C" {
    pub fn PsGetThreadProcessId(Thread: PETHREAD) -> HANDLE;
}
extern "C" {
    pub fn PsGetThreadCreateTime(Thread: PETHREAD) -> LONGLONG;
}
extern "C" {
    pub fn PsGetCurrentThreadTeb() -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn PsGetJobSilo(Job: PEJOB, Silo: *mut PESILO) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsGetJobServerSilo(Job: PEJOB, ServerSilo: *mut PESILO) -> NTSTATUS;
}
extern "C" {
    pub fn PsGetEffectiveServerSilo(Silo: PESILO) -> PESILO;
}
extern "C" {
    pub fn PsAttachSiloToCurrentThread(Silo: PESILO) -> PESILO;
}
extern "C" {
    pub fn PsDetachSiloFromCurrentThread(PreviousSilo: PESILO);
}
extern "C" {
    pub fn PsIsHostSilo(Silo: PESILO) -> BOOLEAN;
}
extern "C" {
    pub fn PsGetHostSilo() -> PESILO;
}
extern "C" {
    pub fn PsGetCurrentSilo() -> PESILO;
}
extern "C" {
    pub fn PsGetCurrentServerSilo() -> PESILO;
}
extern "C" {
    pub fn PsGetCurrentServerSiloName() -> PUNICODE_STRING;
}
extern "C" {
    pub fn PsIsCurrentThreadInServerSilo() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PsAcquireSiloHardReference(Silo: PESILO) -> NTSTATUS;
}
extern "C" {
    pub fn PsReleaseSiloHardReference(Silo: PESILO);
}
extern "C" {
    #[must_use]
    pub fn PsAllocSiloContextSlot(
        Reserved: ULONG_PTR,
        ReturnedContextSlot: *mut ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsFreeSiloContextSlot(ContextSlot: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsCreateSiloContext(
        Silo: PESILO,
        Size: ULONG,
        PoolType: POOL_TYPE,
        ContextCleanupCallback: SILO_CONTEXT_CLEANUP_CALLBACK,
        ReturnedSiloContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsInsertSiloContext(
        Silo: PESILO,
        ContextSlot: ULONG,
        SiloContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsReplaceSiloContext(
        Silo: PESILO,
        ContextSlot: ULONG,
        NewSiloContext: PVOID,
        OldSiloContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsGetSiloContext(
        Silo: PESILO,
        ContextSlot: ULONG,
        ReturnedSiloContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsRemoveSiloContext(
        Silo: PESILO,
        ContextSlot: ULONG,
        RemovedSiloContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PsReferenceSiloContext(SiloContext: PVOID);
}
extern "C" {
    pub fn PsDereferenceSiloContext(SiloContext: PVOID);
}
extern "C" {
    #[must_use]
    pub fn PsInsertPermanentSiloContext(
        Silo: PESILO,
        ContextSlot: ULONG,
        SiloContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsMakeSiloContextPermanent(Silo: PESILO, ContextSlot: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsGetPermanentSiloContext(
        Silo: PESILO,
        ContextSlot: ULONG,
        ReturnedSiloContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsRegisterSiloMonitor(
        Registration: PSILO_MONITOR_REGISTRATION,
        ReturnedMonitor: *mut PSILO_MONITOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsStartSiloMonitor(Monitor: PSILO_MONITOR) -> NTSTATUS;
}
extern "C" {
    pub fn PsGetSiloMonitorContextSlot(Monitor: PSILO_MONITOR) -> ULONG;
}
extern "C" {
    pub fn PsUnregisterSiloMonitor(Monitor: PSILO_MONITOR);
}
extern "C" {
    pub fn PsGetServerSiloServiceSessionId(Silo: PESILO) -> ULONG;
}
extern "C" {
    pub fn PsGetServerSiloActiveConsoleId(Silo: PESILO) -> ULONG;
}
extern "C" {
    pub fn PsTerminateServerSilo(ServerSilo: PESILO, ExitStatus: NTSTATUS);
}
extern "C" {
    pub fn PsGetParentSilo(Job: PEJOB) -> PESILO;
}
extern "C" {
    pub fn PsGetThreadServerSilo(Thread: PETHREAD) -> PESILO;
}
extern "C" {
    pub fn PsGetSiloContainerId(Silo: PESILO) -> *mut GUID;
}
extern "C" {
    pub fn IoAllocateController(
        ControllerObject: PCONTROLLER_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
        ExecutionRoutine: PDRIVER_CONTROL,
        Context: PVOID,
    );
}
extern "C" {
    #[must_use]
    pub fn IoAssignResources(
        RegistryPath: PUNICODE_STRING,
        DriverClassName: PUNICODE_STRING,
        DriverObject: PDRIVER_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
        RequestedResources: PIO_RESOURCE_REQUIREMENTS_LIST,
        AllocatedResources: *mut PCM_RESOURCE_LIST,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoAttachDeviceByPointer(
        SourceDevice: PDEVICE_OBJECT,
        TargetDevice: PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCreateController(Size: ULONG) -> PCONTROLLER_OBJECT;
}
extern "C" {
    pub fn IoDeleteController(ControllerObject: PCONTROLLER_OBJECT);
}
extern "C" {
    pub fn IoFreeController(ControllerObject: PCONTROLLER_OBJECT);
}
extern "C" {
    pub fn IoGetConfigurationInformation() -> PCONFIGURATION_INFORMATION;
}
extern "C" {
    pub fn IoGetFileObjectGenericMapping() -> PGENERIC_MAPPING;
}
extern "C" {
    pub fn IoCancelFileOpen(DeviceObject: PDEVICE_OBJECT, FileObject: PFILE_OBJECT);
}
extern "C" {
    pub fn IoMakeAssociatedIrp(Irp: PIRP, StackSize: CCHAR) -> PIRP;
}
extern "C" {
    pub fn IoMakeAssociatedIrpEx(
        Irp: PIRP,
        DeviceObject: PDEVICE_OBJECT,
        StackSize: CCHAR,
    ) -> PIRP;
}
extern "C" {
    #[must_use]
    pub fn IoQueryDeviceDescription(
        BusType: PINTERFACE_TYPE,
        BusNumber: PULONG,
        ControllerType: PCONFIGURATION_TYPE,
        ControllerNumber: PULONG,
        PeripheralType: PCONFIGURATION_TYPE,
        PeripheralNumber: PULONG,
        CalloutRoutine: PIO_QUERY_DEVICE_ROUTINE,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoRaiseHardError(Irp: PIRP, Vpb: PVPB, RealDeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn IoRaiseInformationalHardError(
        ErrorStatus: NTSTATUS,
        String: PUNICODE_STRING,
        Thread: PKTHREAD,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn IoSetThreadHardErrorMode(EnableHardErrors: BOOLEAN) -> BOOLEAN;
}
extern "C" {
    pub fn IoRegisterBootDriverReinitialization(
        DriverObject: PDRIVER_OBJECT,
        DriverReinitializationRoutine: PDRIVER_REINITIALIZE,
        Context: PVOID,
    );
}
extern "C" {
    pub fn IoRegisterDriverReinitialization(
        DriverObject: PDRIVER_OBJECT,
        DriverReinitializationRoutine: PDRIVER_REINITIALIZE,
        Context: PVOID,
    );
}
extern "C" {
    #[must_use]
    pub fn IoReportResourceUsage(
        DriverClassName: PUNICODE_STRING,
        DriverObject: PDRIVER_OBJECT,
        DriverList: PCM_RESOURCE_LIST,
        DriverListSize: ULONG,
        DeviceObject: PDEVICE_OBJECT,
        DeviceList: PCM_RESOURCE_LIST,
        DeviceListSize: ULONG,
        OverrideConflict: BOOLEAN,
        ConflictDetected: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoTranslateBusAddress(
        InterfaceType: INTERFACE_TYPE,
        BusNumber: ULONG,
        BusAddress: PHYSICAL_ADDRESS,
        AddressSpace: PULONG,
        TranslatedAddress: PPHYSICAL_ADDRESS,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn IoSetHardErrorOrVerifyDevice(Irp: PIRP, DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn HalExamineMBR(
        DeviceObject: PDEVICE_OBJECT,
        SectorSize: ULONG,
        MBRTypeIdentifier: ULONG,
        Buffer: *mut PVOID,
    );
}
extern "C" {
    #[must_use]
    pub fn IoReadPartitionTable(
        DeviceObject: PDEVICE_OBJECT,
        SectorSize: ULONG,
        ReturnRecognizedPartitions: BOOLEAN,
        PartitionBuffer: *mut *mut _DRIVE_LAYOUT_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetPartitionInformation(
        DeviceObject: PDEVICE_OBJECT,
        SectorSize: ULONG,
        PartitionNumber: ULONG,
        PartitionType: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWritePartitionTable(
        DeviceObject: PDEVICE_OBJECT,
        SectorSize: ULONG,
        SectorsPerTrack: ULONG,
        NumberOfHeads: ULONG,
        PartitionBuffer: *mut _DRIVE_LAYOUT_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCreateDisk(
        DeviceObject: PDEVICE_OBJECT,
        Disk: *mut [u8; 0usize],
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReadPartitionTableEx(
        DeviceObject: PDEVICE_OBJECT,
        DriveLayout: *mut *mut [u8; 0usize],
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoWritePartitionTableEx(
        DeviceObject: PDEVICE_OBJECT,
        DriveLayout: *mut [u8; 0usize],
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetPartitionInformationEx(
        DeviceObject: PDEVICE_OBJECT,
        PartitionNumber: ULONG,
        PartitionInfo: *mut [u8; 0usize],
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoVerifyPartitionTable(
        DeviceObject: PDEVICE_OBJECT,
        FixErrors: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReadDiskSignature(
        DeviceObject: PDEVICE_OBJECT,
        BytesPerSector: ULONG,
        Signature: PDISK_SIGNATURE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoVolumeDeviceToDosName(
        VolumeDeviceObject: PVOID,
        DosName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoVolumeDeviceToGuidPath(
        VolumeDeviceObject: PVOID,
        GuidPath: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoVolumeDeviceToGuid(VolumeDeviceObject: PVOID, Guid: *mut GUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoVolumeDeviceNameToGuid(
        VolumeDeviceName: PUNICODE_STRING,
        Guid: *mut GUID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoVolumeDeviceNameToGuidPath(
        VolumeDeviceName: PUNICODE_STRING,
        GuidPath: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetSystemPartition(VolumeNameString: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCreateFileSpecifyDeviceObjectHint(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        AllocationSize: PLARGE_INTEGER,
        FileAttributes: ULONG,
        ShareAccess: ULONG,
        Disposition: ULONG,
        CreateOptions: ULONG,
        EaBuffer: PVOID,
        EaLength: ULONG,
        CreateFileType: CREATE_FILE_TYPE,
        InternalParameters: PVOID,
        Options: ULONG,
        DeviceObject: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetSiloParameters(FileObject: PFILE_OBJECT) -> PIO_FOEXT_SILO_PARAMETERS;
}
extern "C" {
    pub fn IoGetSilo(FileObject: PFILE_OBJECT) -> PESILO;
}
extern "C" {
    pub fn IoGetTransactionParameterBlock(
        FileObject: PFILE_OBJECT,
    ) -> PTXN_PARAMETER_BLOCK;
}
extern "C" {
    pub fn IoGetOplockKeyContext(FileObject: PFILE_OBJECT) -> POPLOCK_KEY_ECP_CONTEXT;
}
extern "C" {
    pub fn IoGetOplockKeyContextEx(FileObject: PFILE_OBJECT) -> POPLOCK_KEY_CONTEXT;
}
extern "C" {
    pub fn IoGetShadowFileInformation(FileObject: PFILE_OBJECT) -> PIO_FOEXT_SHADOW_FILE;
}
extern "C" {
    #[must_use]
    pub fn IoSetShadowFileInformation(
        FileObject: PFILE_OBJECT,
        BackingFileObject: PFILE_OBJECT,
        BackingFltInstance: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCreateFileEx(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        AllocationSize: PLARGE_INTEGER,
        FileAttributes: ULONG,
        ShareAccess: ULONG,
        Disposition: ULONG,
        CreateOptions: ULONG,
        EaBuffer: PVOID,
        EaLength: ULONG,
        CreateFileType: CREATE_FILE_TYPE,
        InternalParameters: PVOID,
        Options: ULONG,
        DriverContext: PIO_DRIVER_CREATE_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetIrpExtraCreateParameter(
        Irp: PIRP,
        ExtraCreateParameter: *mut _ECP_LIST,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoClearIrpExtraCreateParameter(Irp: PIRP);
}
extern "C" {
    #[must_use]
    pub fn IoGetIrpExtraCreateParameter(
        Irp: PIRP,
        ExtraCreateParameter: *mut *mut _ECP_LIST,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoQueryInformationByName(
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
        Options: ULONG,
        DriverContext: PIO_DRIVER_CREATE_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoAttachDeviceToDeviceStackSafe(
        SourceDevice: PDEVICE_OBJECT,
        TargetDevice: PDEVICE_OBJECT,
        AttachedToDeviceObject: *mut PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoIsFileOriginRemote(FileObject: PFILE_OBJECT) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoSetFileOrigin(FileObject: PFILE_OBJECT, Remote: BOOLEAN) -> NTSTATUS;
}
extern "C" {
    pub fn IoIsFileObjectIgnoringSharing(FileObject: PFILE_OBJECT) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoSetFileObjectIgnoreSharing(FileObject: PFILE_OBJECT) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetPagingIoPriority(Irp: PIRP) -> IO_PAGING_PRIORITY;
}
extern "C" {
    pub fn IoRegisterBootDriverCallback(
        CallbackFunction: PBOOT_DRIVER_CALLBACK_FUNCTION,
        CallbackContext: PVOID,
    ) -> PVOID;
}
extern "C" {
    pub fn IoUnregisterBootDriverCallback(CallbackHandle: PVOID);
}
extern "C" {
    #[must_use]
    pub fn IoGetActivityIdIrp(Irp: PIRP, Guid: LPGUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetActivityIdIrp(Irp: PIRP, Guid: LPCGUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoPropagateActivityIdToThread(
        Irp: PIRP,
        PropagatedId: LPGUID,
        OriginalId: *mut LPCGUID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoSetActivityIdThread(ActivityId: LPCGUID) -> LPCGUID;
}
extern "C" {
    pub fn IoClearActivityIdThread(OriginalId: LPCGUID);
}
extern "C" {
    pub fn IoGetActivityIdThread() -> LPCGUID;
}
extern "C" {
    pub fn IoTransferActivityId(ActivityId: LPCGUID, RelatedActivityId: LPCGUID);
}
extern "C" {
    #[must_use]
    pub fn IoGetFsZeroingOffset(Irp: PIRP, ZeroingOffset: PULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetFsZeroingOffsetRequired(Irp: PIRP) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetFsZeroingOffset(Irp: PIRP, ZeroingOffset: ULONG) -> NTSTATUS;
}
extern "C" {
    pub fn IoIsValidIrpStatus(Status: NTSTATUS) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn IoIncrementKeepAliveCount(
        FileObject: PFILE_OBJECT,
        Process: PEPROCESS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoDecrementKeepAliveCount(
        FileObject: PFILE_OBJECT,
        Process: PEPROCESS,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetInitiatorProcess(FileObject: PFILE_OBJECT) -> PEPROCESS;
}
extern "C" {
    pub fn IoSetMasterIrpStatus(MasterIrp: PIRP, Status: NTSTATUS);
}
extern "C" {
    #[must_use]
    pub fn IoQueryFullDriverPath(
        DriverObject: PDRIVER_OBJECT,
        FullPath: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReportDetectedDevice(
        DriverObject: PDRIVER_OBJECT,
        LegacyBusType: INTERFACE_TYPE,
        BusNumber: ULONG,
        SlotNumber: ULONG,
        ResourceList: PCM_RESOURCE_LIST,
        ResourceRequirements: PIO_RESOURCE_REQUIREMENTS_LIST,
        ResourceAssigned: BOOLEAN,
        DeviceObject: *mut PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReportRootDevice(DriverObject: PDRIVER_OBJECT) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReportResourceForDetection(
        DriverObject: PDRIVER_OBJECT,
        DriverList: PCM_RESOURCE_LIST,
        DriverListSize: ULONG,
        DeviceObject: PDEVICE_OBJECT,
        DeviceList: PCM_RESOURCE_LIST,
        DeviceListSize: ULONG,
        ConflictDetected: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn HalAcquireDisplayOwnership(
        ResetDisplayParameters: PHAL_RESET_DISPLAY_PARAMETERS,
    );
}
extern "C" {
    pub fn HalSetBusDataByOffset(
        BusDataType: BUS_DATA_TYPE,
        BusNumber: ULONG,
        SlotNumber: ULONG,
        Buffer: PVOID,
        Offset: ULONG,
        Length: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn HalTranslateBusAddress(
        InterfaceType: INTERFACE_TYPE,
        BusNumber: ULONG,
        BusAddress: PHYSICAL_ADDRESS,
        AddressSpace: PULONG,
        TranslatedAddress: PPHYSICAL_ADDRESS,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn HalAllocateCrashDumpRegisters(
        AdapterObject: PADAPTER_OBJECT,
        NumberOfMapRegisters: PULONG,
    ) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn HalDmaAllocateCrashDumpRegistersEx(
        Adapter: PADAPTER_OBJECT,
        NumberOfMapRegisters: ULONG,
        Type: HAL_DMA_CRASH_DUMP_REGISTER_TYPE,
        MapRegisterBase: *mut PVOID,
        MapRegistersAvailable: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HalDmaFreeCrashDumpRegistersEx(
        Adapter: PADAPTER_OBJECT,
        Type: HAL_DMA_CRASH_DUMP_REGISTER_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn HalGetBusDataByOffset(
        BusDataType: BUS_DATA_TYPE,
        BusNumber: ULONG,
        SlotNumber: ULONG,
        Buffer: PVOID,
        Offset: ULONG,
        Length: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn HalGetAdapter(
        DeviceDescription: PDEVICE_DESCRIPTION,
        NumberOfMapRegisters: PULONG,
    ) -> PADAPTER_OBJECT;
}
extern "C" {
    #[must_use]
    pub fn HalGetScatterGatherList(
        DmaAdapter: PADAPTER_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
        Mdl: PMDL,
        CurrentVa: PVOID,
        Length: ULONG,
        ExecutionRoutine: PDRIVER_LIST_CONTROL,
        Context: PVOID,
        WriteToDevice: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn HalPutScatterGatherList(
        DmaAdapter: PADAPTER_OBJECT,
        ScatterGather: PSCATTER_GATHER_LIST,
        WriteToDevice: BOOLEAN,
    );
}
extern "C" {
    pub fn HalPutDmaAdapter(DmaAdapter: PADAPTER_OBJECT);
}
extern "C" {
    pub fn HalBugCheckSystem(
        ErrorSource: PWHEA_ERROR_SOURCE_DESCRIPTOR,
        ErrorRecord: PWHEA_ERROR_RECORD,
    );
}
extern "C" {
    #[must_use]
    pub fn HalAllocateHardwareCounters(
        GroupAffinty: PGROUP_AFFINITY,
        GroupCount: ULONG,
        ResourceList: PPHYSICAL_COUNTER_RESOURCE_LIST,
        CounterSetHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HalFreeHardwareCounters(CounterSetHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlIsTotalDeviceFailure(Status: NTSTATUS) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationThread(
        ThreadHandle: HANDLE,
        ThreadInformationClass: THREADINFOCLASS,
        ThreadInformation: PVOID,
        ThreadInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateTimer(
        TimerHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        TimerType: TIMER_TYPE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenTimer(
        TimerHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCancelTimer(TimerHandle: HANDLE, CurrentState: PBOOLEAN) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetTimer(
        TimerHandle: HANDLE,
        DueTime: PLARGE_INTEGER,
        TimerApcRoutine: PTIMER_APC_ROUTINE,
        TimerContext: PVOID,
        ResumeTimer: BOOLEAN,
        Period: LONG,
        PreviousState: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetTimerEx(
        TimerHandle: HANDLE,
        TimerSetInformationClass: TIMER_SET_INFORMATION_CLASS,
        TimerSetInformation: PVOID,
        TimerSetInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryVolumeInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FsInformation: PVOID,
        Length: ULONG,
        FsInformationClass: FS_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDeviceIoControlFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        IoControlCode: ULONG,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDisplayString(String: PUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwPowerInformation(
        InformationLevel: POWER_INFORMATION_LEVEL::Type,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwAllocateLocallyUniqueId(Luid: PLUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwTerminateProcess(ProcessHandle: HANDLE, ExitStatus: NTSTATUS) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenProcess(
        ProcessHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        ClientId: PCLIENT_ID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaAddErrorSourceDeviceDriver(
        Context: PVOID,
        Configuration: PWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER,
        NumberPreallocatedErrorReports: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaAddErrorSourceDeviceDriverV1(
        Context: PVOID,
        Configuration: PWHEA_ERROR_SOURCE_CONFIGURATION_DEVICE_DRIVER,
        NumBuffersToPreallocate: ULONG,
        MaxDataLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaRemoveErrorSourceDeviceDriver(ErrorSourceId: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaReportHwErrorDeviceDriver(
        ErrorSourceId: ULONG,
        DeviceObject: PDEVICE_OBJECT,
        ErrorData: PUCHAR,
        ErrorDataLength: ULONG,
        SectionTypeGuid: LPGUID,
        ErrorSeverity: WHEA_ERROR_SEVERITY,
        DeviceFriendlyName: LPSTR,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn WheaCreateHwErrorReportDeviceDriver(
        ErrorSourceId: ULONG,
        DeviceObject: PDEVICE_OBJECT,
    ) -> WHEA_ERROR_HANDLE;
}
extern "C" {
    #[must_use]
    pub fn WheaAddHwErrorReportSectionDeviceDriver(
        ErrorHandle: WHEA_ERROR_HANDLE,
        SectionDataLength: ULONG,
        BufferSet: PWHEA_DRIVER_BUFFER_SET,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaHwErrorReportAbandonDeviceDriver(
        ErrorHandle: WHEA_ERROR_HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaHwErrorReportSubmitDeviceDriver(
        ErrorHandle: WHEA_ERROR_HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaHwErrorReportSetSeverityDeviceDriver(
        ErrorHandle: WHEA_ERROR_HANDLE,
        ErrorSeverity: WHEA_ERROR_SEVERITY,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaHwErrorReportSetSectionNameDeviceDriver(
        BufferSet: PWHEA_DRIVER_BUFFER_SET,
        NameLength: ULONG,
        Name: PUCHAR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaReportHwError(ErrorPacket: PWHEA_ERROR_PACKET) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaAddErrorSource(
        ErrorSource: PWHEA_ERROR_SOURCE_DESCRIPTOR,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaInitializeRecordHeader(Header: PWHEA_ERROR_RECORD_HEADER) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaConfigureErrorSource(
        SourceType: WHEA_ERROR_SOURCE_TYPE,
        Configuration: PWHEA_ERROR_SOURCE_CONFIGURATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaUnconfigureErrorSource(SourceType: WHEA_ERROR_SOURCE_TYPE) -> NTSTATUS;
}
extern "C" {
    pub fn WheaRemoveErrorSource(ErrorSourceId: ULONG);
}
extern "C" {
    pub fn WheaLogInternalEvent(Entry: PWHEA_EVENT_LOG_ENTRY);
}
extern "C" {
    pub fn WheaErrorSourceGetState(ErrorSourceId: ULONG) -> WHEA_ERROR_SOURCE_STATE;
}
extern "C" {
    pub fn WheaIsCriticalState() -> BOOLEAN;
}
extern "C" {
    pub fn WheaSignalHandlerOverride(
        SourceType: WHEA_ERROR_SOURCE_TYPE,
        Context: UINT_PTR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn WheaUnregisterErrorSourceOverride(
        Type: WHEA_ERROR_SOURCE_TYPE,
        OverrideErrorSourceId: ULONG32,
    );
}
extern "C" {
    #[must_use]
    pub fn WheaRegisterErrorSourceOverride(
        OverrideSettings: WHEA_ERROR_SOURCE_OVERRIDE_SETTINGS,
        OverrideConfig: PWHEA_ERROR_SOURCE_CONFIGURATION,
        OverrideCallback: WHEA_SIGNAL_HANDLER_OVERRIDE_CALLBACK,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn WheaHighIrqlLogSelEventHandlerRegister(
        Handler: PFN_WHEA_HIGH_IRQL_LOG_SEL_EVENT_HANDLER,
        Context: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn WheaHighIrqlLogSelEventHandlerUnregister();
}
extern "C" {
    #[must_use]
    pub fn WheaRegisterInUsePageOfflineNotification(
        Callback: PFN_IN_USE_PAGE_OFFLINE_NOTIFY,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn WheaUnregisterInUsePageOfflineNotification(
        Callback: PFN_IN_USE_PAGE_OFFLINE_NOTIFY,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn WheaGetNotifyAllOfflinesPolicy() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn HvlRegisterWheaErrorNotification(
        Callback: PHVL_WHEA_ERROR_NOTIFICATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn HvlUnregisterWheaErrorNotification(
        Callback: PHVL_WHEA_ERROR_NOTIFICATION,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PshedAllocateMemory(Size: ULONG) -> PVOID;
}
extern "C" {
    pub fn PshedFreeMemory(Address: PVOID);
}
extern "C" {
    pub fn PshedIsSystemWheaEnabled() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PshedRegisterPlugin(
        Packet: PWHEA_PSHED_PLUGIN_REGISTRATION_PACKET,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PshedUnregisterPlugin(PluginHandle: PVOID);
}
extern "C" {
    pub fn PshedSynchronizeExecution(
        ErrorSource: PWHEA_ERROR_SOURCE_DESCRIPTOR,
        SynchronizeRoutine: PKSYNCHRONIZE_ROUTINE,
        SynchronizeContext: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn NtOpenThreadToken(
        ThreadHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        OpenAsSelf: BOOLEAN,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenThreadTokenEx(
        ThreadHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        OpenAsSelf: BOOLEAN,
        HandleAttributes: ULONG,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenProcessToken(
        ProcessHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenProcessTokenEx(
        ProcessHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        HandleAttributes: ULONG,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenJobObjectToken(
        JobHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtDuplicateToken(
        ExistingTokenHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        EffectiveOnly: BOOLEAN,
        TokenType: TOKEN_TYPE,
        NewTokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtFilterToken(
        ExistingTokenHandle: HANDLE,
        Flags: ULONG,
        SidsToDisable: PTOKEN_GROUPS,
        PrivilegesToDelete: PTOKEN_PRIVILEGES,
        RestrictedSids: PTOKEN_GROUPS,
        NewTokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtImpersonateAnonymousToken(ThreadHandle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationToken(
        TokenHandle: HANDLE,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: PVOID,
        TokenInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationToken(
        TokenHandle: HANDLE,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: PVOID,
        TokenInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAdjustPrivilegesToken(
        TokenHandle: HANDLE,
        DisableAllPrivileges: BOOLEAN,
        NewState: PTOKEN_PRIVILEGES,
        BufferLength: ULONG,
        PreviousState: PTOKEN_PRIVILEGES,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAdjustGroupsToken(
        TokenHandle: HANDLE,
        ResetToDefault: BOOLEAN,
        NewState: PTOKEN_GROUPS,
        BufferLength: ULONG,
        PreviousState: PTOKEN_GROUPS,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrivilegeCheck(
        ClientToken: HANDLE,
        RequiredPrivileges: PPRIVILEGE_SET,
        Result: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAccessCheckAndAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        ObjectTypeName: PUNICODE_STRING,
        ObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        DesiredAccess: ACCESS_MASK,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOLEAN,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
        GenerateOnClose: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAccessCheckByTypeAndAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        ObjectTypeName: PUNICODE_STRING,
        ObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: ACCESS_MASK,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: ULONG,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: ULONG,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOLEAN,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
        GenerateOnClose: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAccessCheckByTypeResultListAndAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        ObjectTypeName: PUNICODE_STRING,
        ObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: ACCESS_MASK,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: ULONG,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: ULONG,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOLEAN,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
        GenerateOnClose: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAccessCheckByTypeResultListAndAuditAlarmByHandle(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        ClientToken: HANDLE,
        ObjectTypeName: PUNICODE_STRING,
        ObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrincipalSelfSid: PSID,
        DesiredAccess: ACCESS_MASK,
        AuditType: AUDIT_EVENT_TYPE,
        Flags: ULONG,
        ObjectTypeList: POBJECT_TYPE_LIST,
        ObjectTypeListLength: ULONG,
        GenericMapping: PGENERIC_MAPPING,
        ObjectCreation: BOOLEAN,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
        GenerateOnClose: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenObjectAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        ObjectTypeName: PUNICODE_STRING,
        ObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        ClientToken: HANDLE,
        DesiredAccess: ACCESS_MASK,
        GrantedAccess: ACCESS_MASK,
        Privileges: PPRIVILEGE_SET,
        ObjectCreation: BOOLEAN,
        AccessGranted: BOOLEAN,
        GenerateOnClose: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrivilegeObjectAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        ClientToken: HANDLE,
        DesiredAccess: ACCESS_MASK,
        Privileges: PPRIVILEGE_SET,
        AccessGranted: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCloseObjectAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        GenerateOnClose: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtDeleteObjectAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        HandleId: PVOID,
        GenerateOnClose: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtPrivilegedServiceAuditAlarm(
        SubsystemName: PUNICODE_STRING,
        ServiceName: PUNICODE_STRING,
        ClientToken: HANDLE,
        Privileges: PPRIVILEGE_SET,
        AccessGranted: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCreateHeap(
        Flags: ULONG,
        HeapBase: PVOID,
        ReserveSize: SIZE_T,
        CommitSize: SIZE_T,
        Lock: PVOID,
        Parameters: PRTL_HEAP_PARAMETERS,
    ) -> PVOID;
}
extern "C" {
    pub fn RtlDestroyHeap(HeapHandle: PVOID) -> PVOID;
}
extern "C" {
    pub fn RtlAllocateHeap(HeapHandle: PVOID, Flags: ULONG, Size: SIZE_T) -> PVOID;
}
extern "C" {
    pub fn RtlFreeHeap(HeapHandle: PVOID, Flags: ULONG, BaseAddress: PVOID) -> LOGICAL;
}
extern "C" {
    pub fn RtlRandom(Seed: PULONG) -> ULONG;
}
extern "C" {
    pub fn RtlRandomEx(Seed: PULONG) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn RtlInitUnicodeStringEx(
        DestinationString: PUNICODE_STRING,
        SourceString: PCWSTR,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCreateUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCWSTR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlPrefixString(
        String1: *const STRING,
        String2: *const STRING,
        CaseInSensitive: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlAppendStringToString(
        Destination: PSTRING,
        Source: *const STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlOemStringToUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCOEM_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeStringToOemString(
        DestinationString: POEM_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUpcaseUnicodeStringToOemString(
        DestinationString: POEM_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlOemStringToCountedUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCOEM_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeStringToCountedOemString(
        DestinationString: POEM_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUpcaseUnicodeStringToCountedOemString(
        DestinationString: POEM_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlValidateUnicodeString(Flags: ULONG, String: PCUNICODE_STRING) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDuplicateUnicodeString(
        Flags: ULONG,
        StringIn: PCUNICODE_STRING,
        StringOut: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDowncaseUnicodeString(
        DestinationString: PUNICODE_STRING,
        SourceString: PCUNICODE_STRING,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlFreeOemString(OemString: POEM_STRING);
}
extern "C" {
    pub fn RtlxUnicodeStringToOemSize(UnicodeString: PCUNICODE_STRING) -> ULONG;
}
extern "C" {
    pub fn RtlxOemStringToUnicodeSize(OemString: PCOEM_STRING) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn RtlMultiByteToUnicodeN(
        UnicodeString: PWCH,
        MaxBytesInUnicodeString: ULONG,
        BytesInUnicodeString: PULONG,
        MultiByteString: *const CHAR,
        BytesInMultiByteString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlMultiByteToUnicodeSize(
        BytesInUnicodeString: PULONG,
        MultiByteString: *const CHAR,
        BytesInMultiByteString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeToMultiByteSize(
        BytesInMultiByteString: PULONG,
        UnicodeString: PCWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeToMultiByteN(
        MultiByteString: PCHAR,
        MaxBytesInMultiByteString: ULONG,
        BytesInMultiByteString: PULONG,
        UnicodeString: PCWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUpcaseUnicodeToMultiByteN(
        MultiByteString: PCHAR,
        MaxBytesInMultiByteString: ULONG,
        BytesInMultiByteString: PULONG,
        UnicodeString: PCWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlOemToUnicodeN(
        UnicodeString: PWCH,
        MaxBytesInUnicodeString: ULONG,
        BytesInUnicodeString: PULONG,
        OemString: PCCH,
        BytesInOemString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeToOemN(
        OemString: PCHAR,
        MaxBytesInOemString: ULONG,
        BytesInOemString: PULONG,
        UnicodeString: PCWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUpcaseUnicodeToOemN(
        OemString: PCHAR,
        MaxBytesInOemString: ULONG,
        BytesInOemString: PULONG,
        UnicodeString: PCWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlNormalizeString(
        NormForm: ULONG,
        SourceString: PCWSTR,
        SourceStringLength: LONG,
        DestinationString: PWSTR,
        DestinationStringLength: PLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIsNormalizedString(
        NormForm: ULONG,
        SourceString: PCWSTR,
        SourceStringLength: LONG,
        Normalized: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIdnToAscii(
        Flags: ULONG,
        SourceString: PCWSTR,
        SourceStringLength: LONG,
        DestinationString: PWSTR,
        DestinationStringLength: PLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIdnToUnicode(
        Flags: ULONG,
        SourceString: PCWSTR,
        SourceStringLength: LONG,
        DestinationString: PWSTR,
        DestinationStringLength: PLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIdnToNameprepUnicode(
        Flags: ULONG,
        SourceString: PCWSTR,
        SourceStringLength: LONG,
        DestinationString: PWSTR,
        DestinationStringLength: PLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGenerate8dot3Name(
        Name: PCUNICODE_STRING,
        AllowExtendedCharacters: BOOLEAN,
        Context: PGENERATE_NAME_CONTEXT,
        Name8dot3: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIsNameLegalDOS8Dot3(
        Name: PCUNICODE_STRING,
        OemName: POEM_STRING,
        NameContainsSpaces: PBOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlIsValidOemCharacter(Char: PWCHAR) -> BOOLEAN;
}
extern "C" {
    pub fn PfxInitialize(PrefixTable: PPREFIX_TABLE);
}
extern "C" {
    pub fn PfxInsertPrefix(
        PrefixTable: PPREFIX_TABLE,
        Prefix: PSTRING,
        PrefixTableEntry: PPREFIX_TABLE_ENTRY,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn PfxRemovePrefix(
        PrefixTable: PPREFIX_TABLE,
        PrefixTableEntry: PPREFIX_TABLE_ENTRY,
    );
}
extern "C" {
    pub fn PfxFindPrefix(
        PrefixTable: PPREFIX_TABLE,
        FullName: PSTRING,
    ) -> PPREFIX_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlInitializeUnicodePrefix(PrefixTable: PUNICODE_PREFIX_TABLE);
}
extern "C" {
    pub fn RtlInsertUnicodePrefix(
        PrefixTable: PUNICODE_PREFIX_TABLE,
        Prefix: PUNICODE_STRING,
        PrefixTableEntry: PUNICODE_PREFIX_TABLE_ENTRY,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlRemoveUnicodePrefix(
        PrefixTable: PUNICODE_PREFIX_TABLE,
        PrefixTableEntry: PUNICODE_PREFIX_TABLE_ENTRY,
    );
}
extern "C" {
    pub fn RtlFindUnicodePrefix(
        PrefixTable: PUNICODE_PREFIX_TABLE,
        FullName: PCUNICODE_STRING,
        CaseInsensitiveIndex: ULONG,
    ) -> PUNICODE_PREFIX_TABLE_ENTRY;
}
extern "C" {
    pub fn RtlNextUnicodePrefix(
        PrefixTable: PUNICODE_PREFIX_TABLE,
        Restart: BOOLEAN,
    ) -> PUNICODE_PREFIX_TABLE_ENTRY;
}
extern "C" {
    #[must_use]
    pub fn RtlGetCompressionWorkSpaceSize(
        CompressionFormatAndEngine: USHORT,
        CompressBufferWorkSpaceSize: PULONG,
        CompressFragmentWorkSpaceSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCompressBuffer(
        CompressionFormatAndEngine: USHORT,
        UncompressedBuffer: PUCHAR,
        UncompressedBufferSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        UncompressedChunkSize: ULONG,
        FinalCompressedSize: PULONG,
        WorkSpace: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDecompressBuffer(
        CompressionFormat: USHORT,
        UncompressedBuffer: PUCHAR,
        UncompressedBufferSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        FinalUncompressedSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDecompressBufferEx(
        CompressionFormat: USHORT,
        UncompressedBuffer: PUCHAR,
        UncompressedBufferSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        FinalUncompressedSize: PULONG,
        WorkSpace: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDecompressBufferEx2(
        CompressionFormat: USHORT,
        UncompressedBuffer: PUCHAR,
        UncompressedBufferSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        UncompressedChunkSize: ULONG,
        FinalUncompressedSize: PULONG,
        WorkSpace: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDecompressFragment(
        CompressionFormat: USHORT,
        UncompressedFragment: PUCHAR,
        UncompressedFragmentSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        FragmentOffset: ULONG,
        FinalUncompressedSize: PULONG,
        WorkSpace: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDecompressFragmentEx(
        CompressionFormat: USHORT,
        UncompressedFragment: PUCHAR,
        UncompressedFragmentSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        FragmentOffset: ULONG,
        UncompressedChunkSize: ULONG,
        FinalUncompressedSize: PULONG,
        WorkSpace: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDescribeChunk(
        CompressionFormat: USHORT,
        CompressedBuffer: *mut PUCHAR,
        EndOfCompressedBufferPlus1: PUCHAR,
        ChunkBuffer: *mut PUCHAR,
        ChunkSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlReserveChunk(
        CompressionFormat: USHORT,
        CompressedBuffer: *mut PUCHAR,
        EndOfCompressedBufferPlus1: PUCHAR,
        ChunkBuffer: *mut PUCHAR,
        ChunkSize: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDecompressChunks(
        UncompressedBuffer: PUCHAR,
        UncompressedBufferSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        CompressedTail: PUCHAR,
        CompressedTailSize: ULONG,
        CompressedDataInfo: PCOMPRESSED_DATA_INFO,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCompressChunks(
        UncompressedBuffer: PUCHAR,
        UncompressedBufferSize: ULONG,
        CompressedBuffer: PUCHAR,
        CompressedBufferSize: ULONG,
        CompressedDataInfo: PCOMPRESSED_DATA_INFO,
        CompressedDataInfoLength: ULONG,
        WorkSpace: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCompareMemoryUlong(
        Source: PVOID,
        Length: SIZE_T,
        Pattern: ULONG,
    ) -> SIZE_T;
}
extern "C" {
    pub fn RtlTimeToSecondsSince1980(
        Time: PLARGE_INTEGER,
        ElapsedSeconds: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlSecondsSince1980ToTime(ElapsedSeconds: ULONG, Time: PLARGE_INTEGER);
}
extern "C" {
    pub fn RtlTimeToSecondsSince1970(
        Time: PLARGE_INTEGER,
        ElapsedSeconds: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlSecondsSince1970ToTime(ElapsedSeconds: ULONG, Time: PLARGE_INTEGER);
}
extern "C" {
    pub fn RtlValidSid(Sid: PSID) -> BOOLEAN;
}
extern "C" {
    pub fn RtlEqualSid(Sid1: PSID, Sid2: PSID) -> BOOLEAN;
}
extern "C" {
    pub fn RtlEqualPrefixSid(Sid1: PSID, Sid2: PSID) -> BOOLEAN;
}
extern "C" {
    pub fn RtlLengthRequiredSid(SubAuthorityCount: ULONG) -> ULONG;
}
extern "C" {
    pub fn RtlFreeSid(Sid: PSID) -> PVOID;
}
extern "C" {
    #[must_use]
    pub fn RtlAllocateAndInitializeSid(
        IdentifierAuthority: PSID_IDENTIFIER_AUTHORITY,
        SubAuthorityCount: UCHAR,
        SubAuthority0: ULONG,
        SubAuthority1: ULONG,
        SubAuthority2: ULONG,
        SubAuthority3: ULONG,
        SubAuthority4: ULONG,
        SubAuthority5: ULONG,
        SubAuthority6: ULONG,
        SubAuthority7: ULONG,
        Sid: *mut PSID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAllocateAndInitializeSidEx(
        IdentifierAuthority: PSID_IDENTIFIER_AUTHORITY,
        SubAuthorityCount: UCHAR,
        SubAuthorities: PULONG,
        Sid: *mut PSID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInitializeSid(
        Sid: PSID,
        IdentifierAuthority: PSID_IDENTIFIER_AUTHORITY,
        SubAuthorityCount: UCHAR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlInitializeSidEx(
        Sid: PSID,
        IdentifierAuthority: PSID_IDENTIFIER_AUTHORITY,
        SubAuthorityCount: UCHAR,
        ...
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIdentifierAuthoritySid(Sid: PSID) -> PSID_IDENTIFIER_AUTHORITY;
}
extern "C" {
    pub fn RtlSubAuthoritySid(Sid: PSID, SubAuthority: ULONG) -> PULONG;
}
extern "C" {
    pub fn RtlSubAuthorityCountSid(Sid: PSID) -> PUCHAR;
}
extern "C" {
    pub fn RtlLengthSid(Sid: PSID) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn RtlCopySid(
        DestinationSidLength: ULONG,
        DestinationSid: PSID,
        SourceSid: PSID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCreateServiceSid(
        ServiceName: PUNICODE_STRING,
        ServiceSid: PSID,
        ServiceSidLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGetSaclSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SaclPresent: PBOOLEAN,
        Sacl: *mut PACL,
        SaclDefaulted: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlReplaceSidInSd(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        OldSid: PSID,
        NewSid: PSID,
        NumChanges: *mut ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCreateVirtualAccountSid(
        Name: PCUNICODE_STRING,
        BaseSubAuthority: ULONG,
        Sid: PSID,
        SidLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlConvertSidToUnicodeString(
        UnicodeString: PUNICODE_STRING,
        Sid: PSID,
        AllocateDestinationString: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCopyLuid(DestinationLuid: PLUID, SourceLuid: PLUID);
}
extern "C" {
    #[must_use]
    pub fn RtlCreateAcl(Acl: PACL, AclLength: ULONG, AclRevision: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAddAce(
        Acl: PACL,
        AceRevision: ULONG,
        StartingAceIndex: ULONG,
        AceList: PVOID,
        AceListLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlDeleteAce(Acl: PACL, AceIndex: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGetAce(Acl: PACL, AceIndex: ULONG, Ace: *mut PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAddAccessAllowedAce(
        Acl: PACL,
        AceRevision: ULONG,
        AccessMask: ACCESS_MASK,
        Sid: PSID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAddAccessAllowedAceEx(
        Acl: PACL,
        AceRevision: ULONG,
        AceFlags: ULONG,
        AccessMask: ACCESS_MASK,
        Sid: PSID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlCreateSecurityDescriptorRelative(
        SecurityDescriptor: PISECURITY_DESCRIPTOR_RELATIVE,
        Revision: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGetDaclSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        DaclPresent: PBOOLEAN,
        Dacl: *mut PACL,
        DaclDefaulted: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlSetOwnerSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Owner: PSID,
        OwnerDefaulted: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlSetGroupSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Group: PSID,
        GroupDefaulted: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGetGroupSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Group: *mut PSID,
        GroupDefaulted: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlAbsoluteToSelfRelativeSD(
        AbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR,
        SelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR,
        BufferLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlSelfRelativeToAbsoluteSD(
        SelfRelativeSecurityDescriptor: PSECURITY_DESCRIPTOR,
        AbsoluteSecurityDescriptor: PSECURITY_DESCRIPTOR,
        AbsoluteSecurityDescriptorSize: PULONG,
        Dacl: PACL,
        DaclSize: PULONG,
        Sacl: PACL,
        SaclSize: PULONG,
        Owner: PSID,
        OwnerSize: PULONG,
        PrimaryGroup: PSID,
        PrimaryGroupSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlGetOwnerSecurityDescriptor(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Owner: *mut PSID,
        OwnerDefaulted: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlNtStatusToDosError(Status: NTSTATUS) -> ULONG;
}
extern "C" {
    pub fn RtlNtStatusToDosErrorNoTeb(Status: NTSTATUS) -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn RtlCustomCPToUnicodeN(
        CustomCP: PCPTABLEINFO,
        UnicodeString: PWCH,
        MaxBytesInUnicodeString: ULONG,
        BytesInUnicodeString: PULONG,
        CustomCPString: PCH,
        BytesInCustomCPString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUnicodeToCustomCPN(
        CustomCP: PCPTABLEINFO,
        CustomCPString: PCH,
        MaxBytesInCustomCPString: ULONG,
        BytesInCustomCPString: PULONG,
        UnicodeString: PWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlUpcaseUnicodeToCustomCPN(
        CustomCP: PCPTABLEINFO,
        CustomCPString: PCH,
        MaxBytesInCustomCPString: ULONG,
        BytesInCustomCPString: PULONG,
        UnicodeString: PWCH,
        BytesInUnicodeString: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlInitCodePageTable(TableBase: PUSHORT, CodePageTable: PCPTABLEINFO);
}
extern "C" {
    #[must_use]
    pub fn RtlCreateSystemVolumeInformationFolder(
        VolumeRootPath: PCUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlCompareAltitudes(
        Altitude1: PCUNICODE_STRING,
        Altitude2: PCUNICODE_STRING,
    ) -> LONG;
}
extern "C" {
    #[must_use]
    pub fn RtlQueryPackageIdentity(
        TokenObject: PVOID,
        PackageFullName: PWSTR,
        PackageSize: PSIZE_T,
        AppId: PWSTR,
        AppIdSize: PSIZE_T,
        Packaged: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlQueryPackageIdentityEx(
        TokenObject: PVOID,
        PackageFullName: PWSTR,
        PackageSize: PSIZE_T,
        AppId: PWSTR,
        AppIdSize: PSIZE_T,
        DynamicId: LPGUID,
        Flags: PULONG64,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlIsNonEmptyDirectoryReparsePointAllowed(ReparseTag: ULONG) -> BOOLEAN;
}
extern "C" {
    pub fn RtlIsCloudFilesPlaceholder(
        FileAttributes: ULONG,
        ReparseTag: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlIsPartialPlaceholder(FileAttributes: ULONG, ReparseTag: ULONG) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn RtlIsPartialPlaceholderFileHandle(
        FileHandle: HANDLE,
        IsPartialPlaceholder: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn RtlIsPartialPlaceholderFileInfo(
        InfoBuffer: *const ::core::ffi::c_void,
        InfoClass: FILE_INFORMATION_CLASS,
        IsPartialPlaceholder: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn RtlQueryThreadPlaceholderCompatibilityMode() -> CHAR;
}
extern "C" {
    pub fn RtlSetThreadPlaceholderCompatibilityMode(Mode: CHAR) -> CHAR;
}
extern "C" {
    pub fn RtlQueryProcessPlaceholderCompatibilityMode() -> CHAR;
}
extern "C" {
    pub fn RtlSetProcessPlaceholderCompatibilityMode(Mode: CHAR) -> CHAR;
}
extern "C" {
    pub fn RtlCaptureStackBackTrace(
        FramesToSkip: ULONG,
        FramesToCapture: ULONG,
        BackTrace: *mut PVOID,
        BackTraceHash: PULONG,
    ) -> USHORT;
}
extern "C" {
    pub fn RtlCaptureContext(ContextRecord: PCONTEXT);
}
extern "C" {
    pub fn RtlCaptureContext2(ContextRecord: PCONTEXT);
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationThread(
        ThreadHandle: HANDLE,
        ThreadInformationClass: THREADINFOCLASS,
        ThreadInformation: PVOID,
        ThreadInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn LsaRegisterLogonProcess(
        LogonProcessName: PLSA_STRING,
        LsaHandle: PHANDLE,
        SecurityMode: PLSA_OPERATIONAL_MODE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn LsaLogonUser(
        LsaHandle: HANDLE,
        OriginName: PLSA_STRING,
        LogonType: SECURITY_LOGON_TYPE,
        AuthenticationPackage: ULONG,
        AuthenticationInformation: PVOID,
        AuthenticationInformationLength: ULONG,
        LocalGroups: PTOKEN_GROUPS,
        SourceContext: PTOKEN_SOURCE,
        ProfileBuffer: *mut PVOID,
        ProfileBufferLength: PULONG,
        LogonId: PLUID,
        Token: PHANDLE,
        Quotas: PQUOTA_LIMITS,
        SubStatus: PNTSTATUS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn LsaFreeReturnBuffer(Buffer: PVOID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCreateFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        AllocationSize: PLARGE_INTEGER,
        FileAttributes: ULONG,
        ShareAccess: ULONG,
        CreateDisposition: ULONG,
        CreateOptions: ULONG,
        EaBuffer: PVOID,
        EaLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtDeviceIoControlFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        IoControlCode: ULONG,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtFsControlFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FsControlCode: ULONG,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtLockFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ByteOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        Key: ULONG,
        FailImmediately: BOOLEAN,
        ExclusiveLock: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtOpenFile(
        FileHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ShareAccess: ULONG,
        OpenOptions: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryDirectoryFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
        ReturnSingleEntry: BOOLEAN,
        FileName: PUNICODE_STRING,
        RestartScan: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryDirectoryFileEx(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
        QueryFlags: ULONG,
        FileName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationByName(
        ObjectAttributes: POBJECT_ATTRIBUTES,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryQuotaInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ReturnSingleEntry: BOOLEAN,
        SidList: PVOID,
        SidListLength: ULONG,
        StartSid: PSID,
        RestartScan: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryVolumeInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FsInformation: PVOID,
        Length: ULONG,
        FsInformationClass: FS_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtReadFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ByteOffset: PLARGE_INTEGER,
        Key: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetQuotaInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetVolumeInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FsInformation: PVOID,
        Length: ULONG,
        FsInformationClass: FS_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtWriteFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ByteOffset: PLARGE_INTEGER,
        Key: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtUnlockFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ByteOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        Key: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtFlushBuffersFileEx(
        FileHandle: HANDLE,
        Flags: ULONG,
        Parameters: PVOID,
        ParametersSize: ULONG,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCopyFileChunk(
        SourceHandle: HANDLE,
        DestHandle: HANDLE,
        Event: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Length: ULONG,
        SourceOffset: PLARGE_INTEGER,
        DestOffset: PLARGE_INTEGER,
        SourceKey: PULONG,
        DestKey: PULONG,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryObject(
        Handle: HANDLE,
        ObjectInformationClass: OBJECT_INFORMATION_CLASS,
        ObjectInformation: PVOID,
        ObjectInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetSecurityObject(
        Handle: HANDLE,
        SecurityInformation: SECURITY_INFORMATION,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQuerySecurityObject(
        Handle: HANDLE,
        SecurityInformation: SECURITY_INFORMATION,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Length: ULONG,
        LengthNeeded: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtClose(Handle: HANDLE) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCreateSection(
        SectionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        MaximumSize: PLARGE_INTEGER,
        SectionPageProtection: ULONG,
        AllocationAttributes: ULONG,
        FileHandle: HANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtCreateSectionEx(
        SectionHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        MaximumSize: PLARGE_INTEGER,
        SectionPageProtection: ULONG,
        AllocationAttributes: ULONG,
        FileHandle: HANDLE,
        ExtendedParameters: PMEM_EXTENDED_PARAMETER,
        ExtendedParameterCount: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtAllocateVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        ZeroBits: ULONG_PTR,
        RegionSize: PSIZE_T,
        AllocationType: ULONG,
        Protect: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtFreeVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        RegionSize: PSIZE_T,
        FreeType: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtQueryVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: PVOID,
        MemoryInformationClass: MEMORY_INFORMATION_CLASS,
        MemoryInformation: PVOID,
        MemoryInformationLength: SIZE_T,
        ReturnLength: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn NtSetInformationVirtualMemory(
        ProcessHandle: HANDLE,
        VmInformationClass: VIRTUAL_MEMORY_INFORMATION_CLASS,
        NumberOfEntries: ULONG_PTR,
        VirtualAddresses: PMEMORY_RANGE_ENTRY,
        VmInformation: PVOID,
        VmInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn KeInitializeMutant(Mutant: PRKMUTANT, InitialOwner: BOOLEAN);
}
extern "C" {
    pub fn KeQueryOwnerMutant(Mutant: PKMUTANT, ClientId: PCLIENT_ID);
}
extern "C" {
    pub fn KeReadStateMutant(Mutant: PRKMUTANT) -> LONG;
}
extern "C" {
    pub fn KeReleaseMutant(
        Mutant: PRKMUTANT,
        Increment: KPRIORITY,
        Abandoned: BOOLEAN,
        Wait: BOOLEAN,
    ) -> LONG;
}
extern "C" {
    pub fn KeInitializeQueue(Queue: PRKQUEUE, Count: ULONG);
}
extern "C" {
    pub fn KeReadStateQueue(Queue: PRKQUEUE) -> LONG;
}
extern "C" {
    pub fn KeInsertQueue(Queue: PRKQUEUE, Entry: PLIST_ENTRY) -> LONG;
}
extern "C" {
    pub fn KeInsertHeadQueue(Queue: PRKQUEUE, Entry: PLIST_ENTRY) -> LONG;
}
extern "C" {
    pub fn KeRemoveQueue(
        Queue: PRKQUEUE,
        WaitMode: KPROCESSOR_MODE,
        Timeout: PLARGE_INTEGER,
    ) -> PLIST_ENTRY;
}
extern "C" {
    pub fn KeRemoveQueueEx(
        Queue: PKQUEUE,
        WaitMode: KPROCESSOR_MODE,
        Alertable: BOOLEAN,
        Timeout: PLARGE_INTEGER,
        EntryArray: *mut PLIST_ENTRY,
        Count: ULONG,
    ) -> ULONG;
}
extern "C" {
    pub fn KeRundownQueue(Queue: PRKQUEUE) -> PLIST_ENTRY;
}
extern "C" {
    pub fn KeAttachProcess(Process: PRKPROCESS);
}
extern "C" {
    pub fn KeDetachProcess();
}
extern "C" {
    pub fn KeStackAttachProcess(PROCESS: PRKPROCESS, ApcState: PRKAPC_STATE);
}
extern "C" {
    pub fn KeUnstackDetachProcess(ApcState: PRKAPC_STATE);
}
extern "C" {
    pub fn KeSetIdealProcessorThread(Thread: PKTHREAD, Processor: UCHAR) -> UCHAR;
}
extern "C" {
    pub fn KeSetKernelStackSwapEnable(Enable: BOOLEAN) -> BOOLEAN;
}
extern "C" {
    pub fn KeAcquireQueuedSpinLock(Number: KSPIN_LOCK_QUEUE_NUMBER) -> KIRQL;
}
extern "C" {
    pub fn KeReleaseQueuedSpinLock(Number: KSPIN_LOCK_QUEUE_NUMBER, OldIrql: KIRQL);
}
extern "C" {
    pub fn KeTryToAcquireQueuedSpinLock(
        Number: KSPIN_LOCK_QUEUE_NUMBER,
        OldIrql: PKIRQL,
    ) -> LOGICAL;
}
extern "C" {
    pub fn KeAcquireSpinLockRaiseToSynch(SpinLock: PKSPIN_LOCK) -> KIRQL;
}
extern "C" {
    pub fn ExQueryPoolBlockSize(PoolBlock: PVOID, QuotaCharged: PBOOLEAN) -> SIZE_T;
}
extern "C" {
    pub fn InterlockedPushListSList(
        ListHead: PSLIST_HEADER,
        List: PSLIST_ENTRY,
        ListEnd: PSLIST_ENTRY,
        Count: ULONG,
    ) -> PSLIST_ENTRY;
}
extern "C" {
    pub fn ExAdjustLookasideDepth();
}
extern "C" {
    pub fn ExDisableResourceBoostLite(Resource: PERESOURCE);
}
extern "C" {
    pub fn SeDeleteClientSecurity(ClientContext: PSECURITY_CLIENT_CONTEXT);
}
extern "C" {
    pub fn SeCaptureSubjectContextEx(
        Thread: PETHREAD,
        Process: PEPROCESS,
        SubjectContext: PSECURITY_SUBJECT_CONTEXT,
    );
}
extern "C" {
    #[must_use]
    pub fn SeReportSecurityEventWithSubCategory(
        Flags: ULONG,
        SourceName: PUNICODE_STRING,
        UserSid: PSID,
        AuditParameters: PSE_ADT_PARAMETER_ARRAY,
        AuditSubcategoryId: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeAccessCheckFromState(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrimaryTokenInformation: PTOKEN_ACCESS_INFORMATION,
        ClientTokenInformation: PTOKEN_ACCESS_INFORMATION,
        DesiredAccess: ACCESS_MASK,
        PreviouslyGrantedAccess: ACCESS_MASK,
        Privileges: *mut PPRIVILEGE_SET,
        GenericMapping: PGENERIC_MAPPING,
        AccessMode: KPROCESSOR_MODE,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAccessCheckFromStateEx(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        PrimaryToken: PACCESS_TOKEN,
        ClientToken: PACCESS_TOKEN,
        DesiredAccess: ACCESS_MASK,
        PreviouslyGrantedAccess: ACCESS_MASK,
        Privileges: *mut PPRIVILEGE_SET,
        GenericMapping: PGENERIC_MAPPING,
        AccessMode: KPROCESSOR_MODE,
        GrantedAccess: PACCESS_MASK,
        AccessStatus: PNTSTATUS,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn SeTokenFromAccessInformation(
        AccessInformation: PTOKEN_ACCESS_INFORMATION,
        Token: PACCESS_TOKEN,
        Length: ULONG,
        RequiredLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SePrivilegeCheck(
        RequiredPrivileges: PPRIVILEGE_SET,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
        AccessMode: KPROCESSOR_MODE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeFreePrivileges(Privileges: PPRIVILEGE_SET);
}
extern "C" {
    pub fn SeOpenObjectAuditAlarm(
        ObjectTypeName: PUNICODE_STRING,
        Object: PVOID,
        AbsoluteObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
        ObjectCreated: BOOLEAN,
        AccessGranted: BOOLEAN,
        AccessMode: KPROCESSOR_MODE,
        GenerateOnClose: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeOpenObjectAuditAlarmWithTransaction(
        ObjectTypeName: PUNICODE_STRING,
        Object: PVOID,
        AbsoluteObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
        ObjectCreated: BOOLEAN,
        AccessGranted: BOOLEAN,
        AccessMode: KPROCESSOR_MODE,
        TransactionId: *mut GUID,
        GenerateOnClose: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeOpenObjectForDeleteAuditAlarm(
        ObjectTypeName: PUNICODE_STRING,
        Object: PVOID,
        AbsoluteObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
        ObjectCreated: BOOLEAN,
        AccessGranted: BOOLEAN,
        AccessMode: KPROCESSOR_MODE,
        GenerateOnClose: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeOpenObjectForDeleteAuditAlarmWithTransaction(
        ObjectTypeName: PUNICODE_STRING,
        Object: PVOID,
        AbsoluteObjectName: PUNICODE_STRING,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
        ObjectCreated: BOOLEAN,
        AccessGranted: BOOLEAN,
        AccessMode: KPROCESSOR_MODE,
        TransactionId: *mut GUID,
        GenerateOnClose: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeExamineSacl(
        Sacl: PACL,
        ResourceSacl: PACL,
        Token: PACCESS_TOKEN,
        DesiredAccess: ACCESS_MASK,
        AccessGranted: BOOLEAN,
        GenerateAudit: PBOOLEAN,
        GenerateAlarm: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeDeleteObjectAuditAlarm(Object: PVOID, Handle: HANDLE);
}
extern "C" {
    pub fn SeDeleteObjectAuditAlarmWithTransaction(
        Object: PVOID,
        Handle: HANDLE,
        TransactionId: *mut GUID,
    );
}
extern "C" {
    pub fn SeTokenType(Token: PACCESS_TOKEN) -> TOKEN_TYPE;
}
extern "C" {
    pub fn SeTokenIsAdmin(Token: PACCESS_TOKEN) -> BOOLEAN;
}
extern "C" {
    pub fn SeTokenIsRestricted(Token: PACCESS_TOKEN) -> BOOLEAN;
}
extern "C" {
    pub fn SeTokenIsWriteRestricted(Token: PACCESS_TOKEN) -> BOOLEAN;
}
extern "C" {
    pub fn SeTokenIsNoChildProcessRestrictionEnforced(
        Token: PACCESS_TOKEN,
        UnlessSecure: PBOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeTokenSetNoChildProcessRestricted(
        Token: PACCESS_TOKEN,
        UnlessSecure: BOOLEAN,
        AuditOnly: BOOLEAN,
    );
}
extern "C" {
    pub fn SeTokenGetNoChildProcessRestricted(
        Token: PACCESS_TOKEN,
        Enforced: PBOOLEAN,
        UnlessSecure: PBOOLEAN,
        AuditOnly: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeTokenSetRedirectionTrustPolicy(Token: PACCESS_TOKEN, AuditOnly: BOOLEAN);
}
extern "C" {
    pub fn SeTokenGetRedirectionTrustPolicy(
        Token: PACCESS_TOKEN,
        Enforced: PBOOLEAN,
        AuditOnly: PBOOLEAN,
    );
}
extern "C" {
    #[must_use]
    pub fn SeFilterToken(
        ExistingToken: PACCESS_TOKEN,
        Flags: ULONG,
        SidsToDisable: PTOKEN_GROUPS,
        PrivilegesToDelete: PTOKEN_PRIVILEGES,
        RestrictedSids: PTOKEN_GROUPS,
        FilteredToken: *mut PACCESS_TOKEN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeQueryAuthenticationIdToken(
        Token: PACCESS_TOKEN,
        AuthenticationId: PLUID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeQueryTokenIntegrity(Token: PACCESS_TOKEN, IntegritySA: PSID_AND_ATTRIBUTES);
}
extern "C" {
    #[must_use]
    pub fn SeQuerySessionIdToken(Token: PACCESS_TOKEN, SessionId: PULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeQuerySessionIdTokenEx(
        Token: PACCESS_TOKEN,
        SessionId: PULONG,
        IsServiceSession: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeQueryServerSiloToken(
        Token: PACCESS_TOKEN,
        pServerSilo: *mut PESILO,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeSetSessionIdToken(Token: PACCESS_TOKEN, SessionId: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeCreateClientSecurity(
        ClientThread: PETHREAD,
        ClientSecurityQos: PSECURITY_QUALITY_OF_SERVICE,
        RemoteSession: BOOLEAN,
        ClientContext: PSECURITY_CLIENT_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeImpersonateClient(
        ClientContext: PSECURITY_CLIENT_CONTEXT,
        ServerThread: PETHREAD,
    );
}
extern "C" {
    #[must_use]
    pub fn SeImpersonateClientEx(
        ClientContext: PSECURITY_CLIENT_CONTEXT,
        ServerThread: PETHREAD,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeCreateClientSecurityFromSubjectContext(
        SubjectContext: PSECURITY_SUBJECT_CONTEXT,
        ClientSecurityQos: PSECURITY_QUALITY_OF_SERVICE,
        ServerIsRemote: BOOLEAN,
        ClientContext: PSECURITY_CLIENT_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeQuerySecurityDescriptorInfo(
        SecurityInformation: PSECURITY_INFORMATION,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Length: PULONG,
        ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeSetSecurityDescriptorInfo(
        Object: PVOID,
        SecurityInformation: PSECURITY_INFORMATION,
        ModificationDescriptor: PSECURITY_DESCRIPTOR,
        ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        PoolType: POOL_TYPE,
        GenericMapping: PGENERIC_MAPPING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeSetSecurityDescriptorInfoEx(
        Object: PVOID,
        SecurityInformation: PSECURITY_INFORMATION,
        ModificationDescriptor: PSECURITY_DESCRIPTOR,
        ObjectsSecurityDescriptor: *mut PSECURITY_DESCRIPTOR,
        AutoInheritFlags: ULONG,
        PoolType: POOL_TYPE,
        GenericMapping: PGENERIC_MAPPING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeAppendPrivileges(
        AccessState: PACCESS_STATE,
        Privileges: PPRIVILEGE_SET,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeAuditHardLinkCreation(
        FileName: PUNICODE_STRING,
        LinkName: PUNICODE_STRING,
        bSuccess: BOOLEAN,
    );
}
extern "C" {
    pub fn SeAuditHardLinkCreationWithTransaction(
        FileName: PUNICODE_STRING,
        LinkName: PUNICODE_STRING,
        bSuccess: BOOLEAN,
        TransactionId: *mut GUID,
    );
}
extern "C" {
    pub fn SeAuditFipsCryptoSelftests(bSuccess: BOOLEAN, SelftestCode: ULONG);
}
extern "C" {
    pub fn SeAuditTransactionStateChange(
        TransactionId: *mut GUID,
        ResourceManagerId: *mut GUID,
        NewTransactionState: ULONG,
    );
}
extern "C" {
    pub fn SeAuditingFileEvents(
        AccessGranted: BOOLEAN,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingFileEventsWithContext(
        AccessGranted: BOOLEAN,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingAnyFileEventsWithContext(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingFileEventsWithContextEx(
        AccessGranted: BOOLEAN,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
        StagingEnabled: PBOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingAnyFileEventsWithContextEx(
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
        StagingEnabled: PBOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAdjustAccessStateForTrustLabel(
        ObjectType: PVOID,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
    );
}
extern "C" {
    pub fn SeAdjustAccessStateForAccessConstraints(
        ObjectType: PVOID,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
    );
}
extern "C" {
    pub fn SeShouldCheckForAccessRightsFromParent(
        ObjectType: PVOID,
        ChildDescriptor: PSECURITY_DESCRIPTOR,
        AccessState: PACCESS_STATE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingHardLinkEvents(
        AccessGranted: BOOLEAN,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingHardLinkEventsWithContext(
        AccessGranted: BOOLEAN,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeAuditingFileOrGlobalEvents(
        AccessGranted: BOOLEAN,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeSetAccessStateGenericMapping(
        AccessState: PACCESS_STATE,
        GenericMapping: PGENERIC_MAPPING,
    );
}
extern "C" {
    #[must_use]
    pub fn SeRegisterLogonSessionTerminatedRoutine(
        CallbackRoutine: PSE_LOGON_SESSION_TERMINATED_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeUnregisterLogonSessionTerminatedRoutine(
        CallbackRoutine: PSE_LOGON_SESSION_TERMINATED_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeRegisterLogonSessionTerminatedRoutineEx(
        CallbackRoutine: PSE_LOGON_SESSION_TERMINATED_ROUTINE_EX,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeUnregisterLogonSessionTerminatedRoutineEx(
        CallbackRoutine: PSE_LOGON_SESSION_TERMINATED_ROUTINE_EX,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeMarkLogonSessionForTerminationNotification(LogonId: PLUID) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeMarkLogonSessionForTerminationNotificationEx(
        LogonId: PLUID,
        pServerSilo: PESILO,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeQueryInformationToken(
        Token: PACCESS_TOKEN,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SeLocateProcessImageName(
        Process: PEPROCESS,
        pImageFileName: *mut PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn SeExamineGlobalSacl(
        ObjectType: PUNICODE_STRING,
        ResourceSacl: PACL,
        Token: PACCESS_TOKEN,
        DesiredAccess: ACCESS_MASK,
        AccessGranted: BOOLEAN,
        GenerateAudit: PBOOLEAN,
        GenerateAlarm: PBOOLEAN,
    );
}
extern "C" {
    pub fn SeMaximumAuditMaskFromGlobalSacl(
        ObjectTypeName: PUNICODE_STRING,
        GrantedAccess: ACCESS_MASK,
        Token: PACCESS_TOKEN,
        AuditMask: PACCESS_MASK,
    );
}
extern "C" {
    pub fn RtlIsSandboxedTokenHandle(
        TokenHandle: HANDLE,
        PreviousMode: KPROCESSOR_MODE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn RtlIsSandboxedToken(
        Context: PSECURITY_SUBJECT_CONTEXT,
        PreviousMode: KPROCESSOR_MODE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SeCheckForCriticalAceRemoval(
        CurrentDescriptor: PSECURITY_DESCRIPTOR,
        NewDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
        AceRemoved: PBOOLEAN,
    );
}
extern "C" {
    #[must_use]
    pub fn SeAdjustObjectSecurity(
        ObjectName: PUNICODE_STRING,
        OriginalDescriptor: PSECURITY_DESCRIPTOR,
        ProposedDescriptor: PSECURITY_DESCRIPTOR,
        SubjectSecurityContext: PSECURITY_SUBJECT_CONTEXT,
        AdjustedDescriptor: *mut PSECURITY_DESCRIPTOR,
        ApplyAdjustedDescriptor: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsAssignImpersonationToken(Thread: PETHREAD, Token: HANDLE) -> NTSTATUS;
}
extern "C" {
    pub fn PsReferencePrimaryToken(Process: PEPROCESS) -> PACCESS_TOKEN;
}
extern "C" {
    pub fn PsDereferencePrimaryToken(PrimaryToken: PACCESS_TOKEN);
}
extern "C" {
    pub fn PsDereferenceImpersonationToken(ImpersonationToken: PACCESS_TOKEN);
}
extern "C" {
    pub fn PsReferenceImpersonationToken(
        Thread: PETHREAD,
        CopyOnOpen: PBOOLEAN,
        EffectiveOnly: PBOOLEAN,
        ImpersonationLevel: PSECURITY_IMPERSONATION_LEVEL,
    ) -> PACCESS_TOKEN;
}
extern "C" {
    pub fn PsGetProcessExitTime() -> LARGE_INTEGER;
}
extern "C" {
    pub fn PsIsThreadTerminating(Thread: PETHREAD) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn PsImpersonateClient(
        Thread: PETHREAD,
        Token: PACCESS_TOKEN,
        CopyOnOpen: BOOLEAN,
        EffectiveOnly: BOOLEAN,
        ImpersonationLevel: SECURITY_IMPERSONATION_LEVEL,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PsDisableImpersonation(
        Thread: PETHREAD,
        ImpersonationState: PSE_IMPERSONATION_STATE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn PsRestoreImpersonation(
        Thread: PETHREAD,
        ImpersonationState: PSE_IMPERSONATION_STATE,
    );
}
extern "C" {
    pub fn PsRevertToSelf();
}
extern "C" {
    #[must_use]
    pub fn PsLookupProcessByProcessId(
        ProcessId: HANDLE,
        Process: *mut PEPROCESS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PsLookupThreadByThreadId(ThreadId: HANDLE, Thread: *mut PETHREAD) -> NTSTATUS;
}
extern "C" {
    pub fn PsChargePoolQuota(Process: PEPROCESS, PoolType: POOL_TYPE, Amount: ULONG_PTR);
}
extern "C" {
    #[must_use]
    pub fn PsChargeProcessPoolQuota(
        Process: PEPROCESS,
        PoolType: POOL_TYPE,
        Amount: ULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn PsReturnPoolQuota(Process: PEPROCESS, PoolType: POOL_TYPE, Amount: ULONG_PTR);
}
extern "C" {
    pub fn PsGetThreadProcess(Thread: PETHREAD) -> PEPROCESS;
}
extern "C" {
    pub fn PsIsSystemThread(Thread: PETHREAD) -> BOOLEAN;
}
extern "C" {
    pub fn PsUpdateDiskCounters(
        Process: PEPROCESS,
        BytesRead: ULONG64,
        BytesWritten: ULONG64,
        ReadOperationCount: ULONG,
        WriteOperationCount: ULONG,
        FlushOperationCount: ULONG,
    );
}
extern "C" {
    pub fn PsIsDiskCountersEnabled() -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlRegisterFileSystemFilterCallbacks(
        FilterDriverObject: *mut _DRIVER_OBJECT,
        Callbacks: PFS_FILTER_CALLBACKS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlNotifyStreamFileObject(
        StreamFileObject: *mut _FILE_OBJECT,
        DeviceObjectHint: *mut _DEVICE_OBJECT,
        NotificationType: FS_FILTER_STREAM_FO_NOTIFICATION_TYPE,
        SafeToRecurse: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoAcquireVpbSpinLock(Irql: PKIRQL);
}
extern "C" {
    #[must_use]
    pub fn IoCheckDesiredAccess(
        DesiredAccess: PACCESS_MASK,
        GrantedAccess: ACCESS_MASK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCheckEaBufferValidity(
        EaBuffer: PFILE_FULL_EA_INFORMATION,
        EaLength: ULONG,
        ErrorOffset: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCheckFileObjectOpenedAsCopyDestination(FileObject: PFILE_OBJECT) -> BOOLEAN;
}
extern "C" {
    pub fn IoCheckFileObjectOpenedAsCopySource(FileObject: PFILE_OBJECT) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoCheckFunctionAccess(
        GrantedAccess: ACCESS_MASK,
        MajorFunction: UCHAR,
        MinorFunction: UCHAR,
        IoControlCode: ULONG,
        Arg1: PVOID,
        Arg2: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCheckQuerySetFileInformation(
        FileInformationClass: FILE_INFORMATION_CLASS,
        Length: ULONG,
        SetOperation: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCheckQuerySetVolumeInformation(
        FsInformationClass: FS_INFORMATION_CLASS,
        Length: ULONG,
        SetOperation: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoCheckQuotaBufferValidity(
        QuotaBuffer: PFILE_QUOTA_INFORMATION,
        QuotaLength: ULONG,
        ErrorOffset: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoCreateStreamFileObject(
        FileObject: PFILE_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
    ) -> PFILE_OBJECT;
}
extern "C" {
    pub fn IoCreateStreamFileObjectEx(
        FileObject: PFILE_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
        FileHandle: PHANDLE,
    ) -> PFILE_OBJECT;
}
extern "C" {
    pub fn IoCreateStreamFileObjectLite(
        FileObject: PFILE_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
    ) -> PFILE_OBJECT;
}
extern "C" {
    #[must_use]
    pub fn IoCreateStreamFileObjectEx2(
        CreateOptions: PIO_CREATE_STREAM_FILE_OPTIONS,
        FileObject: PFILE_OBJECT,
        DeviceObject: PDEVICE_OBJECT,
        StreamFileObject: *mut PFILE_OBJECT,
        FileHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoFastQueryNetworkAttributes(
        ObjectAttributes: POBJECT_ATTRIBUTES,
        DesiredAccess: ACCESS_MASK,
        OpenOptions: ULONG,
        IoStatus: PIO_STATUS_BLOCK,
        Buffer: PFILE_NETWORK_OPEN_INFORMATION,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoPageRead(
        FileObject: PFILE_OBJECT,
        MemoryDescriptorList: PMDL,
        StartingOffset: PLARGE_INTEGER,
        Event: PKEVENT,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetAttachedDevice(DeviceObject: PDEVICE_OBJECT) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoGetBaseFileSystemDeviceObject(FileObject: PFILE_OBJECT) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoGetDeviceToVerify(Thread: PETHREAD) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoGetRequestorProcessId(Irp: PIRP) -> ULONG;
}
extern "C" {
    pub fn IoGetRequestorProcess(Irp: PIRP) -> PEPROCESS;
}
extern "C" {
    pub fn IoIsOperationSynchronous(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    pub fn IoIsSystemThread(Thread: PETHREAD) -> BOOLEAN;
}
extern "C" {
    pub fn IoIsValidNameGraftingBuffer(
        Irp: PIRP,
        ReparseBuffer: PREPARSE_DATA_BUFFER,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoQueryFileDosDeviceName(
        FileObject: PFILE_OBJECT,
        ObjectNameInformation: *mut POBJECT_NAME_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoQueryFileInformation(
        FileObject: PFILE_OBJECT,
        FileInformationClass: FILE_INFORMATION_CLASS,
        Length: ULONG,
        FileInformation: PVOID,
        ReturnedLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoQueryVolumeInformation(
        FileObject: PFILE_OBJECT,
        FsInformationClass: FS_INFORMATION_CLASS,
        Length: ULONG,
        FsInformation: PVOID,
        ReturnedLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoQueueThreadIrp(Irp: PIRP);
}
extern "C" {
    pub fn IoRegisterFileSystem(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn IoRegisterFsRegistrationChange(
        DriverObject: PDRIVER_OBJECT,
        DriverNotificationRoutine: PDRIVER_FS_NOTIFICATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRegisterFsRegistrationChangeMountAware(
        DriverObject: PDRIVER_OBJECT,
        DriverNotificationRoutine: PDRIVER_FS_NOTIFICATION,
        SynchronizeWithMounts: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoEnumerateRegisteredFiltersList(
        DriverObjectList: *mut PDRIVER_OBJECT,
        DriverObjectListSize: ULONG,
        ActualNumberDriverObjects: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoReplaceFileObjectName(
        FileObject: PFILE_OBJECT,
        NewFileName: PWSTR,
        FileNameLength: USHORT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoReleaseVpbSpinLock(Irql: KIRQL);
}
extern "C" {
    pub fn IoSetDeviceToVerify(Thread: PETHREAD, DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn IoSetInformation(
        FileObject: PFILE_OBJECT,
        FileInformationClass: FILE_INFORMATION_CLASS,
        Length: ULONG,
        FileInformation: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSynchronousPageWrite(
        FileObject: PFILE_OBJECT,
        MemoryDescriptorList: PMDL,
        StartingOffset: PLARGE_INTEGER,
        Event: PKEVENT,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoThreadToProcess(Thread: PETHREAD) -> PEPROCESS;
}
extern "C" {
    pub fn IoUnregisterFileSystem(DeviceObject: PDEVICE_OBJECT);
}
extern "C" {
    pub fn IoUnregisterFsRegistrationChange(
        DriverObject: PDRIVER_OBJECT,
        DriverNotificationRoutine: PDRIVER_FS_NOTIFICATION,
    );
}
extern "C" {
    #[must_use]
    pub fn IoVerifyVolume(
        DeviceObject: PDEVICE_OBJECT,
        AllowRawMount: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetRequestorSessionId(Irp: PIRP, pSessionId: PULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoEnumerateDeviceObjectList(
        DriverObject: PDRIVER_OBJECT,
        DeviceObjectList: *mut PDEVICE_OBJECT,
        DeviceObjectListSize: ULONG,
        ActualNumberDeviceObjects: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn IoGetLowerDeviceObject(DeviceObject: PDEVICE_OBJECT) -> PDEVICE_OBJECT;
}
extern "C" {
    pub fn IoGetDeviceAttachmentBaseRef(DeviceObject: PDEVICE_OBJECT) -> PDEVICE_OBJECT;
}
extern "C" {
    #[must_use]
    pub fn IoGetDiskDeviceObject(
        FileSystemDeviceObject: PDEVICE_OBJECT,
        DiskDeviceObject: *mut PDEVICE_OBJECT,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRetrievePriorityInfo(
        Irp: PIRP,
        FileObject: PFILE_OBJECT,
        Thread: PETHREAD,
        PriorityInfo: PIO_PRIORITY_INFO,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoApplyPriorityInfoThread(
        InputPriorityInfo: PIO_PRIORITY_INFO,
        OutputPriorityInfo: PIO_PRIORITY_INFO,
        Thread: PETHREAD,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoGetFsTrackOffsetState(
        Irp: PIRP,
        RetFsTrackOffsetBlob: *mut PIO_IRP_EXT_TRACK_OFFSET_HEADER,
        RetTrackedOffset: *mut LONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoSetFsTrackOffsetState(
        Irp: PIRP,
        FsTrackOffsetBlob: PIO_IRP_EXT_TRACK_OFFSET_HEADER,
        TrackedOffset: LONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoClearFsTrackOffsetState(Irp: PIRP) -> NTSTATUS;
}
extern "C" {
    pub fn IoIrpHasFsTrackOffsetExtensionType(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn IoGetCopyInformationExtension(
        Irp: PIRP,
        CopyInformation: PCOPY_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn PoQueueShutdownWorkItem(WorkItem: PWORK_QUEUE_ITEM) -> NTSTATUS;
}
extern "C" {
    pub fn MmIsRecursiveIoFault() -> BOOLEAN;
}
extern "C" {
    pub fn MmForceSectionClosed(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        DelayClose: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn MmForceSectionClosedEx(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        ForceCloseFlags: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn MmGetMaximumFileSectionSize() -> ULONGLONG;
}
extern "C" {
    pub fn MmFlushImageSection(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        FlushType: MMFLUSH_TYPE,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn MmCanFileBeTruncated(
        SectionPointer: PSECTION_OBJECT_POINTERS,
        NewFileSize: PLARGE_INTEGER,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn MmSetAddressRangeModified(Address: PVOID, Length: SIZE_T) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn MmIsFileSectionActive(
        FsSectionPointer: PSECTION_OBJECT_POINTERS,
        Flags: ULONG,
        SectionIsActive: PLOGICAL,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MmPrefetchPages(NumberOfLists: ULONG, ReadLists: *mut PREAD_LIST) -> NTSTATUS;
}
extern "C" {
    pub fn MmDoesFileHaveUserWritableReferences(
        SectionPointer: PSECTION_OBJECT_POINTERS,
    ) -> ULONG;
}
extern "C" {
    pub fn MmMdlPagesAreZero(Mdl: PMDL) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn ObInsertObject(
        Object: PVOID,
        PassedAccessState: PACCESS_STATE,
        DesiredAccess: ACCESS_MASK,
        ObjectPointerBias: ULONG,
        NewObject: *mut PVOID,
        Handle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ObOpenObjectByPointer(
        Object: PVOID,
        HandleAttributes: ULONG,
        PassedAccessState: PACCESS_STATE,
        DesiredAccess: ACCESS_MASK,
        ObjectType: POBJECT_TYPE,
        AccessMode: KPROCESSOR_MODE,
        Handle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ObOpenObjectByPointerWithTag(
        Object: PVOID,
        HandleAttributes: ULONG,
        PassedAccessState: PACCESS_STATE,
        DesiredAccess: ACCESS_MASK,
        ObjectType: POBJECT_TYPE,
        AccessMode: KPROCESSOR_MODE,
        Tag: ULONG,
        Handle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ObMakeTemporaryObject(Object: PVOID);
}
extern "C" {
    #[must_use]
    pub fn ObQueryNameString(
        Object: PVOID,
        ObjectNameInfo: POBJECT_NAME_INFORMATION,
        Length: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn ObIsKernelHandle(Handle: HANDLE) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn ObQueryObjectAuditingByHandle(
        Handle: HANDLE,
        GenerateOnClose: PBOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn IoRequestDeviceRemovalForReset(
        PhysicalDeviceObject: PDEVICE_OBJECT,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlCopyRead(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        LockKey: ULONG,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: PDEVICE_OBJECT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlCopyWrite(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        LockKey: ULONG,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: PDEVICE_OBJECT,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlMdlReadEx(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlMdlReadDev(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: PDEVICE_OBJECT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlMdlReadCompleteDev(
        FileObject: PFILE_OBJECT,
        MdlChain: PMDL,
        DeviceObject: PDEVICE_OBJECT,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlPrepareMdlWriteEx(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlPrepareMdlWriteDev(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        LockKey: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
        DeviceObject: PDEVICE_OBJECT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlMdlWriteCompleteDev(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        MdlChain: PMDL,
        DeviceObject: PDEVICE_OBJECT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlAcquireFileExclusive(FileObject: PFILE_OBJECT);
}
extern "C" {
    pub fn FsRtlReleaseFile(FileObject: PFILE_OBJECT);
}
extern "C" {
    #[must_use]
    pub fn FsRtlGetFileSize(
        FileObject: PFILE_OBJECT,
        FileSize: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlAllocateFileLock(
        CompleteLockIrpRoutine: PCOMPLETE_LOCK_IRP_ROUTINE,
        UnlockRoutine: PUNLOCK_ROUTINE,
    ) -> PFILE_LOCK;
}
extern "C" {
    pub fn FsRtlFreeFileLock(FileLock: PFILE_LOCK);
}
extern "C" {
    pub fn FsRtlInitializeFileLock(
        FileLock: PFILE_LOCK,
        CompleteLockIrpRoutine: PCOMPLETE_LOCK_IRP_ROUTINE,
        UnlockRoutine: PUNLOCK_ROUTINE,
    );
}
extern "C" {
    pub fn FsRtlUninitializeFileLock(FileLock: PFILE_LOCK);
}
extern "C" {
    #[must_use]
    pub fn FsRtlProcessFileLock(
        FileLock: PFILE_LOCK,
        Irp: PIRP,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlCheckLockForReadAccess(FileLock: PFILE_LOCK, Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlCheckLockForWriteAccess(FileLock: PFILE_LOCK, Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlCheckLockForOplockRequest(
        FileLock: PFILE_LOCK,
        AllocationSize: PLARGE_INTEGER,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlFastCheckLockForRead(
        FileLock: PFILE_LOCK,
        StartingByte: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        Key: ULONG,
        FileObject: PFILE_OBJECT,
        ProcessId: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlFastCheckLockForWrite(
        FileLock: PFILE_LOCK,
        StartingByte: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        Key: ULONG,
        FileObject: PVOID,
        ProcessId: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlGetNextFileLock(
        FileLock: PFILE_LOCK,
        Restart: BOOLEAN,
    ) -> PFILE_LOCK_INFO;
}
extern "C" {
    pub fn FsRtlAreThereCurrentOrInProgressFileLocks(FileLock: PFILE_LOCK) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlAreThereWaitingFileLocks(FileLock: PFILE_LOCK) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlFastUnlockSingle(
        FileLock: PFILE_LOCK,
        FileObject: PFILE_OBJECT,
        FileOffset: *mut LARGE_INTEGER,
        Length: PLARGE_INTEGER,
        ProcessId: PEPROCESS,
        Key: ULONG,
        Context: PVOID,
        AlreadySynchronized: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlFastUnlockAll(
        FileLock: PFILE_LOCK,
        FileObject: PFILE_OBJECT,
        ProcessId: PEPROCESS,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlFastUnlockAllByKey(
        FileLock: PFILE_LOCK,
        FileObject: PFILE_OBJECT,
        ProcessId: PEPROCESS,
        Key: ULONG,
        Context: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlPrivateLock(
        FileLock: PFILE_LOCK,
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        ProcessId: PEPROCESS,
        Key: ULONG,
        FailImmediately: BOOLEAN,
        ExclusiveLock: BOOLEAN,
        Iosb: PIO_STATUS_BLOCK,
        Irp: PIRP,
        Context: PVOID,
        AlreadySynchronized: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlInitializeTunnelCache(Cache: *mut TUNNEL);
}
extern "C" {
    pub fn FsRtlAddToTunnelCache(
        Cache: *mut TUNNEL,
        DirectoryKey: ULONGLONG,
        ShortName: *mut UNICODE_STRING,
        LongName: *mut UNICODE_STRING,
        KeyByShortName: BOOLEAN,
        DataLength: ULONG,
        Data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn FsRtlFindInTunnelCache(
        Cache: *mut TUNNEL,
        DirectoryKey: ULONGLONG,
        Name: *mut UNICODE_STRING,
        ShortName: *mut UNICODE_STRING,
        LongName: *mut UNICODE_STRING,
        DataLength: *mut ULONG,
        Data: *mut ::core::ffi::c_void,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlAddToTunnelCacheEx(
        Cache: *mut TUNNEL,
        DirectoryKey: ULONGLONG,
        ShortName: *mut UNICODE_STRING,
        LongName: *mut UNICODE_STRING,
        Flags: ULONG,
        DataLength: ULONG,
        Data: *mut ::core::ffi::c_void,
    );
}
extern "C" {
    pub fn FsRtlFindInTunnelCacheEx(
        Cache: *mut TUNNEL,
        DirectoryKey: ULONGLONG,
        Name: *mut UNICODE_STRING,
        ShortName: *mut UNICODE_STRING,
        LongName: *mut UNICODE_STRING,
        Flags: ULONG,
        DataLength: *mut ULONG,
        Data: *mut ::core::ffi::c_void,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlDeleteKeyFromTunnelCache(Cache: *mut TUNNEL, DirectoryKey: ULONGLONG);
}
extern "C" {
    pub fn FsRtlDeleteTunnelCache(Cache: *mut TUNNEL);
}
extern "C" {
    pub fn FsRtlDissectDbcs(
        Path: ANSI_STRING,
        FirstName: PANSI_STRING,
        RemainingName: PANSI_STRING,
    );
}
extern "C" {
    pub fn FsRtlDoesDbcsContainWildCards(Name: PANSI_STRING) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsDbcsInExpression(
        Expression: PANSI_STRING,
        Name: PANSI_STRING,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsFatDbcsLegal(
        DbcsName: ANSI_STRING,
        WildCardsPermissible: BOOLEAN,
        PathNamePermissible: BOOLEAN,
        LeadingBackslashPermissible: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsHpfsDbcsLegal(
        DbcsName: ANSI_STRING,
        WildCardsPermissible: BOOLEAN,
        PathNamePermissible: BOOLEAN,
        LeadingBackslashPermissible: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlNormalizeNtstatus(
        Exception: NTSTATUS,
        GenericException: NTSTATUS,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlIsNtstatusExpected(Exception: NTSTATUS) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlAllocateResource() -> PERESOURCE;
}
extern "C" {
    pub fn FsRtlInitializeLargeMcb(Mcb: PLARGE_MCB, PoolType: POOL_TYPE);
}
extern "C" {
    pub fn FsRtlUninitializeLargeMcb(Mcb: PLARGE_MCB);
}
extern "C" {
    pub fn FsRtlResetLargeMcb(Mcb: PLARGE_MCB, SelfSynchronized: BOOLEAN);
}
extern "C" {
    pub fn FsRtlTruncateLargeMcb(Mcb: PLARGE_MCB, Vbn: LONGLONG);
}
extern "C" {
    pub fn FsRtlAddLargeMcbEntry(
        Mcb: PLARGE_MCB,
        Vbn: LONGLONG,
        Lbn: LONGLONG,
        SectorCount: LONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlRemoveLargeMcbEntry(
        Mcb: PLARGE_MCB,
        Vbn: LONGLONG,
        SectorCount: LONGLONG,
    );
}
extern "C" {
    pub fn FsRtlLookupLargeMcbEntry(
        Mcb: PLARGE_MCB,
        Vbn: LONGLONG,
        Lbn: PLONGLONG,
        SectorCountFromLbn: PLONGLONG,
        StartingLbn: PLONGLONG,
        SectorCountFromStartingLbn: PLONGLONG,
        Index: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlLookupLastLargeMcbEntry(
        Mcb: PLARGE_MCB,
        Vbn: PLONGLONG,
        Lbn: PLONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlLookupLastLargeMcbEntryAndIndex(
        OpaqueMcb: PLARGE_MCB,
        LargeVbn: PLONGLONG,
        LargeLbn: PLONGLONG,
        Index: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlNumberOfRunsInLargeMcb(Mcb: PLARGE_MCB) -> ULONG;
}
extern "C" {
    pub fn FsRtlGetNextLargeMcbEntry(
        Mcb: PLARGE_MCB,
        RunIndex: ULONG,
        Vbn: PLONGLONG,
        Lbn: PLONGLONG,
        SectorCount: PLONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlSplitLargeMcb(
        Mcb: PLARGE_MCB,
        Vbn: LONGLONG,
        Amount: LONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlInitializeBaseMcb(Mcb: PBASE_MCB, PoolType: POOL_TYPE);
}
extern "C" {
    pub fn FsRtlInitializeBaseMcbEx(
        Mcb: PBASE_MCB,
        PoolType: POOL_TYPE,
        Flags: USHORT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlUninitializeBaseMcb(Mcb: PBASE_MCB);
}
extern "C" {
    pub fn FsRtlResetBaseMcb(Mcb: PBASE_MCB);
}
extern "C" {
    pub fn FsRtlTruncateBaseMcb(Mcb: PBASE_MCB, Vbn: LONGLONG);
}
extern "C" {
    pub fn FsRtlAddBaseMcbEntry(
        Mcb: PBASE_MCB,
        Vbn: LONGLONG,
        Lbn: LONGLONG,
        SectorCount: LONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlAddBaseMcbEntryEx(
        Mcb: PBASE_MCB,
        Vbn: LONGLONG,
        Lbn: LONGLONG,
        SectorCount: LONGLONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlRemoveBaseMcbEntry(
        Mcb: PBASE_MCB,
        Vbn: LONGLONG,
        SectorCount: LONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlLookupBaseMcbEntry(
        Mcb: PBASE_MCB,
        Vbn: LONGLONG,
        Lbn: PLONGLONG,
        SectorCountFromLbn: PLONGLONG,
        StartingLbn: PLONGLONG,
        SectorCountFromStartingLbn: PLONGLONG,
        Index: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlLookupLastBaseMcbEntry(
        Mcb: PBASE_MCB,
        Vbn: PLONGLONG,
        Lbn: PLONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlLookupLastBaseMcbEntryAndIndex(
        OpaqueMcb: PBASE_MCB,
        LargeVbn: PLONGLONG,
        LargeLbn: PLONGLONG,
        Index: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlNumberOfRunsInBaseMcb(Mcb: PBASE_MCB) -> ULONG;
}
extern "C" {
    pub fn FsRtlGetNextBaseMcbEntry(
        Mcb: PBASE_MCB,
        RunIndex: ULONG,
        Vbn: PLONGLONG,
        Lbn: PLONGLONG,
        SectorCount: PLONGLONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlSplitBaseMcb(Mcb: PBASE_MCB, Vbn: LONGLONG, Amount: LONGLONG) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlInitializeMcb(Mcb: PMCB, PoolType: POOL_TYPE);
}
extern "C" {
    pub fn FsRtlUninitializeMcb(Mcb: PMCB);
}
extern "C" {
    pub fn FsRtlTruncateMcb(Mcb: PMCB, Vbn: VBN);
}
extern "C" {
    pub fn FsRtlAddMcbEntry(
        Mcb: PMCB,
        Vbn: VBN,
        Lbn: LBN,
        SectorCount: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlRemoveMcbEntry(Mcb: PMCB, Vbn: VBN, SectorCount: ULONG);
}
extern "C" {
    pub fn FsRtlLookupMcbEntry(
        Mcb: PMCB,
        Vbn: VBN,
        Lbn: PLBN,
        SectorCount: PULONG,
        Index: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlLookupLastMcbEntry(Mcb: PMCB, Vbn: PVBN, Lbn: PLBN) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlNumberOfRunsInMcb(Mcb: PMCB) -> ULONG;
}
extern "C" {
    pub fn FsRtlGetNextMcbEntry(
        Mcb: PMCB,
        RunIndex: ULONG,
        Vbn: PVBN,
        Lbn: PLBN,
        SectorCount: PULONG,
    ) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlBalanceReads(TargetDevice: PDEVICE_OBJECT) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlInitializeOplock(Oplock: POPLOCK);
}
extern "C" {
    pub fn FsRtlUninitializeOplock(Oplock: POPLOCK);
}
extern "C" {
    #[must_use]
    pub fn FsRtlOplockFsctrl(Oplock: POPLOCK, Irp: PIRP, OpenCount: ULONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCheckOplock(
        Oplock: POPLOCK,
        Irp: PIRP,
        Context: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCheckOplockEx(
        Oplock: POPLOCK,
        Irp: PIRP,
        Flags: ULONG,
        Context: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCheckUpperOplock(
        Oplock: POPLOCK,
        NewLowerOplockState: ULONG,
        CompletionRoutineContext: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PrePendRoutine: POPLOCK_FS_PREPOST_IRP,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlUpperOplockFsctrl(
        Oplock: POPLOCK,
        Irp: PIRP,
        OpenCount: ULONG,
        LowerOplockState: ULONG,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlOplockIsFastIoPossible(Oplock: POPLOCK) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlCurrentBatchOplock(Oplock: POPLOCK) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlCurrentOplock(Oplock: POPLOCK) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlOplockBreakToNone(
        Oplock: POPLOCK,
        IrpSp: PIO_STACK_LOCATION,
        Irp: PIRP,
        Context: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlOplockIsSharedRequest(Irp: PIRP) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlOplockBreakH(
        Oplock: POPLOCK,
        Irp: PIRP,
        Flags: ULONG,
        Context: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlOplockBreakH2(
        Oplock: POPLOCK,
        Irp: PIRP,
        Flags: ULONG,
        Context: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
        GrantedAccess: PACCESS_MASK,
        ShareAccess: PUSHORT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlCurrentOplockH(Oplock: POPLOCK) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlOplockBreakToNoneEx(
        Oplock: POPLOCK,
        Irp: PIRP,
        Flags: ULONG,
        Context: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlOplockFsctrlEx(
        Oplock: POPLOCK,
        Irp: PIRP,
        OpenCount: ULONG,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlOplockKeysEqual(Fo1: PFILE_OBJECT, Fo2: PFILE_OBJECT) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlNotifyVolumeEvent(
        FileObject: PFILE_OBJECT,
        EventCode: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlNotifyVolumeEventEx(
        FileObject: PFILE_OBJECT,
        EventCode: ULONG,
        Event: PTARGET_DEVICE_CUSTOM_NOTIFICATION,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlNotifyInitializeSync(NotifySync: *mut PNOTIFY_SYNC);
}
extern "C" {
    pub fn FsRtlNotifyUninitializeSync(NotifySync: *mut PNOTIFY_SYNC);
}
extern "C" {
    pub fn FsRtlNotifyFullChangeDirectory(
        NotifySync: PNOTIFY_SYNC,
        NotifyList: PLIST_ENTRY,
        FsContext: PVOID,
        FullDirectoryName: PSTRING,
        WatchTree: BOOLEAN,
        IgnoreBuffer: BOOLEAN,
        CompletionFilter: ULONG,
        NotifyIrp: PIRP,
        TraverseCallback: PCHECK_FOR_TRAVERSE_ACCESS,
        SubjectContext: PSECURITY_SUBJECT_CONTEXT,
    );
}
extern "C" {
    pub fn FsRtlNotifyFilterChangeDirectory(
        NotifySync: PNOTIFY_SYNC,
        NotifyList: PLIST_ENTRY,
        FsContext: PVOID,
        FullDirectoryName: PSTRING,
        WatchTree: BOOLEAN,
        IgnoreBuffer: BOOLEAN,
        CompletionFilter: ULONG,
        NotifyIrp: PIRP,
        TraverseCallback: PCHECK_FOR_TRAVERSE_ACCESS,
        SubjectContext: PSECURITY_SUBJECT_CONTEXT,
        FilterCallback: PFILTER_REPORT_CHANGE,
    );
}
extern "C" {
    pub fn FsRtlNotifyFilterReportChange(
        NotifySync: PNOTIFY_SYNC,
        NotifyList: PLIST_ENTRY,
        FullTargetName: PSTRING,
        TargetNameOffset: USHORT,
        StreamName: PSTRING,
        NormalizedParentName: PSTRING,
        FilterMatch: ULONG,
        Action: ULONG,
        TargetContext: PVOID,
        FilterContext: PVOID,
    );
}
extern "C" {
    pub fn FsRtlNotifyFullReportChange(
        NotifySync: PNOTIFY_SYNC,
        NotifyList: PLIST_ENTRY,
        FullTargetName: PSTRING,
        TargetNameOffset: USHORT,
        StreamName: PSTRING,
        NormalizedParentName: PSTRING,
        FilterMatch: ULONG,
        Action: ULONG,
        TargetContext: PVOID,
    );
}
extern "C" {
    pub fn FsRtlNotifyCleanup(
        NotifySync: PNOTIFY_SYNC,
        NotifyList: PLIST_ENTRY,
        FsContext: PVOID,
    );
}
extern "C" {
    pub fn FsRtlNotifyCleanupAll(NotifySync: PNOTIFY_SYNC, NotifyList: PLIST_ENTRY);
}
extern "C" {
    pub fn FsRtlDissectName(
        Path: UNICODE_STRING,
        FirstName: PUNICODE_STRING,
        RemainingName: PUNICODE_STRING,
    );
}
extern "C" {
    pub fn FsRtlDoesNameContainWildCards(Name: PUNICODE_STRING) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlAreNamesEqual(
        ConstantNameA: PCUNICODE_STRING,
        ConstantNameB: PCUNICODE_STRING,
        IgnoreCase: BOOLEAN,
        UpcaseTable: PCWCH,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsNameInExpression(
        Expression: PUNICODE_STRING,
        Name: PUNICODE_STRING,
        IgnoreCase: BOOLEAN,
        UpcaseTable: PWCH,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsNameInUnUpcasedExpression(
        Expression: PUNICODE_STRING,
        Name: PUNICODE_STRING,
        IgnoreCase: BOOLEAN,
        UpcaseTable: PWCH,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlPostStackOverflow(
        Context: PVOID,
        Event: PKEVENT,
        StackOverflowRoutine: PFSRTL_STACK_OVERFLOW_ROUTINE,
    );
}
extern "C" {
    pub fn FsRtlPostPagingFileStackOverflow(
        Context: PVOID,
        Event: PKEVENT,
        StackOverflowRoutine: PFSRTL_STACK_OVERFLOW_ROUTINE,
    );
}
extern "C" {
    #[must_use]
    pub fn FsRtlRegisterUncProvider(
        MupHandle: PHANDLE,
        RedirectorDeviceName: PCUNICODE_STRING,
        MailslotsSupported: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlRegisterUncProviderEx(
        MupHandle: PHANDLE,
        RedirDevName: PCUNICODE_STRING,
        DeviceObject: PDEVICE_OBJECT,
        Flags: FSRTL_UNC_PROVIDER_FLAGS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlRegisterUncProviderEx2(
        RedirDevName: PCUNICODE_STRING,
        DeviceObject: PDEVICE_OBJECT,
        Registration: *const FSRTL_UNC_PROVIDER_REGISTRATION,
        MupHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlDeregisterUncProvider(Handle: HANDLE);
}
extern "C" {
    #[must_use]
    pub fn FsRtlCancellableWaitForSingleObject(
        Object: PVOID,
        Timeout: PLARGE_INTEGER,
        Irp: PIRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCancellableWaitForMultipleObjects(
        Count: ULONG,
        ObjectArray: *mut PVOID,
        WaitType: WAIT_TYPE,
        Timeout: PLARGE_INTEGER,
        WaitBlockArray: PKWAIT_BLOCK,
        Irp: PIRP,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlMupGetProviderInfoFromFileObject(
        pFileObject: PFILE_OBJECT,
        Level: ULONG,
        pBuffer: PVOID,
        pBufferSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlMupGetProviderIdFromName(
        pProviderName: PCUNICODE_STRING,
        pProviderId: PULONG32,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlInsertPerFileContext(
        PerFileContextPointer: *mut PVOID,
        Ptr: PFSRTL_PER_FILE_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlLookupPerFileContext(
        PerFileContextPointer: *mut PVOID,
        OwnerId: PVOID,
        InstanceId: PVOID,
    ) -> PFSRTL_PER_FILE_CONTEXT;
}
extern "C" {
    pub fn FsRtlRemovePerFileContext(
        PerFileContextPointer: *mut PVOID,
        OwnerId: PVOID,
        InstanceId: PVOID,
    ) -> PFSRTL_PER_FILE_CONTEXT;
}
extern "C" {
    pub fn FsRtlTeardownPerFileContexts(PerFileContextPointer: *mut PVOID);
}
extern "C" {
    #[must_use]
    pub fn FsRtlInsertPerStreamContext(
        PerStreamContext: PFSRTL_ADVANCED_FCB_HEADER,
        Ptr: PFSRTL_PER_STREAM_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlLookupPerStreamContextInternal(
        StreamContext: PFSRTL_ADVANCED_FCB_HEADER,
        OwnerId: PVOID,
        InstanceId: PVOID,
    ) -> PFSRTL_PER_STREAM_CONTEXT;
}
extern "C" {
    pub fn FsRtlRemovePerStreamContext(
        StreamContext: PFSRTL_ADVANCED_FCB_HEADER,
        OwnerId: PVOID,
        InstanceId: PVOID,
    ) -> PFSRTL_PER_STREAM_CONTEXT;
}
extern "C" {
    pub fn FsRtlAllocateAePushLock(PoolType: POOL_TYPE, Tag: ULONG) -> PVOID;
}
extern "C" {
    pub fn FsRtlFreeAePushLock(AePushLock: PVOID);
}
extern "C" {
    pub fn FsRtlTeardownPerStreamContexts(AdvancedHeader: PFSRTL_ADVANCED_FCB_HEADER);
}
extern "C" {
    #[must_use]
    pub fn FsRtlInsertPerFileObjectContext(
        FileObject: PFILE_OBJECT,
        Ptr: PFSRTL_PER_FILEOBJECT_CONTEXT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlLookupPerFileObjectContext(
        FileObject: PFILE_OBJECT,
        OwnerId: PVOID,
        InstanceId: PVOID,
    ) -> PFSRTL_PER_FILEOBJECT_CONTEXT;
}
extern "C" {
    pub fn FsRtlRemovePerFileObjectContext(
        FileObject: PFILE_OBJECT,
        OwnerId: PVOID,
        InstanceId: PVOID,
    ) -> PFSRTL_PER_FILEOBJECT_CONTEXT;
}
extern "C" {
    pub fn FsRtlIncrementCcFastReadNotPossible();
}
extern "C" {
    pub fn FsRtlIncrementCcFastReadWait();
}
extern "C" {
    pub fn FsRtlIncrementCcFastReadNoWait();
}
extern "C" {
    pub fn FsRtlIncrementCcFastReadResourceMiss();
}
extern "C" {
    pub fn FsRtlIncrementCcFastMdlReadWait();
}
extern "C" {
    pub fn FsRtlIsPagingFile(FileObject: PFILE_OBJECT) -> LOGICAL;
}
extern "C" {
    pub fn FsRtlIsSystemPagingFile(FileObject: PFILE_OBJECT) -> LOGICAL;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCreateSectionForDataScan(
        SectionHandle: PHANDLE,
        SectionObject: *mut PVOID,
        SectionFileSize: PLARGE_INTEGER,
        FileObject: PFILE_OBJECT,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        MaximumSize: PLARGE_INTEGER,
        SectionPageProtection: ULONG,
        AllocationAttributes: ULONG,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlValidateReparsePointBuffer(
        BufferLength: ULONG,
        ReparseBuffer: PREPARSE_DATA_BUFFER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlRemoveDotsFromPath(
        OriginalString: PWSTR,
        PathLength: USHORT,
        NewLength: *mut USHORT,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlIsNonEmptyDirectoryReparsePointAllowed(ReparseTag: ULONG) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlAllocateExtraCreateParameterList(
        Flags: FSRTL_ALLOCATE_ECPLIST_FLAGS,
        EcpList: *mut PECP_LIST,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlFreeExtraCreateParameterList(EcpList: PECP_LIST);
}
extern "C" {
    #[must_use]
    pub fn FsRtlInitializeExtraCreateParameterList(EcpList: PECP_LIST) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlAllocateExtraCreateParameter(
        EcpType: LPCGUID,
        SizeOfContext: ULONG,
        Flags: FSRTL_ALLOCATE_ECP_FLAGS,
        CleanupCallback: PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK,
        PoolTag: ULONG,
        EcpContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlFreeExtraCreateParameter(EcpContext: PVOID);
}
extern "C" {
    pub fn FsRtlInitializeExtraCreateParameter(
        Ecp: PECP_HEADER,
        EcpFlags: ULONG,
        CleanupCallback: PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK,
        TotalSize: ULONG,
        EcpType: LPCGUID,
        ListAllocatedFrom: PVOID,
    );
}
extern "C" {
    pub fn FsRtlInitExtraCreateParameterLookasideList(
        Lookaside: PVOID,
        Flags: FSRTL_ECP_LOOKASIDE_FLAGS,
        Size: SIZE_T,
        Tag: ULONG,
    );
}
extern "C" {
    pub fn FsRtlDeleteExtraCreateParameterLookasideList(
        Lookaside: PVOID,
        Flags: FSRTL_ECP_LOOKASIDE_FLAGS,
    );
}
extern "C" {
    #[must_use]
    pub fn FsRtlAllocateExtraCreateParameterFromLookasideList(
        EcpType: LPCGUID,
        SizeOfContext: ULONG,
        Flags: FSRTL_ALLOCATE_ECP_FLAGS,
        CleanupCallback: PFSRTL_EXTRA_CREATE_PARAMETER_CLEANUP_CALLBACK,
        LookasideList: PVOID,
        EcpContext: *mut PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlInsertExtraCreateParameter(
        EcpList: PECP_LIST,
        EcpContext: PVOID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlFindExtraCreateParameter(
        EcpList: PECP_LIST,
        EcpType: LPCGUID,
        EcpContext: *mut PVOID,
        EcpContextSize: *mut ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlRemoveExtraCreateParameter(
        EcpList: PECP_LIST,
        EcpType: LPCGUID,
        EcpContext: *mut PVOID,
        EcpContextSize: *mut ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlGetEcpListFromIrp(Irp: PIRP, EcpList: *mut PECP_LIST) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlSetEcpListIntoIrp(Irp: PIRP, EcpList: PECP_LIST) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlGetNextExtraCreateParameter(
        EcpList: PECP_LIST,
        CurrentEcpContext: PVOID,
        NextEcpType: LPGUID,
        NextEcpContext: *mut PVOID,
        NextEcpContextSize: *mut ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlAcknowledgeEcp(EcpContext: PVOID);
}
extern "C" {
    pub fn FsRtlPrepareToReuseEcp(EcpContext: PVOID);
}
extern "C" {
    pub fn FsRtlIsEcpAcknowledged(EcpContext: PVOID) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsEcpFromUserMode(EcpContext: PVOID) -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlOplockGetAnyBreakOwnerProcess(Oplock: POPLOCK) -> PEPROCESS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCheckOplockEx2(
        Oplock: POPLOCK,
        Irp: PIRP,
        Flags: ULONG,
        FlagsEx2: ULONG,
        CompletionRoutineContext: PVOID,
        CompletionRoutine: POPLOCK_WAIT_COMPLETE_ROUTINE,
        PostIrpRoutine: POPLOCK_FS_PREPOST_IRP,
        Timeout: ULONGLONG,
        NotifyContext: PVOID,
        NotifyRoutine: POPLOCK_NOTIFY_ROUTINE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlCheckOplockForFsFilterCallback(
        Oplock: POPLOCK,
        CallbackData: PVOID,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlGetCurrentProcessLoaderList() -> PLIST_ENTRY;
}
extern "C" {
    pub fn FsRtlIs32BitProcess(Process: PEPROCESS) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn FsRtlChangeBackingFileObject(
        CurrentFileObject: PFILE_OBJECT,
        NewFileObject: PFILE_OBJECT,
        ChangeBackingType: FSRTL_CHANGE_BACKING_TYPE,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlLogCcFlushError(
        FileName: PUNICODE_STRING,
        DeviceObject: PDEVICE_OBJECT,
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        FlushError: NTSTATUS,
        Flags: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlAreVolumeStartupApplicationsComplete() -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlQueryMaximumVirtualDiskNestingLevel() -> ULONG;
}
extern "C" {
    #[must_use]
    pub fn FsRtlGetVirtualDiskNestingLevel(
        DeviceObject: PDEVICE_OBJECT,
        NestingLevel: PULONG,
        NestingFlags: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlVolumeDeviceToCorrelationId(
        VolumeDeviceObject: PDEVICE_OBJECT,
        Guid: *mut GUID,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlIssueDeviceIoControl(
        DeviceObject: PDEVICE_OBJECT,
        IoCtl: ULONG,
        Flags: UCHAR,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
        IosbInformation: PULONG_PTR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlGetSectorSizeInformation(
        DeviceObject: PDEVICE_OBJECT,
        SectorSizeInfo: PFILE_FS_SECTOR_SIZE_INFORMATION,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlGetSupportedFeatures(
        DeviceObject: PDEVICE_OBJECT,
        SupportedFeatures: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlKernelFsControlFile(
        FileObject: PFILE_OBJECT,
        FsControlCode: ULONG,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
        RetOutputBufferSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlQueryKernelEaFile(
        FileObject: PFILE_OBJECT,
        ReturnedEaData: PVOID,
        Length: ULONG,
        ReturnSingleEntry: BOOLEAN,
        EaList: PVOID,
        EaListLength: ULONG,
        EaIndex: PULONG,
        RestartScan: BOOLEAN,
        LengthReturned: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlSetKernelEaFile(
        FileObject: PFILE_OBJECT,
        EaBuffer: PVOID,
        Length: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlQueryInformationFile(
        FileObject: PFILE_OBJECT,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
        RetFileInformationSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn FsRtlQueryCachedVdl(FileObject: PFILE_OBJECT, Vdl: PLONGLONG) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlUpdateDiskCounters(BytesRead: ULONG64, BytesWritten: ULONG64);
}
extern "C" {
    pub fn FsRtlDismountComplete(DeviceObject: PDEVICE_OBJECT, DismountStatus: NTSTATUS);
}
extern "C" {
    #[must_use]
    pub fn FsRtlSetDriverBacking(DriverObj: PDRIVER_OBJECT, Flags: ULONG) -> NTSTATUS;
}
extern "C" {
    pub fn FsRtlIsMobileOS() -> BOOLEAN;
}
extern "C" {
    pub fn FsRtlIsExtentDangling(
        StartPage: PFN_NUMBER,
        NumberOfPages: PFN_NUMBER,
        Flags: ULONG,
    ) -> PFN_NUMBER;
}
extern "C" {
    pub fn FsRtlIsDaxVolume(FileObject: PFILE_OBJECT) -> BOOLEAN;
}
extern "C" {
    pub fn CcInitializeCacheMap(
        FileObject: PFILE_OBJECT,
        FileSizes: PCC_FILE_SIZES,
        PinAccess: BOOLEAN,
        Callbacks: PCACHE_MANAGER_CALLBACKS,
        LazyWriteContext: PVOID,
    );
}
extern "C" {
    pub fn CcUninitializeCacheMap(
        FileObject: PFILE_OBJECT,
        TruncateSize: PLARGE_INTEGER,
        UninitializeEvent: PCACHE_UNINITIALIZE_EVENT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcSetFileSizes(FileObject: PFILE_OBJECT, FileSizes: PCC_FILE_SIZES);
}
extern "C" {
    #[must_use]
    pub fn CcSetFileSizesEx(
        FileObject: PFILE_OBJECT,
        FileSizes: PCC_FILE_SIZES,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn CcPurgeCacheSection(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Flags: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcCoherencyFlushAndPurgeCache(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        IoStatus: PIO_STATUS_BLOCK,
        Flags: ULONG,
    );
}
extern "C" {
    pub fn CcSetDirtyPageThreshold(FileObject: PFILE_OBJECT, DirtyPageThreshold: ULONG);
}
extern "C" {
    pub fn CcFlushCache(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        IoStatus: PIO_STATUS_BLOCK,
    );
}
extern "C" {
    pub fn CcGetFlushedValidData(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
        BcbListHeld: BOOLEAN,
    ) -> LARGE_INTEGER;
}
extern "C" {
    pub fn CcZeroData(
        FileObject: PFILE_OBJECT,
        StartOffset: PLARGE_INTEGER,
        EndOffset: PLARGE_INTEGER,
        Wait: BOOLEAN,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcRemapBcb(Bcb: PVOID) -> PVOID;
}
extern "C" {
    pub fn CcRepinBcb(Bcb: PVOID);
}
extern "C" {
    pub fn CcUnpinRepinnedBcb(
        Bcb: PVOID,
        WriteThrough: BOOLEAN,
        IoStatus: PIO_STATUS_BLOCK,
    );
}
extern "C" {
    pub fn CcGetFileObjectFromSectionPtrs(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
    ) -> PFILE_OBJECT;
}
extern "C" {
    pub fn CcGetFileObjectFromSectionPtrsRef(
        SectionObjectPointer: PSECTION_OBJECT_POINTERS,
    ) -> PFILE_OBJECT;
}
extern "C" {
    pub fn CcGetFileObjectFromBcb(Bcb: PVOID) -> PFILE_OBJECT;
}
extern "C" {
    pub fn CcCopyWriteWontFlush(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcCanIWrite(
        FileObject: PFILE_OBJECT,
        BytesToWrite: ULONG,
        Wait: BOOLEAN,
        Retrying: UCHAR,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcDeferWrite(
        FileObject: PFILE_OBJECT,
        PostRoutine: PCC_POST_DEFERRED_WRITE,
        Context1: PVOID,
        Context2: PVOID,
        BytesToWrite: ULONG,
        Retrying: BOOLEAN,
    );
}
extern "C" {
    pub fn CcCopyRead(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcFastCopyRead(
        FileObject: PFILE_OBJECT,
        FileOffset: ULONG,
        Length: ULONG,
        PageCount: ULONG,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
    );
}
extern "C" {
    pub fn CcCopyWrite(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        Buffer: PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcFastCopyWrite(
        FileObject: PFILE_OBJECT,
        FileOffset: ULONG,
        Length: ULONG,
        Buffer: PVOID,
    );
}
extern "C" {
    pub fn CcMdlRead(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
    );
}
extern "C" {
    pub fn CcMdlReadComplete(FileObject: PFILE_OBJECT, MdlChain: PMDL);
}
extern "C" {
    pub fn CcPrepareMdlWrite(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        MdlChain: *mut PMDL,
        IoStatus: PIO_STATUS_BLOCK,
    );
}
extern "C" {
    pub fn CcMdlWriteComplete(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        MdlChain: PMDL,
    );
}
extern "C" {
    pub fn CcMdlWriteAbort(FileObject: PFILE_OBJECT, MdlChain: PMDL);
}
extern "C" {
    pub fn CcScheduleReadAhead(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
    );
}
extern "C" {
    #[must_use]
    pub fn CcWaitForCurrentLazyWriterActivity() -> NTSTATUS;
}
extern "C" {
    pub fn CcSetReadAheadGranularity(FileObject: PFILE_OBJECT, Granularity: ULONG);
}
extern "C" {
    pub fn CcCopyWriteEx(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        Buffer: PVOID,
        IoIssuerThread: PETHREAD,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcCopyReadEx(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
        IoIssuerThread: PETHREAD,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcAsyncCopyRead(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Wait: BOOLEAN,
        Buffer: PVOID,
        IoStatus: PIO_STATUS_BLOCK,
        IoIssuerThread: PETHREAD,
        AsyncReadContext: PCC_ASYNC_READ_CONTEXT,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcScheduleReadAheadEx(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        IoIssuerThread: PETHREAD,
    );
}
extern "C" {
    pub fn CcInitializeCacheMapEx(
        FileObject: PFILE_OBJECT,
        FileSizes: PCC_FILE_SIZES,
        PinAccess: BOOLEAN,
        Callbacks: PCACHE_MANAGER_CALLBACKS,
        LazyWriteContext: PVOID,
        Flags: ULONG,
    );
}
extern "C" {
    pub fn CcInitializeCacheMapEx2(
        FileObject: PFILE_OBJECT,
        FileSizes: PCC_FILE_SIZES,
        PinAccess: BOOLEAN,
        AsyncCallbacks: PCACHE_MANAGER_CALLBACKS_EX,
        LazyWriteContext: PVOID,
        Flags: ULONG,
    );
}
extern "C" {
    pub fn CcPinRead(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Flags: ULONG,
        Bcb: *mut PVOID,
        Buffer: *mut PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcMapData(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Flags: ULONG,
        Bcb: *mut PVOID,
        Buffer: *mut PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcPinMappedData(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Flags: ULONG,
        Bcb: *mut PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcPreparePinWrite(
        FileObject: PFILE_OBJECT,
        FileOffset: PLARGE_INTEGER,
        Length: ULONG,
        Zero: BOOLEAN,
        Flags: ULONG,
        Bcb: *mut PVOID,
        Buffer: *mut PVOID,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn CcSetDirtyPinnedData(BcbVoid: PVOID, Lsn: PLARGE_INTEGER);
}
extern "C" {
    pub fn CcUnpinData(Bcb: PVOID);
}
extern "C" {
    pub fn CcSetBcbOwnerPointer(Bcb: PVOID, OwnerPointer: PVOID);
}
extern "C" {
    pub fn CcUnpinDataForThread(Bcb: PVOID, ResourceThreadId: ERESOURCE_THREAD);
}
extern "C" {
    pub fn CcSetAdditionalCacheAttributes(
        FileObject: PFILE_OBJECT,
        DisableReadAhead: BOOLEAN,
        DisableWriteBehind: BOOLEAN,
    );
}
extern "C" {
    pub fn CcSetAdditionalCacheAttributesEx(FileObject: PFILE_OBJECT, Flags: ULONG);
}
extern "C" {
    pub fn CcSetParallelFlushFile(
        FileObject: PFILE_OBJECT,
        EnableParallelFlush: BOOLEAN,
    );
}
extern "C" {
    pub fn CcSetLogHandleForFile(
        FileObject: PFILE_OBJECT,
        LogHandle: PVOID,
        FlushToLsnRoutine: PFLUSH_TO_LSN,
    );
}
extern "C" {
    pub fn CcGetDirtyPages(
        LogHandle: PVOID,
        DirtyPageRoutine: PDIRTY_PAGE_ROUTINE,
        Context1: PVOID,
        Context2: PVOID,
    ) -> LARGE_INTEGER;
}
extern "C" {
    pub fn CcIsThereDirtyData(Vpb: PVPB) -> BOOLEAN;
}
extern "C" {
    pub fn CcIsThereDirtyDataEx(Vpb: PVPB, NumberOfDirtyPages: PULONG) -> BOOLEAN;
}
extern "C" {
    pub fn CcIsCacheManagerCallbackNeeded(Status: NTSTATUS) -> BOOLEAN;
}
extern "C" {
    #[must_use]
    pub fn CcErrorCallbackRoutine(Context: PCC_ERROR_CALLBACK_CONTEXT) -> NTSTATUS;
}
extern "C" {
    pub fn AcquireCredentialsHandleW(
        pPrincipal: PSECURITY_STRING,
        pPackage: PSECURITY_STRING,
        fCredentialUse: ::core::ffi::c_ulong,
        pvLogonId: *mut ::core::ffi::c_void,
        pAuthData: *mut ::core::ffi::c_void,
        pGetKeyFn: SEC_GET_KEY_FN,
        pvGetKeyArgument: *mut ::core::ffi::c_void,
        phCredential: PCredHandle,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn FreeCredentialsHandle(phCredential: PCredHandle) -> SECURITY_STATUS;
}
extern "C" {
    pub fn AddCredentialsW(
        hCredentials: PCredHandle,
        pPrincipal: PSECURITY_STRING,
        pPackage: PSECURITY_STRING,
        fCredentialUse: ::core::ffi::c_ulong,
        pAuthData: *mut ::core::ffi::c_void,
        pGetKeyFn: SEC_GET_KEY_FN,
        pvGetKeyArgument: *mut ::core::ffi::c_void,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn AddCredentialsA(
        hCredentials: PCredHandle,
        pszPrincipal: LPSTR,
        pszPackage: LPSTR,
        fCredentialUse: ::core::ffi::c_ulong,
        pAuthData: *mut ::core::ffi::c_void,
        pGetKeyFn: SEC_GET_KEY_FN,
        pvGetKeyArgument: *mut ::core::ffi::c_void,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiCreateAsyncContext() -> *mut SspiAsyncContext;
}
extern "C" {
    pub fn SspiFreeAsyncContext(Handle: *mut SspiAsyncContext);
}
extern "C" {
    #[must_use]
    pub fn SspiReinitAsyncContext(Handle: *mut SspiAsyncContext) -> NTSTATUS;
}
extern "C" {
    pub fn SspiSetAsyncNotifyCallback(
        Context: *mut SspiAsyncContext,
        Callback: SspiAsyncNotifyCallback,
        CallbackData: *mut ::core::ffi::c_void,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiAsyncContextRequiresNotify(
        AsyncContext: *mut SspiAsyncContext,
    ) -> BOOLEAN;
}
extern "C" {
    pub fn SspiGetAsyncCallStatus(Handle: *mut SspiAsyncContext) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiAcquireCredentialsHandleAsyncW(
        AsyncContext: *mut SspiAsyncContext,
        pszPrincipal: PSECURITY_STRING,
        pszPackage: PSECURITY_STRING,
        fCredentialUse: ::core::ffi::c_ulong,
        pvLogonId: *mut ::core::ffi::c_void,
        pAuthData: *mut ::core::ffi::c_void,
        pGetKeyFn: SEC_GET_KEY_FN,
        pvGetKeyArgument: *mut ::core::ffi::c_void,
        phCredential: PCredHandle,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiAcquireCredentialsHandleAsyncA(
        AsyncContext: *mut SspiAsyncContext,
        pszPrincipal: LPSTR,
        pszPackage: LPSTR,
        fCredentialUse: ::core::ffi::c_ulong,
        pvLogonId: *mut ::core::ffi::c_void,
        pAuthData: *mut ::core::ffi::c_void,
        pGetKeyFn: SEC_GET_KEY_FN,
        pvGetKeyArgument: *mut ::core::ffi::c_void,
        phCredential: PCredHandle,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiInitializeSecurityContextAsyncW(
        AsyncContext: *mut SspiAsyncContext,
        phCredential: PCredHandle,
        phContext: PCtxtHandle,
        pszTargetName: PSECURITY_STRING,
        fContextReq: ::core::ffi::c_ulong,
        Reserved1: ::core::ffi::c_ulong,
        TargetDataRep: ::core::ffi::c_ulong,
        pInput: PSecBufferDesc,
        Reserved2: ::core::ffi::c_ulong,
        phNewContext: PCtxtHandle,
        pOutput: PSecBufferDesc,
        pfContextAttr: *mut ::core::ffi::c_ulong,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiInitializeSecurityContextAsyncA(
        AsyncContext: *mut SspiAsyncContext,
        phCredential: PCredHandle,
        phContext: PCtxtHandle,
        pszTargetName: LPSTR,
        fContextReq: ::core::ffi::c_ulong,
        Reserved1: ::core::ffi::c_ulong,
        TargetDataRep: ::core::ffi::c_ulong,
        pInput: PSecBufferDesc,
        Reserved2: ::core::ffi::c_ulong,
        phNewContext: PCtxtHandle,
        pOutput: PSecBufferDesc,
        pfContextAttr: *mut ::core::ffi::c_ulong,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiAcceptSecurityContextAsync(
        AsyncContext: *mut SspiAsyncContext,
        phCredential: PCredHandle,
        phContext: PCtxtHandle,
        pInput: PSecBufferDesc,
        fContextReq: ::core::ffi::c_ulong,
        TargetDataRep: ::core::ffi::c_ulong,
        phNewContext: PCtxtHandle,
        pOutput: PSecBufferDesc,
        pfContextAttr: *mut ::core::ffi::c_ulong,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiFreeCredentialsHandleAsync(
        AsyncContext: *mut SspiAsyncContext,
        phCredential: PCredHandle,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiDeleteSecurityContextAsync(
        AsyncContext: *mut SspiAsyncContext,
        phContext: PCtxtHandle,
    ) -> SECURITY_STATUS;
}
extern "C" {
    /**

 Context Management Functions

*/
    pub fn InitializeSecurityContextW(
        phCredential: PCredHandle,
        phContext: PCtxtHandle,
        pTargetName: PSECURITY_STRING,
        fContextReq: ::core::ffi::c_ulong,
        Reserved1: ::core::ffi::c_ulong,
        TargetDataRep: ::core::ffi::c_ulong,
        pInput: PSecBufferDesc,
        Reserved2: ::core::ffi::c_ulong,
        phNewContext: PCtxtHandle,
        pOutput: PSecBufferDesc,
        pfContextAttr: *mut ::core::ffi::c_ulong,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn AcceptSecurityContext(
        phCredential: PCredHandle,
        phContext: PCtxtHandle,
        pInput: PSecBufferDesc,
        fContextReq: ::core::ffi::c_ulong,
        TargetDataRep: ::core::ffi::c_ulong,
        phNewContext: PCtxtHandle,
        pOutput: PSecBufferDesc,
        pfContextAttr: *mut ::core::ffi::c_ulong,
        ptsExpiry: PTimeStamp,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn CompleteAuthToken(
        phContext: PCtxtHandle,
        pToken: PSecBufferDesc,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn ImpersonateSecurityContext(phContext: PCtxtHandle) -> SECURITY_STATUS;
}
extern "C" {
    pub fn RevertSecurityContext(phContext: PCtxtHandle) -> SECURITY_STATUS;
}
extern "C" {
    pub fn QuerySecurityContextToken(
        phContext: PCtxtHandle,
        Token: *mut *mut ::core::ffi::c_void,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn DeleteSecurityContext(phContext: PCtxtHandle) -> SECURITY_STATUS;
}
extern "C" {
    pub fn ApplyControlToken(
        phContext: PCtxtHandle,
        pInput: PSecBufferDesc,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn QueryContextAttributesW(
        phContext: PCtxtHandle,
        ulAttribute: ::core::ffi::c_ulong,
        pBuffer: *mut ::core::ffi::c_void,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn QueryContextAttributesExW(
        phContext: PCtxtHandle,
        ulAttribute: ::core::ffi::c_ulong,
        pBuffer: *mut ::core::ffi::c_void,
        cbBuffer: ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SetContextAttributesW(
        phContext: PCtxtHandle,
        ulAttribute: ::core::ffi::c_ulong,
        pBuffer: *mut ::core::ffi::c_void,
        cbBuffer: ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn QueryCredentialsAttributesW(
        phCredential: PCredHandle,
        ulAttribute: ::core::ffi::c_ulong,
        pBuffer: *mut ::core::ffi::c_void,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn QueryCredentialsAttributesExW(
        phCredential: PCredHandle,
        ulAttribute: ::core::ffi::c_ulong,
        pBuffer: *mut ::core::ffi::c_void,
        cbBuffer: ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SetCredentialsAttributesW(
        phCredential: PCredHandle,
        ulAttribute: ::core::ffi::c_ulong,
        pBuffer: *mut ::core::ffi::c_void,
        cbBuffer: ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn FreeContextBuffer(pvContextBuffer: PVOID) -> SECURITY_STATUS;
}
extern "C" {
    /**

    Message Support API

*/
    pub fn MakeSignature(
        phContext: PCtxtHandle,
        fQOP: ::core::ffi::c_ulong,
        pMessage: PSecBufferDesc,
        MessageSeqNo: ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn VerifySignature(
        phContext: PCtxtHandle,
        pMessage: PSecBufferDesc,
        MessageSeqNo: ::core::ffi::c_ulong,
        pfQOP: *mut ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn EncryptMessage(
        phContext: PCtxtHandle,
        fQOP: ::core::ffi::c_ulong,
        pMessage: PSecBufferDesc,
        MessageSeqNo: ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn DecryptMessage(
        phContext: PCtxtHandle,
        pMessage: PSecBufferDesc,
        MessageSeqNo: ::core::ffi::c_ulong,
        pfQOP: *mut ::core::ffi::c_ulong,
    ) -> SECURITY_STATUS;
}
extern "C" {
    /**

    Misc.

*/
    pub fn EnumerateSecurityPackagesW(
        pcPackages: *mut ::core::ffi::c_ulong,
        ppPackageInfo: *mut PSecPkgInfoW,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn QuerySecurityPackageInfoW(
        pPackageName: PSECURITY_STRING,
        ppPackageInfo: *mut PSecPkgInfoW,
    ) -> SECURITY_STATUS;
}
extern "C" {
    /**

    Context export/import

*/
    pub fn ExportSecurityContext(
        phContext: PCtxtHandle,
        fFlags: ULONG,
        pPackedContext: PSecBuffer,
        pToken: *mut *mut ::core::ffi::c_void,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn ImportSecurityContextW(
        pszPackage: PSECURITY_STRING,
        pPackedContext: PSecBuffer,
        Token: *mut ::core::ffi::c_void,
        phContext: PCtxtHandle,
    ) -> SECURITY_STATUS;
}
extern "C" {
    #[must_use]
    pub fn SecMakeSPN(
        ServiceClass: PUNICODE_STRING,
        ServiceName: PUNICODE_STRING,
        InstanceName: PUNICODE_STRING,
        InstancePort: USHORT,
        Referrer: PUNICODE_STRING,
        Spn: PUNICODE_STRING,
        Length: PULONG,
        Allocate: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SecMakeSPNEx(
        ServiceClass: PUNICODE_STRING,
        ServiceName: PUNICODE_STRING,
        InstanceName: PUNICODE_STRING,
        InstancePort: USHORT,
        Referrer: PUNICODE_STRING,
        TargetInfo: PUNICODE_STRING,
        Spn: PUNICODE_STRING,
        Length: PULONG,
        Allocate: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SecMakeSPNEx2(
        ServiceClass: PUNICODE_STRING,
        ServiceName: PUNICODE_STRING,
        InstanceName: PUNICODE_STRING,
        InstancePort: USHORT,
        Referrer: PUNICODE_STRING,
        InTargetInfo: PUNICODE_STRING,
        Spn: PUNICODE_STRING,
        TotalSize: PULONG,
        Allocate: BOOLEAN,
        IsTargetInfoMarshaled: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SecLookupAccountSid(
        Sid: PSID,
        NameSize: PULONG,
        NameBuffer: PUNICODE_STRING,
        DomainSize: PULONG,
        DomainBuffer: PUNICODE_STRING,
        NameUse: PSID_NAME_USE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SecLookupAccountName(
        Name: PUNICODE_STRING,
        SidSize: PULONG,
        Sid: PSID,
        NameUse: PSID_NAME_USE,
        DomainSize: PULONG,
        ReferencedDomain: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn SecLookupWellKnownSid(
        SidType: WELL_KNOWN_SID_TYPE::Type,
        Sid: PSID,
        SidBufferSize: ULONG,
        SidSize: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    pub fn InitSecurityInterfaceW() -> PSecurityFunctionTableW;
}
extern "C" {
    pub fn SspiEncodeAuthIdentityAsStrings(
        pAuthIdentity: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
        ppszUserName: *mut PCWSTR,
        ppszDomainName: *mut PCWSTR,
        ppszPackedCredentialsString: *mut PCWSTR,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiValidateAuthIdentity(
        AuthData: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiCopyAuthIdentity(
        AuthData: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
        AuthDataCopy: *mut PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiFreeAuthIdentity(AuthData: PSEC_WINNT_AUTH_IDENTITY_OPAQUE);
}
extern "C" {
    pub fn SspiZeroAuthIdentity(AuthData: PSEC_WINNT_AUTH_IDENTITY_OPAQUE);
}
extern "C" {
    pub fn SspiLocalFree(DataBuffer: PVOID);
}
extern "C" {
    pub fn SspiEncodeStringsAsAuthIdentity(
        pszUserName: PCWSTR,
        pszDomainName: PCWSTR,
        pszPackedCredentialsString: PCWSTR,
        ppAuthIdentity: *mut PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiCompareAuthIdentities(
        AuthIdentity1: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
        AuthIdentity2: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
        SameSuppliedUser: PBOOLEAN,
        SameSuppliedIdentity: PBOOLEAN,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiMarshalAuthIdentity(
        AuthIdentity: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
        AuthIdentityLength: *mut ::core::ffi::c_ulong,
        AuthIdentityByteArray: *mut *mut ::core::ffi::c_char,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiUnmarshalAuthIdentity(
        AuthIdentityLength: ::core::ffi::c_ulong,
        AuthIdentityByteArray: *mut ::core::ffi::c_char,
        ppAuthIdentity: *mut PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiIsPromptingNeeded(ErrorOrNtStatus: ::core::ffi::c_ulong) -> BOOLEAN;
}
extern "C" {
    pub fn SspiGetTargetHostName(
        pszTargetName: PCWSTR,
        pszHostName: *mut PWSTR,
    ) -> SECURITY_STATUS;
}
extern "C" {
    pub fn SspiExcludePackage(
        AuthIdentity: PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
        pszPackageName: PCWSTR,
        ppNewAuthIdentity: *mut PSEC_WINNT_AUTH_IDENTITY_OPAQUE,
    ) -> SECURITY_STATUS;
}
extern "C" {
    #[must_use]
    pub fn GetSecurityUserInfo(
        LogonId: PLUID,
        Flags: ULONG,
        UserInformation: *mut PSecurityUserData,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn MapSecurityError(SecStatus: SECURITY_STATUS) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryObject(
        Handle: HANDLE,
        ObjectInformationClass: OBJECT_INFORMATION_CLASS,
        ObjectInformation: PVOID,
        ObjectInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwNotifyChangeKey(
        KeyHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        CompletionFilter: ULONG,
        WatchTree: BOOLEAN,
        Buffer: PVOID,
        BufferSize: ULONG,
        Asynchronous: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwCreateEvent(
        EventHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        EventType: EVENT_TYPE,
        InitialState: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDeleteFile(ObjectAttributes: POBJECT_ATTRIBUTES) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryDirectoryFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
        ReturnSingleEntry: BOOLEAN,
        FileName: PUNICODE_STRING,
        RestartScan: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryDirectoryFileEx(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FileInformation: PVOID,
        Length: ULONG,
        FileInformationClass: FILE_INFORMATION_CLASS,
        QueryFlags: ULONG,
        FileName: PUNICODE_STRING,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetVolumeInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FsInformation: PVOID,
        Length: ULONG,
        FsInformationClass: FS_INFORMATION_CLASS,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwFsControlFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        FsControlCode: ULONG,
        InputBuffer: PVOID,
        InputBufferLength: ULONG,
        OutputBuffer: PVOID,
        OutputBufferLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDuplicateObject(
        SourceProcessHandle: HANDLE,
        SourceHandle: HANDLE,
        TargetProcessHandle: HANDLE,
        TargetHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        HandleAttributes: ULONG,
        Options: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenDirectoryObject(
        DirectoryHandle: PHANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwAllocateVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        ZeroBits: ULONG_PTR,
        RegionSize: PSIZE_T,
        AllocationType: ULONG,
        Protect: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwAllocateVirtualMemoryEx(
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        RegionSize: PSIZE_T,
        AllocationType: ULONG,
        PageProtection: ULONG,
        ExtendedParameters: PMEM_EXTENDED_PARAMETER,
        ExtendedParameterCount: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwFreeVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        RegionSize: PSIZE_T,
        FreeType: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: PVOID,
        MemoryInformationClass: MEMORY_INFORMATION_CLASS,
        MemoryInformation: PVOID,
        MemoryInformationLength: SIZE_T,
        ReturnLength: PSIZE_T,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationVirtualMemory(
        ProcessHandle: HANDLE,
        VmInformationClass: VIRTUAL_MEMORY_INFORMATION_CLASS,
        NumberOfEntries: ULONG_PTR,
        VirtualAddresses: PMEMORY_RANGE_ENTRY,
        VmInformation: PVOID,
        VmInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwWaitForSingleObject(
        Handle: HANDLE,
        Alertable: BOOLEAN,
        Timeout: PLARGE_INTEGER,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetEvent(EventHandle: HANDLE, PreviousState: PLONG) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwFlushVirtualMemory(
        ProcessHandle: HANDLE,
        BaseAddress: *mut PVOID,
        RegionSize: PSIZE_T,
        IoStatus: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenProcessTokenEx(
        ProcessHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        HandleAttributes: ULONG,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwOpenThreadTokenEx(
        ThreadHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        OpenAsSelf: BOOLEAN,
        HandleAttributes: ULONG,
        TokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryInformationToken(
        TokenHandle: HANDLE,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: PVOID,
        TokenInformationLength: ULONG,
        ReturnLength: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetInformationToken(
        TokenHandle: HANDLE,
        TokenInformationClass: TOKEN_INFORMATION_CLASS,
        TokenInformation: PVOID,
        TokenInformationLength: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetSecurityObject(
        Handle: HANDLE,
        SecurityInformation: SECURITY_INFORMATION,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQuerySecurityObject(
        Handle: HANDLE,
        SecurityInformation: SECURITY_INFORMATION,
        SecurityDescriptor: PSECURITY_DESCRIPTOR,
        Length: ULONG,
        LengthNeeded: PULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwLockFile(
        FileHandle: HANDLE,
        Event: HANDLE,
        ApcRoutine: PIO_APC_ROUTINE,
        ApcContext: PVOID,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ByteOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        Key: ULONG,
        FailImmediately: BOOLEAN,
        ExclusiveLock: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwUnlockFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        ByteOffset: PLARGE_INTEGER,
        Length: PLARGE_INTEGER,
        Key: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryQuotaInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ReturnSingleEntry: BOOLEAN,
        SidList: PVOID,
        SidListLength: ULONG,
        StartSid: PSID,
        RestartScan: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetQuotaInformationFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwFlushBuffersFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwFlushBuffersFileEx(
        FileHandle: HANDLE,
        FLags: ULONG,
        Parameters: PVOID,
        ParametersSize: ULONG,
        IoStatusBlock: PIO_STATUS_BLOCK,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwQueryEaFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
        ReturnSingleEntry: BOOLEAN,
        EaList: PVOID,
        EaListLength: ULONG,
        EaIndex: PULONG,
        RestartScan: BOOLEAN,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwSetEaFile(
        FileHandle: HANDLE,
        IoStatusBlock: PIO_STATUS_BLOCK,
        Buffer: PVOID,
        Length: ULONG,
    ) -> NTSTATUS;
}
extern "C" {
    #[must_use]
    pub fn ZwDuplicateToken(
        ExistingTokenHandle: HANDLE,
        DesiredAccess: ACCESS_MASK,
        ObjectAttributes: POBJECT_ATTRIBUTES,
        EffectiveOnly: BOOLEAN,
        TokenType: TOKEN_TYPE,
        NewTokenHandle: PHANDLE,
    ) -> NTSTATUS;
}
